{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Kalliope's documentation Kalliope is a framework that will help you to create your own personal assistant. The concept is to create the brain of your assistant by attaching an input signal (vocal order, scheduled event, MQTT message, GPIO event, etc..) to one or multiple actions called neurons . You can create your own Kalliope bot, by simply choosing and composing the existing neurons without writing any code. But, if you need a particular module, you can write it by yourself, add it to your project and propose it to the community. Kalliope can run on all Linux Debian based distribution including a Raspberry Pi and it's multi-lang. The only thing you need is a microphone. Kalliope is easy-peasy to use, see the hello world - name : \"Hello-world\" signals : - order : \"say hello\" neurons : - say : message : \"Hello world!\" If you want an idea of what you can do with Kalliope, click on the image below [![ENGLISH DEMO](https://img.youtube.com/vi/PcLzo4H18S4/0.jpg)](https://www.youtube.com/watch?v=PcLzo4H18S4)","title":"Home"},{"location":"#welcome-to-kalliopes-documentation","text":"Kalliope is a framework that will help you to create your own personal assistant. The concept is to create the brain of your assistant by attaching an input signal (vocal order, scheduled event, MQTT message, GPIO event, etc..) to one or multiple actions called neurons . You can create your own Kalliope bot, by simply choosing and composing the existing neurons without writing any code. But, if you need a particular module, you can write it by yourself, add it to your project and propose it to the community. Kalliope can run on all Linux Debian based distribution including a Raspberry Pi and it's multi-lang. The only thing you need is a microphone. Kalliope is easy-peasy to use, see the hello world - name : \"Hello-world\" signals : - order : \"say hello\" neurons : - say : message : \"Hello world!\" If you want an idea of what you can do with Kalliope, click on the image below [![ENGLISH DEMO](https://img.youtube.com/vi/PcLzo4H18S4/0.jpg)](https://www.youtube.com/watch?v=PcLzo4H18S4)","title":"Welcome to Kalliope's documentation"},{"location":"cli/","text":"Kalliope Command-line interface SYNOPSIS This is the syntax used to run Kalliope from command line kalliope command --option <argument> For example, to start Kalliope we simply use kalliope start Note: Do not use the CLI as root user or with sudo. Kalliope must run with standard user privileges. ARGUMENTS start Start Kalliope main program Example of use kalliope start To kill Kalliope, you can press \"Ctrl-C\" on your keyboard. install Install a community module. You must set an install type option. Currently the only available option is --git-url . Syntax kalliope install --git-url <url> Example of use kalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git OPTIONS Commands can be completed by the following options: -v or --version Display the current isntalled version of Kalliope. Example of use kalliope --version kalliope -v --run-synapse SYNAPSE_NAME Run a specific synapse from the brain file. Example of use kalliope start --run-synapse \"say-hello\" --run-order \"Your Order\" Run a specific order from command line. Example of use kalliope start --run-order \"hello\" --brain-file BRAIN_FILE Replace the default brain file from the root of the project folder by a custom one. Important note: The path must be absolute. The absolute path contains the root directory and all other subdirectories in which a file or folder is contained. Example of use kalliope start --brain-file /home/me/my_other_brain.yml You can combine the options together like, for example: kalliope start --run-synapse \"say-hello\" --brain-file /home/me/my_other_brain.yml --deaf Starts Kalliope in a deaf state, the trigger is paused. Example of use kalliope start --deaf You can combine the options together like, for example: kalliope start --deaf --brain-file /home/me/my_other_brain.yml --debug Show debug output in the console Example of use kalliope start --debug --git-url Used by the install argument to specify the URL of a git repository of the module to install.","title":"CLI"},{"location":"cli/#kalliope-command-line-interface","text":"","title":"Kalliope Command-line interface"},{"location":"cli/#synopsis","text":"This is the syntax used to run Kalliope from command line kalliope command --option <argument> For example, to start Kalliope we simply use kalliope start Note: Do not use the CLI as root user or with sudo. Kalliope must run with standard user privileges.","title":"SYNOPSIS"},{"location":"cli/#arguments","text":"","title":"ARGUMENTS"},{"location":"cli/#start","text":"Start Kalliope main program Example of use kalliope start To kill Kalliope, you can press \"Ctrl-C\" on your keyboard.","title":"start"},{"location":"cli/#install","text":"Install a community module. You must set an install type option. Currently the only available option is --git-url . Syntax kalliope install --git-url <url> Example of use kalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git","title":"install"},{"location":"cli/#options","text":"Commands can be completed by the following options:","title":"OPTIONS"},{"location":"cli/#-v-or-version","text":"Display the current isntalled version of Kalliope. Example of use kalliope --version kalliope -v","title":"-v or --version"},{"location":"cli/#-run-synapse-synapse_name","text":"Run a specific synapse from the brain file. Example of use kalliope start --run-synapse \"say-hello\"","title":"--run-synapse SYNAPSE_NAME"},{"location":"cli/#-run-order-your-order","text":"Run a specific order from command line. Example of use kalliope start --run-order \"hello\"","title":"--run-order \"Your Order\""},{"location":"cli/#-brain-file-brain_file","text":"Replace the default brain file from the root of the project folder by a custom one. Important note: The path must be absolute. The absolute path contains the root directory and all other subdirectories in which a file or folder is contained. Example of use kalliope start --brain-file /home/me/my_other_brain.yml You can combine the options together like, for example: kalliope start --run-synapse \"say-hello\" --brain-file /home/me/my_other_brain.yml","title":"--brain-file BRAIN_FILE"},{"location":"cli/#-deaf","text":"Starts Kalliope in a deaf state, the trigger is paused. Example of use kalliope start --deaf You can combine the options together like, for example: kalliope start --deaf --brain-file /home/me/my_other_brain.yml","title":"--deaf"},{"location":"cli/#-debug","text":"Show debug output in the console Example of use kalliope start --debug","title":"--debug"},{"location":"cli/#-git-url","text":"Used by the install argument to specify the URL of a git repository of the module to install.","title":"--git-url"},{"location":"getting-started/","text":"Getting started with Kalliope Kalliope needs two files to works, a settings.yml and a brain.yml . As files are written on YAML syntax, we strongly recommend you to use an editor(IDE) like VS Code or Atom . If you are using kalliope from a Rpi, the idea would be to configure your assistant from your main computer with an IDE and then push your config folder into your Rpi. When you start kalliope using the CLI ( kalliope start ), the program will try to load your settings.yml and brain.yml in the following order: From your current folder, E.g /home/pi/my_kalliope/ From /etc/kalliope/ From the default settings.yml and brain.yml which are located in the root of the Kalliope project tree. This is a common tree of a Kalliope configuration folder: kalliope_config/ \u251c\u2500\u2500 brains \u2502 \u2514\u2500\u2500 included_brain.yml \u251c\u2500\u2500 brain.yml \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 kalliope-EN-13samples.pmdl \u2514\u2500\u2500 settings.yml We made starter kits that only needs to be cloned, placed into the Rpi and launched. You'll find the whole list of available start kits on the Kalliope's website . Those repositories provide you a structure to start playing and learning basics of Kalliope. Download the starter kit of your choice and open the folder with your IDE. All files are expressed in YAML format (see YAML Syntax ) and has a minimum of syntax, which intentionally tries to not be a programming language or script, but rather a model of a configuration or a process. Let's open the main brain file of the English starter kit. You'll see there are some included sub brains file. - includes : - brains/say.yml If you open the say.yml file from the brains folder, you'll see a basic synapse that uses the neuron \" Say \" and make Kalliope speaks out loud \"Hello sir\" when you say \"hello\". - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - say : message : \"Hello sir\" Let's break this down in sections so we can understand how the file is built and what each part means. Items that begin with a - are considered as list items. Items have the format of key: value where value can be a simple string or a sequence of other items. At the top level we have a \"name\" tag. This is the unique identifier of the synapse. It must be an unique word with the only accepted values : alphanumerics and dash. ([a - zA - Z0 - 9-]) - name : \"Say-hello\" The first part, called signals is a list of input actions. You can add as many signal as you want in the \"signals\" section. If one of them is triggered, the neuron list will be executed. signals : - order : \"say-hello\" In the following example, we use just one signal, an \"order\", but it an can be: an order: Something that has been spoke out loud by the user. an event: A date or a frequency (E.G: repeat each morning at 8:30) a mqtt message A message received on a MQTT topic a geolocation From the position of your smartphone a community signal E.g: GPIO signal allow you to trigger actions from a button No signal . Then the synapse can be only called from another synapse or by the API Then we have the neurons declaration. Neurons are modules that will be executed when the input action(signal) is triggered. You can define as many neurons as you want to the same input action (for example: say something, then do something etc...). This declaration contains a list (because it starts with a \"-\") of neurons neurons : - neuron_1_name - neuron_2_name - another_neuron The order of execution of neurons is defined by the order in which they are listed in neurons declaration. Some neurons need parameters that can be passed as arguments following the syntax bellow: neurons : - neuron_name : parameter1 : \"value1\" parameter2 : \"value2\" Note here that parameters are indented with one tabulation bellow the neuron's name (YAML syntax requirement). In this example, the neuron called \"say\" will make Kalliope speak out loud the sentence in parameter message . Neurons can be Core (installed by default) or community based (need to be installed). Time to start Kalliope. Move into the folder and then start Kalliope: cd /path/to/the/starter_kit kalliope start Note: Do not start Kalliope as root user or with sudo Kalliope will load settings and brain, the output should looks the following Starting event manager Events loaded Starting Kalliope Press Ctrl+C for stopping Starting REST API Listening port: 5000 Waiting for trigger detection Then speak the hotwork out loud to wake up Kalliope (with the right pronunciation depending on your starter kit. \"Kalliop\u00e9\" in french, \"Kalliopee\" in English, etc..). If the trigger is successfully raised, you'll see \"say something\" into the console. Say something! Then you can say \"hello\" and listen the Kalliope response. Say something! Google Speech Recognition thinks you said hello Order matched in the brain. Running synapse \"say-hello\" Waiting for trigger detection That's it! You are ready to customize your assistant!","title":"Getting-started"},{"location":"getting-started/#getting-started-with-kalliope","text":"Kalliope needs two files to works, a settings.yml and a brain.yml . As files are written on YAML syntax, we strongly recommend you to use an editor(IDE) like VS Code or Atom . If you are using kalliope from a Rpi, the idea would be to configure your assistant from your main computer with an IDE and then push your config folder into your Rpi. When you start kalliope using the CLI ( kalliope start ), the program will try to load your settings.yml and brain.yml in the following order: From your current folder, E.g /home/pi/my_kalliope/ From /etc/kalliope/ From the default settings.yml and brain.yml which are located in the root of the Kalliope project tree. This is a common tree of a Kalliope configuration folder: kalliope_config/ \u251c\u2500\u2500 brains \u2502 \u2514\u2500\u2500 included_brain.yml \u251c\u2500\u2500 brain.yml \u251c\u2500\u2500 files \u2502 \u2514\u2500\u2500 kalliope-EN-13samples.pmdl \u2514\u2500\u2500 settings.yml We made starter kits that only needs to be cloned, placed into the Rpi and launched. You'll find the whole list of available start kits on the Kalliope's website . Those repositories provide you a structure to start playing and learning basics of Kalliope. Download the starter kit of your choice and open the folder with your IDE. All files are expressed in YAML format (see YAML Syntax ) and has a minimum of syntax, which intentionally tries to not be a programming language or script, but rather a model of a configuration or a process. Let's open the main brain file of the English starter kit. You'll see there are some included sub brains file. - includes : - brains/say.yml If you open the say.yml file from the brains folder, you'll see a basic synapse that uses the neuron \" Say \" and make Kalliope speaks out loud \"Hello sir\" when you say \"hello\". - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - say : message : \"Hello sir\" Let's break this down in sections so we can understand how the file is built and what each part means. Items that begin with a - are considered as list items. Items have the format of key: value where value can be a simple string or a sequence of other items. At the top level we have a \"name\" tag. This is the unique identifier of the synapse. It must be an unique word with the only accepted values : alphanumerics and dash. ([a - zA - Z0 - 9-]) - name : \"Say-hello\" The first part, called signals is a list of input actions. You can add as many signal as you want in the \"signals\" section. If one of them is triggered, the neuron list will be executed. signals : - order : \"say-hello\" In the following example, we use just one signal, an \"order\", but it an can be: an order: Something that has been spoke out loud by the user. an event: A date or a frequency (E.G: repeat each morning at 8:30) a mqtt message A message received on a MQTT topic a geolocation From the position of your smartphone a community signal E.g: GPIO signal allow you to trigger actions from a button No signal . Then the synapse can be only called from another synapse or by the API Then we have the neurons declaration. Neurons are modules that will be executed when the input action(signal) is triggered. You can define as many neurons as you want to the same input action (for example: say something, then do something etc...). This declaration contains a list (because it starts with a \"-\") of neurons neurons : - neuron_1_name - neuron_2_name - another_neuron The order of execution of neurons is defined by the order in which they are listed in neurons declaration. Some neurons need parameters that can be passed as arguments following the syntax bellow: neurons : - neuron_name : parameter1 : \"value1\" parameter2 : \"value2\" Note here that parameters are indented with one tabulation bellow the neuron's name (YAML syntax requirement). In this example, the neuron called \"say\" will make Kalliope speak out loud the sentence in parameter message . Neurons can be Core (installed by default) or community based (need to be installed). Time to start Kalliope. Move into the folder and then start Kalliope: cd /path/to/the/starter_kit kalliope start Note: Do not start Kalliope as root user or with sudo Kalliope will load settings and brain, the output should looks the following Starting event manager Events loaded Starting Kalliope Press Ctrl+C for stopping Starting REST API Listening port: 5000 Waiting for trigger detection Then speak the hotwork out loud to wake up Kalliope (with the right pronunciation depending on your starter kit. \"Kalliop\u00e9\" in french, \"Kalliopee\" in English, etc..). If the trigger is successfully raised, you'll see \"say something\" into the console. Say something! Then you can say \"hello\" and listen the Kalliope response. Say something! Google Speech Recognition thinks you said hello Order matched in the brain. Running synapse \"say-hello\" Waiting for trigger detection That's it! You are ready to customize your assistant!","title":"Getting started with Kalliope"},{"location":"rest_api/","text":"Rest API Kalliope provides the REST API to manage the synapses. For configuring the API refer to the settings documentation . Synapses API Settings API Main API views Get Kalliope's version Normal response codes: 200 Error response codes: unauthorized(401) Curl command: curl -i --user admin:secret -X GET http://localhost:5000/ Output example: { \"Kalliope version\" : \"0.4.2\" }","title":"Main"},{"location":"rest_api/#rest-api","text":"Kalliope provides the REST API to manage the synapses. For configuring the API refer to the settings documentation . Synapses API Settings API","title":"Rest API"},{"location":"rest_api/#main-api-views","text":"","title":"Main API views"},{"location":"rest_api/#get-kalliopes-version","text":"Normal response codes: 200 Error response codes: unauthorized(401) Curl command: curl -i --user admin:secret -X GET http://localhost:5000/ Output example: { \"Kalliope version\" : \"0.4.2\" }","title":"Get Kalliope's version"},{"location":"api/neurons/","text":"Kalliope API: Neurons Method URL Action GET /neurons Get list of installed neurons GET /neurons/install Install a community neuron List installed neurons Normal response codes: 200 Error response codes: unauthorized(401) Curl command: curl -i \\ --user admin:secret \\ -X GET \\ http://localhost:5000/neurons Output example: { \"community\" : [ \"gmail_checker\" , \"wikipedia_searcher\" ], \"core\" : [ \"script\" , \"brain\" , \"systemdate\" , \"neurotimer\" , \"uri\" , \"say\" , \"sleep\" , \"ansible_playbook\" , \"neurotransmitter\" , \"settings\" , \"signals\" , \"shell\" , \"debug\" , \"mqtt_publisher\" , \"kalliope_version\" , \"kill_switch\" ] } Install a neuron curl -i -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d ' { \"git_url\": \"https://github.com/kalliope-project/kalliope_neuron_wikipedia.git\", \"sudo_password\": \"raspberry\" } ' \\ http://127.0.0.1:5000/neurons/install Output example: { \"author\" : \"The dream team of Kalliope project\" , \"kalliope_supported_version\" : [ 0.4 , 0.5 ], \"name\" : \"wikipedia_searcher\" , \"tags\" : [ \"wikipedia\" , \"search engine\" , \"wiki\" ], \"type\" : \"neuron\" }","title":"Neurons"},{"location":"api/neurons/#kalliope-api-neurons","text":"Method URL Action GET /neurons Get list of installed neurons GET /neurons/install Install a community neuron","title":"Kalliope API: Neurons"},{"location":"api/neurons/#list-installed-neurons","text":"Normal response codes: 200 Error response codes: unauthorized(401) Curl command: curl -i \\ --user admin:secret \\ -X GET \\ http://localhost:5000/neurons Output example: { \"community\" : [ \"gmail_checker\" , \"wikipedia_searcher\" ], \"core\" : [ \"script\" , \"brain\" , \"systemdate\" , \"neurotimer\" , \"uri\" , \"say\" , \"sleep\" , \"ansible_playbook\" , \"neurotransmitter\" , \"settings\" , \"signals\" , \"shell\" , \"debug\" , \"mqtt_publisher\" , \"kalliope_version\" , \"kill_switch\" ] }","title":"List installed neurons"},{"location":"api/neurons/#install-a-neuron","text":"curl -i -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d ' { \"git_url\": \"https://github.com/kalliope-project/kalliope_neuron_wikipedia.git\", \"sudo_password\": \"raspberry\" } ' \\ http://127.0.0.1:5000/neurons/install Output example: { \"author\" : \"The dream team of Kalliope project\" , \"kalliope_supported_version\" : [ 0.4 , 0.5 ], \"name\" : \"wikipedia_searcher\" , \"tags\" : [ \"wikipedia\" , \"search engine\" , \"wiki\" ], \"type\" : \"neuron\" }","title":"Install a neuron"},{"location":"api/settings/","text":"Kalliope API: Settings Method URL Action GET /settings/deaf Get the current deaf status POST /settings/deaf Switch the deaf status GET /settings/mute Get the current mute status POST /settings/mute Switch the mute status GET /settings/recognizer_multiplier Get the current recognizer_multiplier POST /settings/recognizer_multiplier Update the recognizer_multiplier value GET /settings/recognizer_energy_ratio Get the recognizer_energy_ratio POST /settings/recognizer_energy_ratio Update the recognizer_energy_ratio GET /settings/recognizer_recording_timeout Get the current recognizer_recording_timeout POST /settings/recognizer_recording_timeout Update the recognizer_recording_timeout value GET /settings/recognizer_recording_timeout_with_silence Get the recognizer_recording_timeout_with_silence POST /settings/recognizer_recording_timeout_with_silence Update the recognizer_recording_timeout_with_silence GET /settings/hooks Get the current hooks POST /settings/hooks Update the hooks list GET /settings/variables Get the variables list POST /settings/variables Update the variables list GET /settings/default_tts Get current tts POST /settings/default_tts Update current tts GET /settings/default_stt Get current stt POST /settings/default_stt Update current stt GET /settings/default_player Get the current player POST /settings/default_player Update current player GET /settings/default_trigger Get the current trigger POST /settings/default_trigger Update the current trigger Note: --user is only needed if password_protected is True Get current settings Normal response codes: 200 Error response codes: unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings Output example: { \"settings\" : { \"cache_path\" : \"/tmp/kalliope_tts_cache\" , \"default_player_name\" : \"mplayer\" , \"default_stt_name\" : \"google\" , \"default_trigger_name\" : \"snowboy\" , \"default_tts_name\" : \"pico2wave\" , \"hooks\" : { \"on_deaf\" : null , \"on_mute\" : null , \"on_order_found\" : null , \"on_order_not_found\" : \"order-not-found-synapse\" , \"on_processed_synapses\" : null , \"on_start\" : \"on-start-synapse\" , \"on_start_listening\" : null , \"on_start_speaking\" : null , \"on_stop_listening\" : null , \"on_stop_speaking\" : null , \"on_stt_error\" : null , \"on_triggered\" : \"on-triggered-synapse\" , \"on_undeaf\" : null , \"on_unmute\" : null , \"on_waiting_for_trigger\" : null }, \"kalliope_version\" : \"0.5.1b\" , \"machine\" : \"x86_64\" , \"options\" : { \"adjust_for_ambient_noise_second\" : 0 , \"deaf\" : false , \"energy_threshold\" : 4000 , \"mute\" : false , \"name\" : \"Options\" , \"stt_timeout\" : 0 }, \"players\" : [ { \"name\" : \"mplayer\" , \"parameters\" : {} }, { \"name\" : \"pyalsaaudio\" , \"parameters\" : { \"convert_to_wav\" : true , \"device\" : \"default\" } }, { \"name\" : \"pyaudioplayer\" , \"parameters\" : { \"convert_to_wav\" : true } }, { \"name\" : \"sounddeviceplayer\" , \"parameters\" : { \"convert_to_wav\" : true } } ], \"resources\" : { \"neuron_folder\" : null , \"signal_folder\" : null , \"stt_folder\" : null , \"trigger_folder\" : null , \"tts_folder\" : null }, \"rest_api\" : { \"active\" : true , \"allowed_cors_origin\" : false , \"login\" : \"admin\" , \"password\" : \"secret\" , \"password_protected\" : true , \"port\" : 5000 }, \"stts\" : [ { \"name\" : \"google\" , \"parameters\" : { \"language\" : \"fr-FR\" } }, { \"name\" : \"wit\" , \"parameters\" : { \"key\" : \"fakekey\" } }, { \"name\" : \"bing\" , \"parameters\" : { \"key\" : \"fakekey\" } }, { \"name\" : \"apiai\" , \"parameters\" : { \"key\" : \"fakekey\" , \"language\" : \"fr\" } }, { \"name\" : \"houndify\" , \"parameters\" : { \"client_id\" : \"fakeclientid\" , \"key\" : \"fakekey\" } } ], \"triggers\" : [ { \"name\" : \"snowboy\" , \"parameters\" : { \"pmdl_file\" : \"trigger/snowboy/resources/kalliope-FR-40samples.pmdl\" } } ], \"ttss\" : [ { \"name\" : \"pico2wave\" , \"parameters\" : { \"cache\" : true , \"language\" : \"fr-FR\" } }, { \"name\" : \"googletts\" , \"parameters\" : { \"cache\" : true , \"language\" : \"fr\" } }, { \"name\" : \"voicerss\" , \"parameters\" : { \"cache\" : true , \"key\" : \"API_Key\" , \"language\" : \"fr-fr\" } }, { \"name\" : \"watson\" , \"parameters\" : { \"password\" : \"password\" , \"username\" : \"me\" , \"voice\" : \"fr-FR_ReneeVoice\" } } ], \"variables\" : {} } } Deaf Get deaf status Normal response codes: 200 Error response codes: unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/deaf Output example: { \"deaf\" : true } Switch deaf status Kalliope can switch to 'deaf' mode, so she can not ear you anymore, the trigger/hotword is desactivated. However Kalliope continues to process synapses. Normal response codes: 200 Error response codes: unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"deaf\": \"True\"}' http://127.0.0.1:5000/deaf Output example: { \"deaf\" : true } Mute When you use the API, by default Kalliope will generate a text and process it into the TTS engine. Some calls to the API can be done with a flag that will tell Kalliope to only return the generated text without processing it into the audio player. When mute is switched to true, Kalliope will not speak out loud on the server side. Get mute status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/mute Output example: { \"mute\" : true } Set mute status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"mute\": \"True\"}' http://127.0.0.1:5000/mute Output example: { \"mute\" : true } recognizer_multiplier Define the recognizer_multiplier in the settings. Get recognizer_multiplier status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_multiplier Output example: { \"recognizer_multiplier\" : 4000 } Set recognizer_multiplier status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_multiplier\": 1.0}' http://127.0.0.1:5000/settings/recognizer_multiplier Output example: { \"recognizer_multiplier\" : 1.0 } recognizer_energy_ratio Define the recognizer_energy_ratio in the settings. Get recognizer_energy_ratio status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_energy_ratio Output example: { \"recognizer_energy_ratio\" : 1.5 } Set recognizer_energy_ratio status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_energy_ratio\": 1.5}' http://127.0.0.1:5000/settings/recognizer_energy_ratio Output example: { \"recognizer_energy_ratio\" : 1.5 } recognizer_recording_timeout Define the recognizer_recording_timeout in the settings. Get recognizer_recording_timeout status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_recording_timeout Output example: { \"recognizer_recording_timeout\" : 15.0 } Set recognizer_recording_timeout status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_recording_timeout\": 15.0}' http://127.0.0.1:5000/settings/recognizer_recording_timeout Output example: { \"recognizer_recording_timeout\" : 15.0 } recognizer_recording_timeout_with_silence Define the recognizer_recording_timeout_with_silence in the settings. Get recognizer_recording_timeout_with_silence status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_recording_timeout_with_silence Output example: { \"recognizer_recording_timeout_with_silence\" : 3.0 } Set recognizer_recording_timeout_with_silence status Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_recording_timeout_with_silence\": 3.0}' http://127.0.0.1:5000/settings/recognizer_recording_timeout_with_silence Output example: { \"recognizer_recording_timeout_with_silence\" : 3.0 } Variables Get variables list Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/variables Output example: { \"variables\" : { \"my_variable\" : \"blabla\" , \"nickname\" : \"monf\" } } Update Variables Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"mySecondVariable\": \"SecondValue\", \"Nickname2\": \"Nico\"}' http://127.0.0.1:5000/settings/variables Output example: { \"variables\" : { \"my_variable \" : \"blabla\" , \"nickname\" : \"monf\" , \"mysecondVariable\" : \"SecondValue\" , \"Nickname2\" : \"Nico\" } } default tts, stt, player, trigger Get Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_tts curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_stt curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_player curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_trigger Output example: { \"default_tts\" : \"pico2wave\" } Update Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) /!\\ Note: To update a tts, stt, player, trigger it should be properly defined in the 'settings.yml' in the corresponding list. Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"default_tts\": \"pico2wave\"}' http://127.0.0.1:5000/settings/default_tts Output example: { \"default_tts\" : \"googletts\" }","title":"Settings"},{"location":"api/settings/#kalliope-api-settings","text":"Method URL Action GET /settings/deaf Get the current deaf status POST /settings/deaf Switch the deaf status GET /settings/mute Get the current mute status POST /settings/mute Switch the mute status GET /settings/recognizer_multiplier Get the current recognizer_multiplier POST /settings/recognizer_multiplier Update the recognizer_multiplier value GET /settings/recognizer_energy_ratio Get the recognizer_energy_ratio POST /settings/recognizer_energy_ratio Update the recognizer_energy_ratio GET /settings/recognizer_recording_timeout Get the current recognizer_recording_timeout POST /settings/recognizer_recording_timeout Update the recognizer_recording_timeout value GET /settings/recognizer_recording_timeout_with_silence Get the recognizer_recording_timeout_with_silence POST /settings/recognizer_recording_timeout_with_silence Update the recognizer_recording_timeout_with_silence GET /settings/hooks Get the current hooks POST /settings/hooks Update the hooks list GET /settings/variables Get the variables list POST /settings/variables Update the variables list GET /settings/default_tts Get current tts POST /settings/default_tts Update current tts GET /settings/default_stt Get current stt POST /settings/default_stt Update current stt GET /settings/default_player Get the current player POST /settings/default_player Update current player GET /settings/default_trigger Get the current trigger POST /settings/default_trigger Update the current trigger Note: --user is only needed if password_protected is True","title":"Kalliope API: Settings"},{"location":"api/settings/#get-current-settings","text":"Normal response codes: 200 Error response codes: unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings Output example: { \"settings\" : { \"cache_path\" : \"/tmp/kalliope_tts_cache\" , \"default_player_name\" : \"mplayer\" , \"default_stt_name\" : \"google\" , \"default_trigger_name\" : \"snowboy\" , \"default_tts_name\" : \"pico2wave\" , \"hooks\" : { \"on_deaf\" : null , \"on_mute\" : null , \"on_order_found\" : null , \"on_order_not_found\" : \"order-not-found-synapse\" , \"on_processed_synapses\" : null , \"on_start\" : \"on-start-synapse\" , \"on_start_listening\" : null , \"on_start_speaking\" : null , \"on_stop_listening\" : null , \"on_stop_speaking\" : null , \"on_stt_error\" : null , \"on_triggered\" : \"on-triggered-synapse\" , \"on_undeaf\" : null , \"on_unmute\" : null , \"on_waiting_for_trigger\" : null }, \"kalliope_version\" : \"0.5.1b\" , \"machine\" : \"x86_64\" , \"options\" : { \"adjust_for_ambient_noise_second\" : 0 , \"deaf\" : false , \"energy_threshold\" : 4000 , \"mute\" : false , \"name\" : \"Options\" , \"stt_timeout\" : 0 }, \"players\" : [ { \"name\" : \"mplayer\" , \"parameters\" : {} }, { \"name\" : \"pyalsaaudio\" , \"parameters\" : { \"convert_to_wav\" : true , \"device\" : \"default\" } }, { \"name\" : \"pyaudioplayer\" , \"parameters\" : { \"convert_to_wav\" : true } }, { \"name\" : \"sounddeviceplayer\" , \"parameters\" : { \"convert_to_wav\" : true } } ], \"resources\" : { \"neuron_folder\" : null , \"signal_folder\" : null , \"stt_folder\" : null , \"trigger_folder\" : null , \"tts_folder\" : null }, \"rest_api\" : { \"active\" : true , \"allowed_cors_origin\" : false , \"login\" : \"admin\" , \"password\" : \"secret\" , \"password_protected\" : true , \"port\" : 5000 }, \"stts\" : [ { \"name\" : \"google\" , \"parameters\" : { \"language\" : \"fr-FR\" } }, { \"name\" : \"wit\" , \"parameters\" : { \"key\" : \"fakekey\" } }, { \"name\" : \"bing\" , \"parameters\" : { \"key\" : \"fakekey\" } }, { \"name\" : \"apiai\" , \"parameters\" : { \"key\" : \"fakekey\" , \"language\" : \"fr\" } }, { \"name\" : \"houndify\" , \"parameters\" : { \"client_id\" : \"fakeclientid\" , \"key\" : \"fakekey\" } } ], \"triggers\" : [ { \"name\" : \"snowboy\" , \"parameters\" : { \"pmdl_file\" : \"trigger/snowboy/resources/kalliope-FR-40samples.pmdl\" } } ], \"ttss\" : [ { \"name\" : \"pico2wave\" , \"parameters\" : { \"cache\" : true , \"language\" : \"fr-FR\" } }, { \"name\" : \"googletts\" , \"parameters\" : { \"cache\" : true , \"language\" : \"fr\" } }, { \"name\" : \"voicerss\" , \"parameters\" : { \"cache\" : true , \"key\" : \"API_Key\" , \"language\" : \"fr-fr\" } }, { \"name\" : \"watson\" , \"parameters\" : { \"password\" : \"password\" , \"username\" : \"me\" , \"voice\" : \"fr-FR_ReneeVoice\" } } ], \"variables\" : {} } }","title":"Get current settings"},{"location":"api/settings/#deaf","text":"","title":"Deaf"},{"location":"api/settings/#get-deaf-status","text":"Normal response codes: 200 Error response codes: unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/deaf Output example: { \"deaf\" : true }","title":"Get deaf status"},{"location":"api/settings/#switch-deaf-status","text":"Kalliope can switch to 'deaf' mode, so she can not ear you anymore, the trigger/hotword is desactivated. However Kalliope continues to process synapses. Normal response codes: 200 Error response codes: unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"deaf\": \"True\"}' http://127.0.0.1:5000/deaf Output example: { \"deaf\" : true }","title":"Switch deaf status"},{"location":"api/settings/#mute","text":"When you use the API, by default Kalliope will generate a text and process it into the TTS engine. Some calls to the API can be done with a flag that will tell Kalliope to only return the generated text without processing it into the audio player. When mute is switched to true, Kalliope will not speak out loud on the server side.","title":"Mute"},{"location":"api/settings/#get-mute-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/mute Output example: { \"mute\" : true }","title":"Get mute status"},{"location":"api/settings/#set-mute-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"mute\": \"True\"}' http://127.0.0.1:5000/mute Output example: { \"mute\" : true }","title":"Set mute status"},{"location":"api/settings/#recognizer_multiplier","text":"Define the recognizer_multiplier in the settings.","title":"recognizer_multiplier"},{"location":"api/settings/#get-recognizer_multiplier-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_multiplier Output example: { \"recognizer_multiplier\" : 4000 }","title":"Get recognizer_multiplier status"},{"location":"api/settings/#set-recognizer_multiplier-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_multiplier\": 1.0}' http://127.0.0.1:5000/settings/recognizer_multiplier Output example: { \"recognizer_multiplier\" : 1.0 }","title":"Set recognizer_multiplier status"},{"location":"api/settings/#recognizer_energy_ratio","text":"Define the recognizer_energy_ratio in the settings.","title":"recognizer_energy_ratio"},{"location":"api/settings/#get-recognizer_energy_ratio-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_energy_ratio Output example: { \"recognizer_energy_ratio\" : 1.5 }","title":"Get recognizer_energy_ratio status"},{"location":"api/settings/#set-recognizer_energy_ratio-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_energy_ratio\": 1.5}' http://127.0.0.1:5000/settings/recognizer_energy_ratio Output example: { \"recognizer_energy_ratio\" : 1.5 }","title":"Set recognizer_energy_ratio status"},{"location":"api/settings/#recognizer_recording_timeout","text":"Define the recognizer_recording_timeout in the settings.","title":"recognizer_recording_timeout"},{"location":"api/settings/#get-recognizer_recording_timeout-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_recording_timeout Output example: { \"recognizer_recording_timeout\" : 15.0 }","title":"Get recognizer_recording_timeout status"},{"location":"api/settings/#set-recognizer_recording_timeout-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_recording_timeout\": 15.0}' http://127.0.0.1:5000/settings/recognizer_recording_timeout Output example: { \"recognizer_recording_timeout\" : 15.0 }","title":"Set recognizer_recording_timeout status"},{"location":"api/settings/#recognizer_recording_timeout_with_silence","text":"Define the recognizer_recording_timeout_with_silence in the settings.","title":"recognizer_recording_timeout_with_silence"},{"location":"api/settings/#get-recognizer_recording_timeout_with_silence-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/recognizer_recording_timeout_with_silence Output example: { \"recognizer_recording_timeout_with_silence\" : 3.0 }","title":"Get recognizer_recording_timeout_with_silence status"},{"location":"api/settings/#set-recognizer_recording_timeout_with_silence-status","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"recognizer_recording_timeout_with_silence\": 3.0}' http://127.0.0.1:5000/settings/recognizer_recording_timeout_with_silence Output example: { \"recognizer_recording_timeout_with_silence\" : 3.0 }","title":"Set recognizer_recording_timeout_with_silence status"},{"location":"api/settings/#variables","text":"","title":"Variables"},{"location":"api/settings/#get-variables-list","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/variables Output example: { \"variables\" : { \"my_variable\" : \"blabla\" , \"nickname\" : \"monf\" } }","title":"Get variables list"},{"location":"api/settings/#update-variables","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"mySecondVariable\": \"SecondValue\", \"Nickname2\": \"Nico\"}' http://127.0.0.1:5000/settings/variables Output example: { \"variables\" : { \"my_variable \" : \"blabla\" , \"nickname\" : \"monf\" , \"mysecondVariable\" : \"SecondValue\" , \"Nickname2\" : \"Nico\" } }","title":"Update Variables"},{"location":"api/settings/#default-tts-stt-player-trigger","text":"","title":"default tts, stt, player, trigger"},{"location":"api/settings/#get","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) Curl command: curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_tts curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_stt curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_player curl -i --user admin:secret -X GET http://127.0.0.1:5000/settings/default_trigger Output example: { \"default_tts\" : \"pico2wave\" }","title":"Get"},{"location":"api/settings/#update","text":"Normal response codes: 200 Error response codes : unauthorized(401), Bad request(400) /!\\ Note: To update a tts, stt, player, trigger it should be properly defined in the 'settings.yml' in the corresponding list. Curl command: curl -i -H \"Content-Type: application/json\" --user admin:secret -X POST -d '{\"default_tts\": \"pico2wave\"}' http://127.0.0.1:5000/settings/default_tts Output example: { \"default_tts\" : \"googletts\" }","title":"Update"},{"location":"api/synapses/","text":"Kalliope API: Synapses Method URL Action GET / Get kaliope version GET /synapses List synapses POST /synapses Add a synapse to the brain DELETE /synapses Delete a synapse by name GET /synapses/ Get synapse details by name POST /synapses/start/id/ Run a synapse by its name POST /synapses/start/order Run a synapse from a text order POST /synapses/start/audio Run a synapse from an audio sample List synapses Normal response codes: 200 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X GET \\ http://localhost:5000/synapses Output example: { \"synapses\" : [ [ { \"name\" : \"stop-kalliope\" , \"neurons\" : [ { \"say\" : { \"message\" : \"Good bye\" } }, \"kill_switch\" ], \"signals\" : [ { \"order\" : \"close\" } ] } ], [ { \"name\" : \"say-hello\" , \"neurons\" : [ { \"say\" : { \"message\" : [ \"Bonjour monsieur\" ] } } ], \"signals\" : [ { \"order\" : \"bonjour\" } ] } ] ] } Show synapse details Normal response codes: 200 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X GET \\ http://localhost:5000/synapses/say-hello Output example: { \"synapses\" : { \"name\" : \"say-hello\" , \"neurons\" : [ { \"say\" : { \"message\" : [ \"Bonjour monsieur\" ] } } ], \"signals\" : [ { \"order\" : \"bonjour\" } ] } } Add a synapse to the brain Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d '{ \"name\": \"Say-hello\", \"signals\": [ { \"order\": \"I am Batman\" } ], \"neurons\": [ { \"say\": { \"message\": \"I know\" } } ] }' \\ http://127.0.0.1:5000/synapses Output example: { \"enabled\" : true , \"name\" : \"Say-hello\" , \"neurons\" : [ { \"name\" : \"say\" , \"parameters\" : { \"message\" : \"I know\" } } ], \"signals\" : [ { \"name\" : \"order\" , \"parameters\" : \"I am Batman\" } ] } Delete a synapse by its name Normal response codes: 204 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X DELETE \\ http://localhost:5000/synapses/start/id/say-hello Run a synapse by its name Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X POST \\ http://127.0.0.1:5000/synapses/say-hello-en The mute flag can be added to this call. Curl command: curl -i \\ -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d '{\"mute\":\"true\"}' \\ http://127.0.0.1:5000/synapses/start/id/say-hello-fr Some neuron inside a synapse will wait for parameters that comes from the order. You can provide those parameters by adding a parameters list of data. Curl command: curl -i \\ -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d '{\"parameters\": {\"parameter1\": \"value1\" }}' \\ http://127.0.0.1:5000/synapses/start/id/synapse-id Run a synapse from an order Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST -d '{\"order\":\"my order\"}' \\ http://localhost:5000/synapses/start/order If the order contains accent or quotes, use a file for testing with curl cat post.json { \"order\" : \"j'aime\" } Then curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST \\ --data @post.json http://localhost:5000/synapses/start/order Output example if the order have matched and so launched synapses: { \"matched_synapses\" : [ { \"matched_order\" : \"Bonjour\" , \"neuron_module_list\" : [ { \"generated_message\" : \"Bonjour monsieur\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"say-hello-fr\" } ], \"status\" : \"complete\" , \"user_order\" : \"bonjour\" } If the order haven't match any synapses it will try to run the default synapse if it exists in your settings: { \"matched_synapses\" : [ { \"matched_order\" : null , \"neuron_module_list\" : [ { \"generated_message\" : \"Je n'ai pas compris votre ordre\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"default-synapse\" } ], \"status\" : \"complete\" , \"user_order\" : \"not existing order\" } Or return an empty list of matched synapse { \"matched_synapses\": [], \"status\": null, \"user_order\": \"not existing order\" } The mute flag can be added to this call. Curl command: curl -i \\ --user admin:secret -H \"Content-Type: application/json\" \\ -X POST \\ -d '{\"order\":\"my order\", \"mute\":\"true\"}' \\ http://localhost:5000/synapses/start/order Run a synapse from an audio file Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) The audio file must use WAV or MP3 extension. Curl command: curl -i \\ --user admin:secret \\ -X POST \\ http://localhost:5000/synapses/start/audio \\ -F \"file=@/home/nico/Desktop/input.wav\" Output example if the order inside the audio have matched and so launched synapses: { \"matched_synapses\" : [ { \"matched_order\" : \"Bonjour\" , \"neuron_module_list\" : [ { \"generated_message\" : \"Bonjour monsieur\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"say-hello-fr\" } ], \"status\" : \"complete\" , \"user_order\" : \"bonjour\" } If the order haven't match any synapses it will try to run the default synapse if it exists in your settings: { \"matched_synapses\" : [ { \"matched_order\" : null , \"neuron_module_list\" : [ { \"generated_message\" : \"Je n'ai pas compris votre ordre\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"default-synapse\" } ], \"status\" : \"complete\" , \"user_order\" : \"not existing order\" } Or return an empty list of matched synapse { \"matched_synapses\" : [], \"status\" : null , \"user_order\" : \"not existing order\" } The mute flag can be added to this call with a form. Curl command: curl -i \\ --user admin:secret \\ -X POST \\ http://localhost:5000/synapses/start/audio \\ -F \"file=@path/to/file.wav\" \\ -F mute = \"true\" The neurotransmitter case In case of leveraging the neurotransmitter neuron , Kalliope expects back and forth answers. Fortunately, the API provides a way to continue interaction with Kalliope and still use neurotransmitter neurons while doing API calls. When you start a synapse via its name or an order (like shown above), the answer of the API call will tell you in the response that kalliope is waiting for a response via the \"status\" return. Status can either by complete (nothing else to do) or waiting_for_answer , in which case Kalliope is waiting for your response :). In this case, you can launch another order containing your response. Let's take as an example the simple neurotransmitter brain of the EN starter kit : First step is to fire the \"ask me a question order\": curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST \\ -d '{\"order\":\"ask me a question\"}' \\ http://localhost:5000/synapses/start/order The response should be as follow: { \"matched_synapses\" : [ { \"matched_order\" : \"ask me a question\" , \"neuron_module_list\" : [ { \"generated_message\" : \"do you like french fries?\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"synapse1\" } ], \"status\" : \"waiting_for_answer\" , \"user_order\" : \"ask me a question\" } The \"status\": \"waiting_for_answer\" indicates that it waits for a response, so let's send it: curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST \\ -d '{\"order\":\"not at all\"}' \\ http://localhost:5000/synapses/start/order { \"matched_synapses\" : [ { \"matched_order\" : \"ask me a question\" , \"neuron_module_list\" : [ { \"generated_message\" : \"do you like french fries?\" , \"neuron_name\" : \"Say\" }, { \"generated_message\" : null , \"neuron_name\" : \"Neurotransmitter\" } ], \"synapse_name\" : \"synapse1\" }, { \"matched_order\" : \"not at all\" , \"neuron_module_list\" : [ { \"generated_message\" : \"You don't like french fries.\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"synapse3\" } ], \"status\" : \"complete\" , \"user_order\" : null } And now the status is complete. This works also when you have nested neurotransmitter neurons, you just need to keep monitoring the status from the API answer.","title":"Synapses"},{"location":"api/synapses/#kalliope-api-synapses","text":"Method URL Action GET / Get kaliope version GET /synapses List synapses POST /synapses Add a synapse to the brain DELETE /synapses Delete a synapse by name GET /synapses/ Get synapse details by name POST /synapses/start/id/ Run a synapse by its name POST /synapses/start/order Run a synapse from a text order POST /synapses/start/audio Run a synapse from an audio sample","title":"Kalliope API: Synapses"},{"location":"api/synapses/#list-synapses","text":"Normal response codes: 200 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X GET \\ http://localhost:5000/synapses Output example: { \"synapses\" : [ [ { \"name\" : \"stop-kalliope\" , \"neurons\" : [ { \"say\" : { \"message\" : \"Good bye\" } }, \"kill_switch\" ], \"signals\" : [ { \"order\" : \"close\" } ] } ], [ { \"name\" : \"say-hello\" , \"neurons\" : [ { \"say\" : { \"message\" : [ \"Bonjour monsieur\" ] } } ], \"signals\" : [ { \"order\" : \"bonjour\" } ] } ] ] }","title":"List synapses"},{"location":"api/synapses/#show-synapse-details","text":"Normal response codes: 200 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X GET \\ http://localhost:5000/synapses/say-hello Output example: { \"synapses\" : { \"name\" : \"say-hello\" , \"neurons\" : [ { \"say\" : { \"message\" : [ \"Bonjour monsieur\" ] } } ], \"signals\" : [ { \"order\" : \"bonjour\" } ] } }","title":"Show synapse details"},{"location":"api/synapses/#add-a-synapse-to-the-brain","text":"Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d '{ \"name\": \"Say-hello\", \"signals\": [ { \"order\": \"I am Batman\" } ], \"neurons\": [ { \"say\": { \"message\": \"I know\" } } ] }' \\ http://127.0.0.1:5000/synapses Output example: { \"enabled\" : true , \"name\" : \"Say-hello\" , \"neurons\" : [ { \"name\" : \"say\" , \"parameters\" : { \"message\" : \"I know\" } } ], \"signals\" : [ { \"name\" : \"order\" , \"parameters\" : \"I am Batman\" } ] }","title":"Add a synapse to the brain"},{"location":"api/synapses/#delete-a-synapse-by-its-name","text":"Normal response codes: 204 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X DELETE \\ http://localhost:5000/synapses/start/id/say-hello","title":"Delete a synapse by its name"},{"location":"api/synapses/#run-a-synapse-by-its-name","text":"Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -X POST \\ http://127.0.0.1:5000/synapses/say-hello-en The mute flag can be added to this call. Curl command: curl -i \\ -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d '{\"mute\":\"true\"}' \\ http://127.0.0.1:5000/synapses/start/id/say-hello-fr Some neuron inside a synapse will wait for parameters that comes from the order. You can provide those parameters by adding a parameters list of data. Curl command: curl -i \\ -H \"Content-Type: application/json\" \\ --user admin:secret \\ -X POST \\ -d '{\"parameters\": {\"parameter1\": \"value1\" }}' \\ http://127.0.0.1:5000/synapses/start/id/synapse-id","title":"Run a synapse by its name"},{"location":"api/synapses/#run-a-synapse-from-an-order","text":"Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) Curl command: curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST -d '{\"order\":\"my order\"}' \\ http://localhost:5000/synapses/start/order If the order contains accent or quotes, use a file for testing with curl cat post.json { \"order\" : \"j'aime\" } Then curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST \\ --data @post.json http://localhost:5000/synapses/start/order Output example if the order have matched and so launched synapses: { \"matched_synapses\" : [ { \"matched_order\" : \"Bonjour\" , \"neuron_module_list\" : [ { \"generated_message\" : \"Bonjour monsieur\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"say-hello-fr\" } ], \"status\" : \"complete\" , \"user_order\" : \"bonjour\" } If the order haven't match any synapses it will try to run the default synapse if it exists in your settings: { \"matched_synapses\" : [ { \"matched_order\" : null , \"neuron_module_list\" : [ { \"generated_message\" : \"Je n'ai pas compris votre ordre\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"default-synapse\" } ], \"status\" : \"complete\" , \"user_order\" : \"not existing order\" } Or return an empty list of matched synapse { \"matched_synapses\": [], \"status\": null, \"user_order\": \"not existing order\" } The mute flag can be added to this call. Curl command: curl -i \\ --user admin:secret -H \"Content-Type: application/json\" \\ -X POST \\ -d '{\"order\":\"my order\", \"mute\":\"true\"}' \\ http://localhost:5000/synapses/start/order","title":"Run a synapse from an order"},{"location":"api/synapses/#run-a-synapse-from-an-audio-file","text":"Normal response codes: 201 Error response codes: unauthorized(401), itemNotFound(404) The audio file must use WAV or MP3 extension. Curl command: curl -i \\ --user admin:secret \\ -X POST \\ http://localhost:5000/synapses/start/audio \\ -F \"file=@/home/nico/Desktop/input.wav\" Output example if the order inside the audio have matched and so launched synapses: { \"matched_synapses\" : [ { \"matched_order\" : \"Bonjour\" , \"neuron_module_list\" : [ { \"generated_message\" : \"Bonjour monsieur\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"say-hello-fr\" } ], \"status\" : \"complete\" , \"user_order\" : \"bonjour\" } If the order haven't match any synapses it will try to run the default synapse if it exists in your settings: { \"matched_synapses\" : [ { \"matched_order\" : null , \"neuron_module_list\" : [ { \"generated_message\" : \"Je n'ai pas compris votre ordre\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"default-synapse\" } ], \"status\" : \"complete\" , \"user_order\" : \"not existing order\" } Or return an empty list of matched synapse { \"matched_synapses\" : [], \"status\" : null , \"user_order\" : \"not existing order\" } The mute flag can be added to this call with a form. Curl command: curl -i \\ --user admin:secret \\ -X POST \\ http://localhost:5000/synapses/start/audio \\ -F \"file=@path/to/file.wav\" \\ -F mute = \"true\"","title":"Run a synapse from an audio file"},{"location":"api/synapses/#the-neurotransmitter-case","text":"In case of leveraging the neurotransmitter neuron , Kalliope expects back and forth answers. Fortunately, the API provides a way to continue interaction with Kalliope and still use neurotransmitter neurons while doing API calls. When you start a synapse via its name or an order (like shown above), the answer of the API call will tell you in the response that kalliope is waiting for a response via the \"status\" return. Status can either by complete (nothing else to do) or waiting_for_answer , in which case Kalliope is waiting for your response :). In this case, you can launch another order containing your response. Let's take as an example the simple neurotransmitter brain of the EN starter kit : First step is to fire the \"ask me a question order\": curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST \\ -d '{\"order\":\"ask me a question\"}' \\ http://localhost:5000/synapses/start/order The response should be as follow: { \"matched_synapses\" : [ { \"matched_order\" : \"ask me a question\" , \"neuron_module_list\" : [ { \"generated_message\" : \"do you like french fries?\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"synapse1\" } ], \"status\" : \"waiting_for_answer\" , \"user_order\" : \"ask me a question\" } The \"status\": \"waiting_for_answer\" indicates that it waits for a response, so let's send it: curl -i \\ --user admin:secret \\ -H \"Content-Type: application/json\" \\ -X POST \\ -d '{\"order\":\"not at all\"}' \\ http://localhost:5000/synapses/start/order { \"matched_synapses\" : [ { \"matched_order\" : \"ask me a question\" , \"neuron_module_list\" : [ { \"generated_message\" : \"do you like french fries?\" , \"neuron_name\" : \"Say\" }, { \"generated_message\" : null , \"neuron_name\" : \"Neurotransmitter\" } ], \"synapse_name\" : \"synapse1\" }, { \"matched_order\" : \"not at all\" , \"neuron_module_list\" : [ { \"generated_message\" : \"You don't like french fries.\" , \"neuron_name\" : \"Say\" } ], \"synapse_name\" : \"synapse3\" } ], \"status\" : \"complete\" , \"user_order\" : null } And now the status is complete. This works also when you have nested neurotransmitter neurons, you just need to keep monitoring the status from the API answer.","title":"The neurotransmitter case"},{"location":"brain/brain/","text":"brain.yml The brain is a main component of Kalliope. It's a module that gives a configuration of your own personal assistant and, so, determines it's behavior and fonctionnalities. Kalliope will look for the brain in the order bellow: From you current folder, E.g /home/pi/my_kalliope/brain.yml From /etc/kalliope/brain.yml From the default brain.yml located in the root of the project tree. Brain is composed by synapses : a synapse is the link between input( signals ) and output actions( neurons ). Signals Syntax A signal is an input event triggered by a synapse. When a signal from the list is caught, Kalliope runs attached neurons of the synapse. The syntax is the following signals : - signal_name : parameter Or signals : - signal_name : parameter_key1 : parameter_value1 parameter_key2 : parameter_value2 Example: signals : - order : \"hello kalliope\" signals : - event : hour : \"8\" minute : \"30\" You can also set an empty list as signals. This means that the synapse can only be started from the CLI, the API, a hook or from another synapse. signals : [] Output parameters Some signals will send a list of parameters to all neurons when triggered. Neurons are then free to use them or not. For example, the signal mqtt_subscriber(signals/mqtt_subscriber.md) send a variable called \"mqtt_subscriber_message\" when triggered. In the example bellow, the neuron \"say\" use this variable to make Kalliope speak out loud a status received from the MQTT broker. E.g - name : \"mqtt\" signals : - mqtt_subscriber : # this signal send a \"mqtt_subscriber_message\" when triggered broker_ip : \"127.0.0.1\" topic : \"topic1\" neurons : - say : message : - \"The light is now {{ mqtt_subscriber_message }}\" Available signals Here is a list of core signal that are installed natively with Kalliope Name Description event Launch synapses periodically at fixed times, dates, or intervals. mqtt_subscriber Launch synapse from when receive a message from a MQTT broker order Launch synapses from captured vocal order from the microphone geolocation Define synapses to be triggered by clients handling geolocation See the full list of core and community signals on the Kalliope's website . Neurons A neuron is a plugin that performs a specific action. You use it to create a synapse. You can add as many neurons as you want to a synapse. The neurons are executed one by one when one of the input signal is triggered. Syntax Neurons are declared in the neurons section of a synapse in your brain file. The neurons section is a list (because it starts with a \"-\") which contains neuron modules names neurons : - neuron_1_name - neuron_2_name - another_neuron Some neurons need parameters that can be passed as arguments following the syntax bellow: neurons : - neuron_name : parameter1 : \"value1\" parameter2 : \"value2\" Eg: note: parameters are indented with two spaces bellow the neuron's name following the YAML syntax. note: Kalliope will try to load the neuron from your resources directory, then from core neuron packages. Input values Neurons require some parameters from the synapse declaration to work. Those parameters, also called arguments, can be passed to the neuron from: the neuron declaration global variables the captured order output parameter from a signal kalliope memory From the neuron declaration: neurons : - neuron_name : parameter1 : \"value1\" parameter2 : \"value2\" From global variables: (cf: settings ) - name : \"run-simple-sleep\" signals : - order : \"Wait for me \" neurons : - sleep : seconds : {{ variable }} From the captured order: - name : \"say-hello\" signals : - order : \"say hello to {{ name }}\" neurons : - say : message : - \"Hello {{ name }}\" Here, the spoken value captured by the TTS engine will be passed as an argument to the neuron in every parameters that want use it. Example, with the synapse declaration above, if you say \"say hello to Bob\". The parameter message is instantiated and all {{ name }} are replaced by \"bob\". From parameters sent by a signal(E.g, mqtt subscriber) - name : \"mqtt\" signals : - mqtt_subscriber : # this signal send a \"mqtt_subscriber_message\" when triggered broker_ip : \"127.0.0.1\" topic : \"topic1\" neurons : - say : message : - \"The light is now {{ mqtt_subscriber_message }}\" Note: If a parameter of a neuron is waiting for a variable from the order and this variable haven't been found in the spoken order, then the neuron is not launched. Output values Some neurons will return variables into a dictionary of value. Those values can be used to make your own Kalliope answer through a template. The objective of using a template is to let the user choosing what he wants to make Kalliope saying in its own language. A template is a text file that contains variables , which get replaced with values when the template is evaluated by the template engine , and tags , which control the logic of the template. The template engine used in Kalliope is Jinja2 . For example, if we look at the documentation of the neuron systemedate , we can see that the neuron will return a dictionary of value like minute , hours and all other values about the current time on the system where Kalliope is installed. A simple, that only use variables , template would be It is {{ hours }} and {{ minutes }} minutes. Placed in a complete synapse, it looks like the following - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : say_template : - \"It is {{ hours }} hours and {{ minutes }} minutes\" Here, we use variables from the neuron into our template file. Both variables will be interpreted by the template engine. So, what the user will hear is something like It is 9 hours and 21 minutes . We can add some logic to a template with tags. Here a simple example with a test tag , that will make Kalliope change the pronounced sentence depending on the current time. {% if hours > 8 %} It is late, isn't it? {% else %} We still have time {% endif %} As this is multi-lines, we can put the content in a file and use a file_template instead of a say_template for more clarity. - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : file_template : /path/to/file/template.j2 kalliope_memory Kalliope can store in a short term memory a variable from an order or generated from a neuron: - output parameters from a neuron - variable parameters captured from an order. Stored parameters can then be used in other synapses during a future call. Please not that this memory is not preserved after a restart of Kalliope. Store parameters generated by a neuron Syntax with output parameters from a neuron - name : \"synapse-name\" signals : - order : \"my order\" neurons : - neuron_name : kalliope_memory : key_name_in_memory : \"{{ output_variable_from_neuron }}\" other_key_name_in_memory : \"{{ other_output_variable_from_neuron }}\" Syntax to reuse memorized parameters in another synapse - name : \"synapse-name\" signals : - order : \"an order\" neurons : - neuron_name : parameter1 : \"{{ kalliope_memory['key_name_in_memory'] }}\" parameter2 : \"{{ kalliope_memory['other_key_name_in_memory'] }}\" Note: The key name need to be placed into simple quotes Example with a core neuron like systemdate - name : \"synapse-name\" signals : - order : \"my order\" neurons : - systemdate : say_template : - \"It' {{ hours }} hours and {{ minutes }} minutes\" kalliope_memory : hours_when_asked : \"{{ hours }}\" minutes_when_asked : \"{{ minutes }}\" Here, the systemdate neuron generates variables that haven been passed to the template like described in the previous section and to the memory of Kalliope. Those parameters can now be used in a next call - name : \"synapse-name-2\" signals : - order : \"a what time I've asked the time?\" neurons : - say : message : - \"at {{ kalliope_memory['hours_when_asked']}} hours and {{ kalliope_memory['minutes_when_asked']}} minutes\" As it's based on a template, the value can be modified by adding a string kalliope_memory : my_saved_key : \"{{ neuron_parameter_name }} with a word\" Multiple parameters can be used and concatenated in the same memorized key kalliope_memory : my_saved_key : \"{{ neuron_parameter_name1 }} and {{ neuron_parameter_name2 }}\" Store parameters captured from orders Syntax - name : \"synapse-name\" signals : - order : \"my order with {{ variable }}\" neurons : - neuron_name : kalliope_memory : key_name_in_memory : \"{{ variable }}\" The syntax to reuse memorized parameters in another synapse is the same as the one used with neuron parameters - name : \"synapse-name\" signals : - order : \"an order\" neurons : - neuron_name : parameter1 : {{ kalliope_memory [ 'key_name_in_memory' ]}} Example - name : \"synapse-id\" signals : - order : \"say hello to {{ name }}\" neurons : - say : message : - \"Hello {{ name }}\" kalliope_memory : friend : \"{{ name }}\" Here, the variable \"name\" has been used directly into the template and also saved in memory behind the key \"friend\". The value can now be used in a next call like the following - name : \"synapse-id\" signals : - order : \"what is the name of my friend?\" neurons : - say : message : - \"It's {{ kalliope_memory['friend'] }} Here is another example brain whit use the neurotimer neuron. In this scenario, you want to remember to do something You: remind me to call mom in 15 minutes Kalliope: I'll notify you in 15 minutes 15 minutes later.. Kalliope: You asked me to remind you to call mom 15 minutes ago - name : \"remember-synapse\" signals : - order : \"remind me to {{ remember }} in {{ time }} minutes\" neurons : - neurotimer : seconds : \"{{ time }}\" synapse : \"remember-todo\" kalliope_memory : remember : \"{{ remember }}\" seconds : \"{{ time }}\" - say : message : - \"I'll remind you in {{ time }} minutes\" - name : \"remember-todo\" signals : {} neurons : - say : message : - \"You asked me to remind you to {{ kalliope_memory['remember'] }} {{ kalliope_memory['time'] }} minutes ago\" Get the last order generated TTS message Kalliope will save in memory automatically: - the last generated TTS message . - the last caught order To get the last generated message, use the key {{ kalliope_memory['kalliope_last_tts_message'] }} in your synapse. To get the last order, use the key {{ kalliope_memory['kalliope_last_order'] }} in your synapse. Keep in mind that the kalliope_last_tts_message variable is overridden every time Kalliope says something. So you need to catch messages you want to process in the right hook like on_start_speaking or on_stop_speaking . An example of usage is to send each message to an API each time Kalliope start speaking. You need at first to create a hook in your settings.yaml like the following hooks : on_start_speaking : \"mm-say\" Then create a synapse in your brain that is linked to the hook to send each message. As a concrete example, here the magic mirror neuron is used to send each spelt out loud message to the Magic Mirror API in order to show them on the screen. - name : \"mm-say\" signals : [] neurons : - magic_mirror : mm_url : \"http://127.0.0.1:8080/kalliope\" notification : \"KALLIOPE\" payload : \"{{ kalliope_memory['kalliope_last_tts_message'] }}\" Note kalliope_last_tts_message is overridden each time Kalliope says something. For example, a common practice is to have a synapse placed in the hook on_triggered in order to know when the hotword has been triggered. So, if this synapse is configured like the following - name : \"on-triggered-synapse\" signals : [] neurons : - say : message : \"what can i do for you?\" And you try the get the last generated message with a synapse like the following - name : \"last-message\" signals : - order : \"what was the last message?\" neurons : - say : message : \"it was {{ kalliope_memory['kalliope_last_tts_message'] }}\" Then the answer will always be \"it was what can i do for you?\" because the variable kalliope_last_tts_message has been overridden during the execution of the on-triggered-synapse . Split the brain If you want a better visibly, or simply sort your actions in different files, you can split the main brain file into multiple ones. To do that, use the import statement in the entry brain.yml file with the following syntax: - includes : - path/to/sub_brain.yml - path/to/another_sub_brain.yml E.g: - includes : - brains/rolling_shutter_commands.yml - brains/find_my_phone.yml Note: You can only use the include statement in the main brain file. Note: the includes statement must start with a -","title":"brain.yml"},{"location":"brain/brain/#brainyml","text":"The brain is a main component of Kalliope. It's a module that gives a configuration of your own personal assistant and, so, determines it's behavior and fonctionnalities. Kalliope will look for the brain in the order bellow: From you current folder, E.g /home/pi/my_kalliope/brain.yml From /etc/kalliope/brain.yml From the default brain.yml located in the root of the project tree. Brain is composed by synapses : a synapse is the link between input( signals ) and output actions( neurons ).","title":"brain.yml"},{"location":"brain/brain/#signals","text":"","title":"Signals"},{"location":"brain/brain/#syntax","text":"A signal is an input event triggered by a synapse. When a signal from the list is caught, Kalliope runs attached neurons of the synapse. The syntax is the following signals : - signal_name : parameter Or signals : - signal_name : parameter_key1 : parameter_value1 parameter_key2 : parameter_value2 Example: signals : - order : \"hello kalliope\" signals : - event : hour : \"8\" minute : \"30\" You can also set an empty list as signals. This means that the synapse can only be started from the CLI, the API, a hook or from another synapse. signals : []","title":"Syntax"},{"location":"brain/brain/#output-parameters","text":"Some signals will send a list of parameters to all neurons when triggered. Neurons are then free to use them or not. For example, the signal mqtt_subscriber(signals/mqtt_subscriber.md) send a variable called \"mqtt_subscriber_message\" when triggered. In the example bellow, the neuron \"say\" use this variable to make Kalliope speak out loud a status received from the MQTT broker. E.g - name : \"mqtt\" signals : - mqtt_subscriber : # this signal send a \"mqtt_subscriber_message\" when triggered broker_ip : \"127.0.0.1\" topic : \"topic1\" neurons : - say : message : - \"The light is now {{ mqtt_subscriber_message }}\"","title":"Output parameters"},{"location":"brain/brain/#available-signals","text":"Here is a list of core signal that are installed natively with Kalliope Name Description event Launch synapses periodically at fixed times, dates, or intervals. mqtt_subscriber Launch synapse from when receive a message from a MQTT broker order Launch synapses from captured vocal order from the microphone geolocation Define synapses to be triggered by clients handling geolocation See the full list of core and community signals on the Kalliope's website .","title":"Available signals"},{"location":"brain/brain/#neurons","text":"A neuron is a plugin that performs a specific action. You use it to create a synapse. You can add as many neurons as you want to a synapse. The neurons are executed one by one when one of the input signal is triggered.","title":"Neurons"},{"location":"brain/brain/#syntax_1","text":"Neurons are declared in the neurons section of a synapse in your brain file. The neurons section is a list (because it starts with a \"-\") which contains neuron modules names neurons : - neuron_1_name - neuron_2_name - another_neuron Some neurons need parameters that can be passed as arguments following the syntax bellow: neurons : - neuron_name : parameter1 : \"value1\" parameter2 : \"value2\" Eg: note: parameters are indented with two spaces bellow the neuron's name following the YAML syntax. note: Kalliope will try to load the neuron from your resources directory, then from core neuron packages.","title":"Syntax"},{"location":"brain/brain/#input-values","text":"Neurons require some parameters from the synapse declaration to work. Those parameters, also called arguments, can be passed to the neuron from: the neuron declaration global variables the captured order output parameter from a signal kalliope memory From the neuron declaration: neurons : - neuron_name : parameter1 : \"value1\" parameter2 : \"value2\" From global variables: (cf: settings ) - name : \"run-simple-sleep\" signals : - order : \"Wait for me \" neurons : - sleep : seconds : {{ variable }} From the captured order: - name : \"say-hello\" signals : - order : \"say hello to {{ name }}\" neurons : - say : message : - \"Hello {{ name }}\" Here, the spoken value captured by the TTS engine will be passed as an argument to the neuron in every parameters that want use it. Example, with the synapse declaration above, if you say \"say hello to Bob\". The parameter message is instantiated and all {{ name }} are replaced by \"bob\". From parameters sent by a signal(E.g, mqtt subscriber) - name : \"mqtt\" signals : - mqtt_subscriber : # this signal send a \"mqtt_subscriber_message\" when triggered broker_ip : \"127.0.0.1\" topic : \"topic1\" neurons : - say : message : - \"The light is now {{ mqtt_subscriber_message }}\" Note: If a parameter of a neuron is waiting for a variable from the order and this variable haven't been found in the spoken order, then the neuron is not launched.","title":"Input values"},{"location":"brain/brain/#output-values","text":"Some neurons will return variables into a dictionary of value. Those values can be used to make your own Kalliope answer through a template. The objective of using a template is to let the user choosing what he wants to make Kalliope saying in its own language. A template is a text file that contains variables , which get replaced with values when the template is evaluated by the template engine , and tags , which control the logic of the template. The template engine used in Kalliope is Jinja2 . For example, if we look at the documentation of the neuron systemedate , we can see that the neuron will return a dictionary of value like minute , hours and all other values about the current time on the system where Kalliope is installed. A simple, that only use variables , template would be It is {{ hours }} and {{ minutes }} minutes. Placed in a complete synapse, it looks like the following - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : say_template : - \"It is {{ hours }} hours and {{ minutes }} minutes\" Here, we use variables from the neuron into our template file. Both variables will be interpreted by the template engine. So, what the user will hear is something like It is 9 hours and 21 minutes . We can add some logic to a template with tags. Here a simple example with a test tag , that will make Kalliope change the pronounced sentence depending on the current time. {% if hours > 8 %} It is late, isn't it? {% else %} We still have time {% endif %} As this is multi-lines, we can put the content in a file and use a file_template instead of a say_template for more clarity. - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : file_template : /path/to/file/template.j2","title":"Output values"},{"location":"brain/brain/#kalliope_memory","text":"Kalliope can store in a short term memory a variable from an order or generated from a neuron: - output parameters from a neuron - variable parameters captured from an order. Stored parameters can then be used in other synapses during a future call. Please not that this memory is not preserved after a restart of Kalliope.","title":"kalliope_memory"},{"location":"brain/brain/#store-parameters-generated-by-a-neuron","text":"Syntax with output parameters from a neuron - name : \"synapse-name\" signals : - order : \"my order\" neurons : - neuron_name : kalliope_memory : key_name_in_memory : \"{{ output_variable_from_neuron }}\" other_key_name_in_memory : \"{{ other_output_variable_from_neuron }}\" Syntax to reuse memorized parameters in another synapse - name : \"synapse-name\" signals : - order : \"an order\" neurons : - neuron_name : parameter1 : \"{{ kalliope_memory['key_name_in_memory'] }}\" parameter2 : \"{{ kalliope_memory['other_key_name_in_memory'] }}\" Note: The key name need to be placed into simple quotes Example with a core neuron like systemdate - name : \"synapse-name\" signals : - order : \"my order\" neurons : - systemdate : say_template : - \"It' {{ hours }} hours and {{ minutes }} minutes\" kalliope_memory : hours_when_asked : \"{{ hours }}\" minutes_when_asked : \"{{ minutes }}\" Here, the systemdate neuron generates variables that haven been passed to the template like described in the previous section and to the memory of Kalliope. Those parameters can now be used in a next call - name : \"synapse-name-2\" signals : - order : \"a what time I've asked the time?\" neurons : - say : message : - \"at {{ kalliope_memory['hours_when_asked']}} hours and {{ kalliope_memory['minutes_when_asked']}} minutes\" As it's based on a template, the value can be modified by adding a string kalliope_memory : my_saved_key : \"{{ neuron_parameter_name }} with a word\" Multiple parameters can be used and concatenated in the same memorized key kalliope_memory : my_saved_key : \"{{ neuron_parameter_name1 }} and {{ neuron_parameter_name2 }}\"","title":"Store parameters generated by a neuron"},{"location":"brain/brain/#store-parameters-captured-from-orders","text":"Syntax - name : \"synapse-name\" signals : - order : \"my order with {{ variable }}\" neurons : - neuron_name : kalliope_memory : key_name_in_memory : \"{{ variable }}\" The syntax to reuse memorized parameters in another synapse is the same as the one used with neuron parameters - name : \"synapse-name\" signals : - order : \"an order\" neurons : - neuron_name : parameter1 : {{ kalliope_memory [ 'key_name_in_memory' ]}} Example - name : \"synapse-id\" signals : - order : \"say hello to {{ name }}\" neurons : - say : message : - \"Hello {{ name }}\" kalliope_memory : friend : \"{{ name }}\" Here, the variable \"name\" has been used directly into the template and also saved in memory behind the key \"friend\". The value can now be used in a next call like the following - name : \"synapse-id\" signals : - order : \"what is the name of my friend?\" neurons : - say : message : - \"It's {{ kalliope_memory['friend'] }} Here is another example brain whit use the neurotimer neuron. In this scenario, you want to remember to do something You: remind me to call mom in 15 minutes Kalliope: I'll notify you in 15 minutes 15 minutes later.. Kalliope: You asked me to remind you to call mom 15 minutes ago - name : \"remember-synapse\" signals : - order : \"remind me to {{ remember }} in {{ time }} minutes\" neurons : - neurotimer : seconds : \"{{ time }}\" synapse : \"remember-todo\" kalliope_memory : remember : \"{{ remember }}\" seconds : \"{{ time }}\" - say : message : - \"I'll remind you in {{ time }} minutes\" - name : \"remember-todo\" signals : {} neurons : - say : message : - \"You asked me to remind you to {{ kalliope_memory['remember'] }} {{ kalliope_memory['time'] }} minutes ago\"","title":"Store parameters captured from orders"},{"location":"brain/brain/#get-the-last-order-generated-tts-message","text":"Kalliope will save in memory automatically: - the last generated TTS message . - the last caught order To get the last generated message, use the key {{ kalliope_memory['kalliope_last_tts_message'] }} in your synapse. To get the last order, use the key {{ kalliope_memory['kalliope_last_order'] }} in your synapse. Keep in mind that the kalliope_last_tts_message variable is overridden every time Kalliope says something. So you need to catch messages you want to process in the right hook like on_start_speaking or on_stop_speaking . An example of usage is to send each message to an API each time Kalliope start speaking. You need at first to create a hook in your settings.yaml like the following hooks : on_start_speaking : \"mm-say\" Then create a synapse in your brain that is linked to the hook to send each message. As a concrete example, here the magic mirror neuron is used to send each spelt out loud message to the Magic Mirror API in order to show them on the screen. - name : \"mm-say\" signals : [] neurons : - magic_mirror : mm_url : \"http://127.0.0.1:8080/kalliope\" notification : \"KALLIOPE\" payload : \"{{ kalliope_memory['kalliope_last_tts_message'] }}\" Note kalliope_last_tts_message is overridden each time Kalliope says something. For example, a common practice is to have a synapse placed in the hook on_triggered in order to know when the hotword has been triggered. So, if this synapse is configured like the following - name : \"on-triggered-synapse\" signals : [] neurons : - say : message : \"what can i do for you?\" And you try the get the last generated message with a synapse like the following - name : \"last-message\" signals : - order : \"what was the last message?\" neurons : - say : message : \"it was {{ kalliope_memory['kalliope_last_tts_message'] }}\" Then the answer will always be \"it was what can i do for you?\" because the variable kalliope_last_tts_message has been overridden during the execution of the on-triggered-synapse .","title":"Get the last order generated TTS message"},{"location":"brain/brain/#split-the-brain","text":"If you want a better visibly, or simply sort your actions in different files, you can split the main brain file into multiple ones. To do that, use the import statement in the entry brain.yml file with the following syntax: - includes : - path/to/sub_brain.yml - path/to/another_sub_brain.yml E.g: - includes : - brains/rolling_shutter_commands.yml - brains/find_my_phone.yml Note: You can only use the include statement in the main brain file. Note: the includes statement must start with a -","title":"Split the brain"},{"location":"brain/community_modules/","text":"Core neurons and signals are already packaged with the installation of kalliope an can be used out of the box. Community modules need to be installed manually. Note: To install a community module, you must declare your resource_directory in your settings . Note: After installing a community module, you need tu update your brain to use it Install a community module Install via Kalliope CLI kalliope install --git-url <git_url> E.g: kalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git You may be prompted to type your sudo password during the process. You can also install a module manually. Fist, clone the repo in the right resource folder. cd /path/to/resource_folder git clone <plugin_url> Then install it manually via Ansible (Ansible has been installed with kalliope) cd <cloned_repo> ansible-playbook install.yml -K Example cd /home/me/my_kalliope_config/resources/neurons git clone https://github.com/kalliope-project/kalliope_neuron_hue.git cd hue ansible-playbook install.yml -K Uninstall a community module CLI syntax kalliope uninstall --neuron-name <neuron_name> kalliope uninstall --tts-name <tts_name> kalliope uninstall --trigger-name <trigger_name> kalliope uninstall --ignal-name <signal_name> E.g: kalliope uninstall --neuron-name hue List of community modules Community neurons Community signals","title":"Community modules"},{"location":"brain/community_modules/#install-a-community-module","text":"Install via Kalliope CLI kalliope install --git-url <git_url> E.g: kalliope install --git-url https://github.com/kalliope-project/kalliope_neuron_wikipedia.git You may be prompted to type your sudo password during the process. You can also install a module manually. Fist, clone the repo in the right resource folder. cd /path/to/resource_folder git clone <plugin_url> Then install it manually via Ansible (Ansible has been installed with kalliope) cd <cloned_repo> ansible-playbook install.yml -K Example cd /home/me/my_kalliope_config/resources/neurons git clone https://github.com/kalliope-project/kalliope_neuron_hue.git cd hue ansible-playbook install.yml -K","title":"Install a community module"},{"location":"brain/community_modules/#uninstall-a-community-module","text":"CLI syntax kalliope uninstall --neuron-name <neuron_name> kalliope uninstall --tts-name <tts_name> kalliope uninstall --trigger-name <trigger_name> kalliope uninstall --ignal-name <signal_name> E.g: kalliope uninstall --neuron-name hue","title":"Uninstall a community module"},{"location":"brain/community_modules/#list-of-community-modules","text":"Community neurons Community signals","title":"List of community modules"},{"location":"brain/neurons/ansible_playbook/","text":"Run an Ansible playbook. Ansible is a free-software platform for configuring and managing computers which combines multi-node software deployment, ad hoc task execution, and configuration management. Playbooks are Ansible\u2019s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process. This neuron can be used to perform complex operation with all modules available from Ansible . Input parameters parameter required default choices comment task_file YES path to the Playbook file that contains tasks sudo NO FALSE True False sudo_user NO The target user with admin privileges. In most of case \"root\" sudo_password NO The password of the sudo_user Synapses example Playbook without admin privileges Call the playbook named playbook.yml - name : \"Ansible-test\" signals : - order : \"playbook\" neurons : - ansible_playbook : task_file : \"playbook.yml\" - say : message : \"The task is done\" Content of the playbook. This playbook will use the URI module to interact with a webservice on a remote server. - name : Playbook hosts : localhost gather_facts : no connection : local tasks : - name : \"Call api\" uri : url : \"http://192.168.0.17:8000/app\" HEADER_Content-Type : \"application/json\" method : POST user : admin password : secret force_basic_auth : yes status_code : 201 body_format : json body : > {\"app_name\": \"music\", \"state\": \"start\"} Playbook with admin privileges In some cases, a playbook requires sudo right to perform admin operations like installing a package. In this case, you must give to the neuron the login and password of the user which has admin privileges. - name : \"Ansible-root\" signals : - order : \"playbook\" neurons : - ansible_playbook : task_file : \"playbook-root.yml\" sudo : true sudo_user : \"root\" sudo_password : \"secret\" And the playbook would be. Notice that we use become: True - hosts : localhost gather_facts : no connection : local become : True tasks : - name : \"Install a useful train package\" apt : name : sl state : present Note Ansible contains a lot of modules that can be useful for Kalliope Notification : can be used to send a message to Pushbullet, IRC channel, Rocket Chat and a lot of other notification services Files : can be used to perform a backup or synchronize two file path Windows : Can be used to control a Windows Desktop Shell neuron or script neuron can perform same actions. Ansible is just a way to simplify some execution or enjoy some already made plugin .","title":"ansible_playbook"},{"location":"brain/neurons/ansible_playbook/#input-parameters","text":"parameter required default choices comment task_file YES path to the Playbook file that contains tasks sudo NO FALSE True False sudo_user NO The target user with admin privileges. In most of case \"root\" sudo_password NO The password of the sudo_user","title":"Input parameters"},{"location":"brain/neurons/ansible_playbook/#synapses-example","text":"","title":"Synapses example"},{"location":"brain/neurons/ansible_playbook/#playbook-without-admin-privileges","text":"Call the playbook named playbook.yml - name : \"Ansible-test\" signals : - order : \"playbook\" neurons : - ansible_playbook : task_file : \"playbook.yml\" - say : message : \"The task is done\" Content of the playbook. This playbook will use the URI module to interact with a webservice on a remote server. - name : Playbook hosts : localhost gather_facts : no connection : local tasks : - name : \"Call api\" uri : url : \"http://192.168.0.17:8000/app\" HEADER_Content-Type : \"application/json\" method : POST user : admin password : secret force_basic_auth : yes status_code : 201 body_format : json body : > {\"app_name\": \"music\", \"state\": \"start\"}","title":"Playbook without admin privileges"},{"location":"brain/neurons/ansible_playbook/#playbook-with-admin-privileges","text":"In some cases, a playbook requires sudo right to perform admin operations like installing a package. In this case, you must give to the neuron the login and password of the user which has admin privileges. - name : \"Ansible-root\" signals : - order : \"playbook\" neurons : - ansible_playbook : task_file : \"playbook-root.yml\" sudo : true sudo_user : \"root\" sudo_password : \"secret\" And the playbook would be. Notice that we use become: True - hosts : localhost gather_facts : no connection : local become : True tasks : - name : \"Install a useful train package\" apt : name : sl state : present","title":"Playbook with admin privileges"},{"location":"brain/neurons/ansible_playbook/#note","text":"Ansible contains a lot of modules that can be useful for Kalliope Notification : can be used to send a message to Pushbullet, IRC channel, Rocket Chat and a lot of other notification services Files : can be used to perform a backup or synchronize two file path Windows : Can be used to control a Windows Desktop Shell neuron or script neuron can perform same actions. Ansible is just a way to simplify some execution or enjoy some already made plugin .","title":"Note"},{"location":"brain/neurons/brain/","text":"Update your brain from a neuron Current actions available: - enable / disable a synapse from the brain Input parameters parameter required type default choices comment synapse_name YES string The name of the synapse to update enabled YES boolean True, False if True, the synapse is enabled. Returned values Name Description Type sample synapse_name The updated synapse name string to-deactivate status New status of the synapse boolean enabled, disabled, unknown Synapses example - name : \"to-deactivate\" signals : - order : \"who are you\" neurons : - say : message : \"I'm Kalliope\" - name : \"deactivate\" signals : - order : \"deactivate a synapse\" neurons : - brain : synapse_name : \"to-deactivate\" enabled : False - name : \"activate\" signals : - order : \"active back the synapse\" neurons : - brain : synapse_name : \"to-deactivate\" enabled : True Notes Note: Changes made to the brain from this neuron are not persistent. The brain will be loaded again following the yaml file at the next start of Kalliope.","title":"brain"},{"location":"brain/neurons/brain/#input-parameters","text":"parameter required type default choices comment synapse_name YES string The name of the synapse to update enabled YES boolean True, False if True, the synapse is enabled.","title":"Input parameters"},{"location":"brain/neurons/brain/#returned-values","text":"Name Description Type sample synapse_name The updated synapse name string to-deactivate status New status of the synapse boolean enabled, disabled, unknown","title":"Returned values"},{"location":"brain/neurons/brain/#synapses-example","text":"- name : \"to-deactivate\" signals : - order : \"who are you\" neurons : - say : message : \"I'm Kalliope\" - name : \"deactivate\" signals : - order : \"deactivate a synapse\" neurons : - brain : synapse_name : \"to-deactivate\" enabled : False - name : \"activate\" signals : - order : \"active back the synapse\" neurons : - brain : synapse_name : \"to-deactivate\" enabled : True","title":"Synapses example"},{"location":"brain/neurons/brain/#notes","text":"Note: Changes made to the brain from this neuron are not persistent. The brain will be loaded again following the yaml file at the next start of Kalliope.","title":"Notes"},{"location":"brain/neurons/debug/","text":"Print a message in the console. This neuron can be used to check your captured variable from an order or check the content of variable placed in Kalliope memory . Input parameters parameter required default choices comment message YES Message to print in the console output Returned values No returned values Synapses example Simple example : - name : \"debug\" signals : - order : \"print a debug\" neurons : - debug : message : \"this is a debug line\" Output example: [Debug neuron, 2017-12-17 17:30:53] this is a debug line Show the content of captured variables from the spoken order - name : \"debug\" signals : - order : \"tell me what I say {{ here }}\" neurons : - debug : message : \"{{ here }}\" Show the content of a variable placed in Kalliope memory - name : \"debug\" signals : - order : \"what time is it?\" neurons : - systemdate : say_template : - \"It' {{ hours }} hours and {{ minutes }} minutes\" kalliope_memory : hours_when_asked : \"{{ hours }}\" minutes_when_asked : \"{{ minutes }}\" - debug : message : \"hours: {{ kalliope_memory['hours_when_asked']}}, minutes: {{ kalliope_memory['minutes_when_asked']}}\"","title":"debug"},{"location":"brain/neurons/debug/#input-parameters","text":"parameter required default choices comment message YES Message to print in the console output","title":"Input parameters"},{"location":"brain/neurons/debug/#returned-values","text":"No returned values","title":"Returned values"},{"location":"brain/neurons/debug/#synapses-example","text":"Simple example : - name : \"debug\" signals : - order : \"print a debug\" neurons : - debug : message : \"this is a debug line\" Output example: [Debug neuron, 2017-12-17 17:30:53] this is a debug line Show the content of captured variables from the spoken order - name : \"debug\" signals : - order : \"tell me what I say {{ here }}\" neurons : - debug : message : \"{{ here }}\" Show the content of a variable placed in Kalliope memory - name : \"debug\" signals : - order : \"what time is it?\" neurons : - systemdate : say_template : - \"It' {{ hours }} hours and {{ minutes }} minutes\" kalliope_memory : hours_when_asked : \"{{ hours }}\" minutes_when_asked : \"{{ minutes }}\" - debug : message : \"hours: {{ kalliope_memory['hours_when_asked']}}, minutes: {{ kalliope_memory['minutes_when_asked']}}\"","title":"Synapses example"},{"location":"brain/neurons/kalliope_version/","text":"Check if a new version of Kalliope is available. Input parameters None Returned values Name Description Type sample current_version The current version of Kalliope you are using string 0.5.1 last_master_version The last available version number string 0.5.3 new_version_available True if a new version is available (current_version < last_master_version) boolean True Synapses example Check if a new version of Kalliope is available - name : \"new-version\" signals : - order : \"is a new version available\" neurons : - kalliope_version : say_template : \"{% if new_version_available %} yes {% else %} no {% endif %}\" Give the current version number and the last available version number - name : \"version\" signals : - order : \"give me my kalliope version\" neurons : - kalliope_version : say_template : \"You are using version {{ current_version }}. The last available version is {{ last_master_version }}\"","title":"kalliope_version"},{"location":"brain/neurons/kalliope_version/#input-parameters","text":"None","title":"Input parameters"},{"location":"brain/neurons/kalliope_version/#returned-values","text":"Name Description Type sample current_version The current version of Kalliope you are using string 0.5.1 last_master_version The last available version number string 0.5.3 new_version_available True if a new version is available (current_version < last_master_version) boolean True","title":"Returned values"},{"location":"brain/neurons/kalliope_version/#synapses-example","text":"","title":"Synapses example"},{"location":"brain/neurons/kalliope_version/#check-if-a-new-version-of-kalliope-is-available","text":"- name : \"new-version\" signals : - order : \"is a new version available\" neurons : - kalliope_version : say_template : \"{% if new_version_available %} yes {% else %} no {% endif %}\"","title":"Check if a new version of Kalliope is available"},{"location":"brain/neurons/kalliope_version/#give-the-current-version-number-and-the-last-available-version-number","text":"- name : \"version\" signals : - order : \"give me my kalliope version\" neurons : - kalliope_version : say_template : \"You are using version {{ current_version }}. The last available version is {{ last_master_version }}\"","title":"Give the current version number and the last available version number"},{"location":"brain/neurons/kill_switch/","text":"This neuron exits the Kalliope process. Input parameters No parameters Returned values No returned values Synapses example Simple example : - name : \"stop-kalliope\" signals : - order : \"goodbye\" neurons : - kill_switch","title":"kill_switch"},{"location":"brain/neurons/kill_switch/#input-parameters","text":"No parameters","title":"Input parameters"},{"location":"brain/neurons/kill_switch/#returned-values","text":"No returned values","title":"Returned values"},{"location":"brain/neurons/kill_switch/#synapses-example","text":"Simple example : - name : \"stop-kalliope\" signals : - order : \"goodbye\" neurons : - kill_switch","title":"Synapses example"},{"location":"brain/neurons/mqtt_publisher/","text":"Publish a message to a MQTT broker server Input parameters parameter required type default choices comment broker_ip YES string IP address of the MQTT broker server port NO int 1883 Port of the broker. By default 1883. 8883 when TLS is activated. topic YES string Topic name where the message will be published payload YES string Message to publish on the topic qos NO int 0 0 or 1 or 2 The quality of service level to use retain NO Boolean FALSE True, False if set to True, the message will be set as the \u201clast known good\u201d/retained message for the topic. client_id NO string kalliope The MQTT client id to use. If not set, the name will be set to \"kalliope\" keepalive NO int 60 The keepalive timeout value for the client username NO string username for authenticating the client password NO string password for authenticating the client ca_cert NO string Path to the remote server CA certificate used for securing the transport certfile NO string Path to the client certificate file used for authentication keyfile NO string Path to the client key file attached to the client certificate protocol NO string MQTTv311 MQTTv31 or MQTTv311 Can be either MQTTv31 or MQTTv311 tls_insecure NO string FALSE Set the verification of the server hostname in the server certificate Returned values No returned values Synapses example Publish a message to the topic \"my/topic\" with minimal configuration - name : \"mqtt-publisher-1\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" Publish a json formatted message. Note that anti-slashes must be escaped. - name : \"mqtt-publisher-2\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"mytopic\" payload : \"{\\\"mykey\\\": \\\"myvalue\\\"}\" The broker require authentication - name : \"mqtt-publisher-3\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" username : \"guest\" password : \"guest\" The broker require a secure TLS connection - name : \"mqtt-publisher-4\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" ca_cert : \"/path/to/ca.cert\" The broker require a secure TLS connection and authentication based on client certificate - name : \"mqtt-publisher-5\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" ca_cert : \"/path/to/ca.cert\" certfile : \"path/to/client.crt\" keyfile : \"path/to/client.key\" The broker require a secure TLS connection, an authentication based on client certificate and the CA is a self signed certificate - name : \"mqtt-publisher-6\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" ca_cert : \"/path/to/ca.cert\" certfile : \"path/to/client.crt\" keyfile : \"path/to/client.key\" tls_insecure : True Test with CLI The following part of the documentation can help you to configure your synapse with right options. From here we suppose that you have already a running broker server on your local machine. If it's not the case, please refer to the documentation of the signal mqtt_subscriber to install a testing broker server. Install a CLI mqtt client sudo apt-get install mosquitto-clients Run a subscriber mosquitto_sub -t 'this/is/a/topic' Then use your neuron. E.g - name : \"test-mqtt-publisher\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"this/is/a/topic\" payload : \"info\"","title":"mqtt_publisher"},{"location":"brain/neurons/mqtt_publisher/#input-parameters","text":"parameter required type default choices comment broker_ip YES string IP address of the MQTT broker server port NO int 1883 Port of the broker. By default 1883. 8883 when TLS is activated. topic YES string Topic name where the message will be published payload YES string Message to publish on the topic qos NO int 0 0 or 1 or 2 The quality of service level to use retain NO Boolean FALSE True, False if set to True, the message will be set as the \u201clast known good\u201d/retained message for the topic. client_id NO string kalliope The MQTT client id to use. If not set, the name will be set to \"kalliope\" keepalive NO int 60 The keepalive timeout value for the client username NO string username for authenticating the client password NO string password for authenticating the client ca_cert NO string Path to the remote server CA certificate used for securing the transport certfile NO string Path to the client certificate file used for authentication keyfile NO string Path to the client key file attached to the client certificate protocol NO string MQTTv311 MQTTv31 or MQTTv311 Can be either MQTTv31 or MQTTv311 tls_insecure NO string FALSE Set the verification of the server hostname in the server certificate","title":"Input parameters"},{"location":"brain/neurons/mqtt_publisher/#returned-values","text":"No returned values","title":"Returned values"},{"location":"brain/neurons/mqtt_publisher/#synapses-example","text":"Publish a message to the topic \"my/topic\" with minimal configuration - name : \"mqtt-publisher-1\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" Publish a json formatted message. Note that anti-slashes must be escaped. - name : \"mqtt-publisher-2\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"mytopic\" payload : \"{\\\"mykey\\\": \\\"myvalue\\\"}\" The broker require authentication - name : \"mqtt-publisher-3\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" username : \"guest\" password : \"guest\" The broker require a secure TLS connection - name : \"mqtt-publisher-4\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" ca_cert : \"/path/to/ca.cert\" The broker require a secure TLS connection and authentication based on client certificate - name : \"mqtt-publisher-5\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" ca_cert : \"/path/to/ca.cert\" certfile : \"path/to/client.crt\" keyfile : \"path/to/client.key\" The broker require a secure TLS connection, an authentication based on client certificate and the CA is a self signed certificate - name : \"mqtt-publisher-6\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"my/topic\" payload : \"my message\" ca_cert : \"/path/to/ca.cert\" certfile : \"path/to/client.crt\" keyfile : \"path/to/client.key\" tls_insecure : True","title":"Synapses example"},{"location":"brain/neurons/mqtt_publisher/#test-with-cli","text":"The following part of the documentation can help you to configure your synapse with right options. From here we suppose that you have already a running broker server on your local machine. If it's not the case, please refer to the documentation of the signal mqtt_subscriber to install a testing broker server. Install a CLI mqtt client sudo apt-get install mosquitto-clients Run a subscriber mosquitto_sub -t 'this/is/a/topic' Then use your neuron. E.g - name : \"test-mqtt-publisher\" signals : - order : \"this is my order\" neurons : - mqtt_publisher : broker_ip : \"127.0.0.1\" topic : \"this/is/a/topic\" payload : \"info\"","title":"Test with CLI"},{"location":"brain/neurons/neurotimer/","text":"Run a synapse after a delay. Input parameters parameter required type choices comment seconds NO int value > 0 Number of second to wait before running the synapse minutes NO int value > 0 Number of minutes to wait before running the synapse hours NO int value > 0 Number of hours to wait before running the synapse synapse YES string Name of the synapse to run after the selected delay forwarded_parameters NO dict dict of parameters that will be passed to the called synapse Returned values None Synapses example Scenario: You are used to make a tea and want to know when it's time to remove the bag. You: remember me to remove the bag of my tea Kalliope: Alright 3 minutes later.. Kalliope: your tea is ready - name : \"tea-bag\" signals : - order : \"remember me to remove the bag of my tea\" neurons : - neurotimer : minutes : 3 synapse : \"time-over\" - say : message : - \"Alright\" - name : \"time-over\" signals : - order : \"no-order-for-this-synapse\" neurons : - say : message : - \"your tea is ready\" Scenario: You are starting to cook something You: notify me in 10 minutes Kalliope: I'll notify you in 10 minutes 10 minutes later.. Kalliope: You asked me to notify you If your STT engine return integer when capturing a spoken order, you can set the time on the fly. - name : \"timer2\" signals : - order : \"notify me in {{ time }} minutes\" neurons : - neurotimer : minutes : \"{{ time }}\" synapse : \"notify\" - say : message : - \"I'll notify you in {{ time }} minutes\" - name : \"notify\" signals : - order : \"no-order-for-this-synapse\" neurons : - say : message : - \"You asked me to notify you\" Scenario: You want to remember to do something You: remind me to call mom in 15 minutes Kalliope: I'll notify you in 15 minutes 15 minutes later.. Kalliope: You asked me to remind you to call mom 15 minutes ago Passing argument to the called synapse with the forwarded_parameters . - name : \"remember-synapse\" signals : - order : \"remind me to {{ remember }} in {{ time }} minutes\" neurons : - neurotimer : minutes : \"{{ time }}\" synapse : \"remember-todo\" forwarded_parameters : remember : \"{{ remember }}\" time : \"{{ time }}\" - say : message : - \"I'll remind you in {{ time }} minutes\" - name : \"remember-todo\" signals : - order : \"no-order-for-this-synapse\" neurons : - say : message : - \"You asked me to remind you to {{ remember }} {{ time }} minutes ago\" Note: You can still use the kalliope_memory instead of forwarded_parameters but your value will be overridden if you call the same synapse a multiple time. Notes Note: When used from the API, returned value from the launched synapse are lost Note: Not all STT engine return integer. Note: You must set at least one timer parameter (seconds or minutes or hours). You can also set them all.","title":"neurotimer"},{"location":"brain/neurons/neurotimer/#input-parameters","text":"parameter required type choices comment seconds NO int value > 0 Number of second to wait before running the synapse minutes NO int value > 0 Number of minutes to wait before running the synapse hours NO int value > 0 Number of hours to wait before running the synapse synapse YES string Name of the synapse to run after the selected delay forwarded_parameters NO dict dict of parameters that will be passed to the called synapse","title":"Input parameters"},{"location":"brain/neurons/neurotimer/#returned-values","text":"None","title":"Returned values"},{"location":"brain/neurons/neurotimer/#synapses-example","text":"Scenario: You are used to make a tea and want to know when it's time to remove the bag. You: remember me to remove the bag of my tea Kalliope: Alright 3 minutes later.. Kalliope: your tea is ready - name : \"tea-bag\" signals : - order : \"remember me to remove the bag of my tea\" neurons : - neurotimer : minutes : 3 synapse : \"time-over\" - say : message : - \"Alright\" - name : \"time-over\" signals : - order : \"no-order-for-this-synapse\" neurons : - say : message : - \"your tea is ready\" Scenario: You are starting to cook something You: notify me in 10 minutes Kalliope: I'll notify you in 10 minutes 10 minutes later.. Kalliope: You asked me to notify you If your STT engine return integer when capturing a spoken order, you can set the time on the fly. - name : \"timer2\" signals : - order : \"notify me in {{ time }} minutes\" neurons : - neurotimer : minutes : \"{{ time }}\" synapse : \"notify\" - say : message : - \"I'll notify you in {{ time }} minutes\" - name : \"notify\" signals : - order : \"no-order-for-this-synapse\" neurons : - say : message : - \"You asked me to notify you\" Scenario: You want to remember to do something You: remind me to call mom in 15 minutes Kalliope: I'll notify you in 15 minutes 15 minutes later.. Kalliope: You asked me to remind you to call mom 15 minutes ago Passing argument to the called synapse with the forwarded_parameters . - name : \"remember-synapse\" signals : - order : \"remind me to {{ remember }} in {{ time }} minutes\" neurons : - neurotimer : minutes : \"{{ time }}\" synapse : \"remember-todo\" forwarded_parameters : remember : \"{{ remember }}\" time : \"{{ time }}\" - say : message : - \"I'll remind you in {{ time }} minutes\" - name : \"remember-todo\" signals : - order : \"no-order-for-this-synapse\" neurons : - say : message : - \"You asked me to remind you to {{ remember }} {{ time }} minutes ago\" Note: You can still use the kalliope_memory instead of forwarded_parameters but your value will be overridden if you call the same synapse a multiple time.","title":"Synapses example"},{"location":"brain/neurons/neurotimer/#notes","text":"Note: When used from the API, returned value from the launched synapse are lost Note: Not all STT engine return integer. Note: You must set at least one timer parameter (seconds or minutes or hours). You can also set them all.","title":"Notes"},{"location":"brain/neurons/neurotransmitter/","text":"Link synapses together. Call a synapse directly or depending on the captured speech from the user. Input parameters parameter required default choices comment from_answer_link NO Link a synapse depending on the answer of the user. Contain a list of tuple synapse/answer object direct_link NO Direct call to a synapse by the name of this one synapse NO Name of the synapse to launch if the captured audio from the STT is present in the answer list answers NO List of sentences that are valid for running the attached synapse default NO Name of the synapse to launch if the captured audio doesn't match any answers Returned values None Synapses example We call another synapse directly at the end of the first synapse - name : \"direct-link\" signals : - order : \"direct link\" neurons : - say : message : \"I launch directly the synapse number 1\" - neurotransmitter : direct_link : \"synapse-1\" - name : \"synapse-1\" signals : - order : \"synapse-direct-link-1\" neurons : - say : message : \"Synapse 1 launched\" Here the synapse will ask the user if he likes french fries. If the user answer \"yes\" or \"maybe\", he will be redirected to the synapse2 that say something. If the user answer no, he will be redirected to another synapse that say something else. If the user say something that is not present in answers , he will be redirected to the synapse4. - name : \"synapse1\" signals : - order : \"ask me a question\" neurons : - say : message : \"do you like french fries?\" - neurotransmitter : from_answer_link : - synapse : \"synapse2\" answers : - \"absolutely\" - \"maybe\" - synapse : \"synapse3\" answers : - \"no at all\" default : \"synapse4\" - name : \"synapse2\" signals : - order : \"synapse2\" neurons : - say : message : \"You like french fries!! Me too! I suppose...\" - name : \"synapse3\" signals : - order : \"synapse3\" neurons : - say : message : \"You don't like french fries. It's ok.\" - name : \"synapse4\" signals : - order : \"synapse4\" neurons : - say : message : \"I haven't understood your answer\" Neurotransmitter also uses parameters in answers. You can provide parameters to your answers so they can be used by the synapse you are about to launch. Note: The params defined in answers must match with the expected params in the target synapse, otherwise an error is raised. - name : \"synapse5\" signals : - order : \"give me the weather\" neurons : - say : message : \"which town ?\" - neurotransmitter : from_answer_link : - synapse : \"synapse6\" answers : - \"the weather in {{ location }}\" - name : \"synapse6\" signals : - order : \"What is the weather in {{ location }}\" neurons : - openweathermap : api_key : \"your-api\" lang : \"fr\" temp_unit : \"celsius\" country : \"FR\" location : \"{{ location }}\" say_template : - \"Today in {{ location }} the weather is {{ weather_today }} with {{ temp_today_temp }} celsius\" Notes When using the neuron neurotransmitter, you must set a direct_link or a from_answer_link , no both at the same time.","title":"neurotransmitter"},{"location":"brain/neurons/neurotransmitter/#input-parameters","text":"parameter required default choices comment from_answer_link NO Link a synapse depending on the answer of the user. Contain a list of tuple synapse/answer object direct_link NO Direct call to a synapse by the name of this one synapse NO Name of the synapse to launch if the captured audio from the STT is present in the answer list answers NO List of sentences that are valid for running the attached synapse default NO Name of the synapse to launch if the captured audio doesn't match any answers","title":"Input parameters"},{"location":"brain/neurons/neurotransmitter/#returned-values","text":"None","title":"Returned values"},{"location":"brain/neurons/neurotransmitter/#synapses-example","text":"We call another synapse directly at the end of the first synapse - name : \"direct-link\" signals : - order : \"direct link\" neurons : - say : message : \"I launch directly the synapse number 1\" - neurotransmitter : direct_link : \"synapse-1\" - name : \"synapse-1\" signals : - order : \"synapse-direct-link-1\" neurons : - say : message : \"Synapse 1 launched\" Here the synapse will ask the user if he likes french fries. If the user answer \"yes\" or \"maybe\", he will be redirected to the synapse2 that say something. If the user answer no, he will be redirected to another synapse that say something else. If the user say something that is not present in answers , he will be redirected to the synapse4. - name : \"synapse1\" signals : - order : \"ask me a question\" neurons : - say : message : \"do you like french fries?\" - neurotransmitter : from_answer_link : - synapse : \"synapse2\" answers : - \"absolutely\" - \"maybe\" - synapse : \"synapse3\" answers : - \"no at all\" default : \"synapse4\" - name : \"synapse2\" signals : - order : \"synapse2\" neurons : - say : message : \"You like french fries!! Me too! I suppose...\" - name : \"synapse3\" signals : - order : \"synapse3\" neurons : - say : message : \"You don't like french fries. It's ok.\" - name : \"synapse4\" signals : - order : \"synapse4\" neurons : - say : message : \"I haven't understood your answer\" Neurotransmitter also uses parameters in answers. You can provide parameters to your answers so they can be used by the synapse you are about to launch. Note: The params defined in answers must match with the expected params in the target synapse, otherwise an error is raised. - name : \"synapse5\" signals : - order : \"give me the weather\" neurons : - say : message : \"which town ?\" - neurotransmitter : from_answer_link : - synapse : \"synapse6\" answers : - \"the weather in {{ location }}\" - name : \"synapse6\" signals : - order : \"What is the weather in {{ location }}\" neurons : - openweathermap : api_key : \"your-api\" lang : \"fr\" temp_unit : \"celsius\" country : \"FR\" location : \"{{ location }}\" say_template : - \"Today in {{ location }} the weather is {{ weather_today }} with {{ temp_today_temp }} celsius\"","title":"Synapses example"},{"location":"brain/neurons/neurotransmitter/#notes","text":"When using the neuron neurotransmitter, you must set a direct_link or a from_answer_link , no both at the same time.","title":"Notes"},{"location":"brain/neurons/play/","text":"This neuron plays a given sound file. Input parameters parameter required default choices comment filename YES A single filename or a list of filenames for sound files that Kalliope should play (randomly picking one if a list). Please note that only \".wav\" files should be used due to file modifications if conversion is required (in PlayerModule.convert_mp3_to_wav() Returned values No returned values Synapses example Simple example : - name : \"Play-jingle\" signals : - order : \"play jingle\" neurons : - play : filename : \"resources/files/jingle.wav\" With a multiple choice list, Kalliope will pick one randomly: - name : \"Play-random-jingle\" signals : - order : \"play random jingle\" neurons : - play : filename : - \"resources/files/jingle1.wav\" - \"resources/files/jingle2.wav\" - \"resources/files/jingle3.wav\" Play a sound instead of saying somthing after being triggered (the signal has to be configured accordingly in settings.yml): - name : \"on-triggered-synapse\" signals : [] neurons : - play : file : \"resources/files/dong.wav\" Notes Note: The neuron does not return any values. Note: Kalliope randomly takes a filename from the list","title":"play"},{"location":"brain/neurons/play/#input-parameters","text":"parameter required default choices comment filename YES A single filename or a list of filenames for sound files that Kalliope should play (randomly picking one if a list). Please note that only \".wav\" files should be used due to file modifications if conversion is required (in PlayerModule.convert_mp3_to_wav()","title":"Input parameters"},{"location":"brain/neurons/play/#returned-values","text":"No returned values","title":"Returned values"},{"location":"brain/neurons/play/#synapses-example","text":"Simple example : - name : \"Play-jingle\" signals : - order : \"play jingle\" neurons : - play : filename : \"resources/files/jingle.wav\" With a multiple choice list, Kalliope will pick one randomly: - name : \"Play-random-jingle\" signals : - order : \"play random jingle\" neurons : - play : filename : - \"resources/files/jingle1.wav\" - \"resources/files/jingle2.wav\" - \"resources/files/jingle3.wav\" Play a sound instead of saying somthing after being triggered (the signal has to be configured accordingly in settings.yml): - name : \"on-triggered-synapse\" signals : [] neurons : - play : file : \"resources/files/dong.wav\"","title":"Synapses example"},{"location":"brain/neurons/play/#notes","text":"Note: The neuron does not return any values. Note: Kalliope randomly takes a filename from the list","title":"Notes"},{"location":"brain/neurons/say/","text":"This neuron is the mouth of Kalliope and uses the TTS engine defined in your settings to say the given message. Input parameters parameter required default choices comment message YES A single message or a list of messages Kalliope could say file_template NO Path to a file template to use instead of a message parameters NO A dict of parameters to pass to the file template if used Returned values No returned values Synapses example Simple example : - name : \"Say-hello\" signals : - order : \"hello\" neurons : - say : message : \"Hello Sir\" With a multiple choice list, Kalliope will pick one randomly: - name : \"Say-hello\" signals : - order : \"hello\" neurons : - say : message : - \"Hello Sir\" - \"Welcome Sir\" - \"Good morning Sir\" With an input value - name : \"Say-hello-to-friend\" signals : - order : \"say hello to {{ friend_name }}\" neurons : - say : message : \"Hello {{ friend_name }}\" With a template - name : \"Say-hello-template\" signals : - order : \"say hello\" neurons : - say : file_template : \"say_something.j2\" parameters : friend_name : \"{{ friend_name }}\" Where say_something.j2 would be Hello sir! With a file template, and passing some variable from the order: - name : \"Say-hello-to-friend-template\" signals : - order : \"say hello to {{ friend_name }}\" neurons : - say : file_template : \"my_template.j2\" parameters : forwarded_variable_name : \"{{ friend_name }}\" Where my_template.j2 would be Hello {{ forwarded_variable_name }} Notes Note: The neuron does not return any values. Note: Kalliope randomly takes a message from the list","title":"say"},{"location":"brain/neurons/say/#input-parameters","text":"parameter required default choices comment message YES A single message or a list of messages Kalliope could say file_template NO Path to a file template to use instead of a message parameters NO A dict of parameters to pass to the file template if used","title":"Input parameters"},{"location":"brain/neurons/say/#returned-values","text":"No returned values","title":"Returned values"},{"location":"brain/neurons/say/#synapses-example","text":"Simple example : - name : \"Say-hello\" signals : - order : \"hello\" neurons : - say : message : \"Hello Sir\" With a multiple choice list, Kalliope will pick one randomly: - name : \"Say-hello\" signals : - order : \"hello\" neurons : - say : message : - \"Hello Sir\" - \"Welcome Sir\" - \"Good morning Sir\" With an input value - name : \"Say-hello-to-friend\" signals : - order : \"say hello to {{ friend_name }}\" neurons : - say : message : \"Hello {{ friend_name }}\" With a template - name : \"Say-hello-template\" signals : - order : \"say hello\" neurons : - say : file_template : \"say_something.j2\" parameters : friend_name : \"{{ friend_name }}\" Where say_something.j2 would be Hello sir! With a file template, and passing some variable from the order: - name : \"Say-hello-to-friend-template\" signals : - order : \"say hello to {{ friend_name }}\" neurons : - say : file_template : \"my_template.j2\" parameters : forwarded_variable_name : \"{{ friend_name }}\" Where my_template.j2 would be Hello {{ forwarded_variable_name }}","title":"Synapses example"},{"location":"brain/neurons/say/#notes","text":"Note: The neuron does not return any values. Note: Kalliope randomly takes a message from the list","title":"Notes"},{"location":"brain/neurons/script/","text":"This neuron runs a script located on the Kalliope system. Input parameters parameter required default choices comment path YES The path of the script to execute. async NO FALSE If True, Kalliope will not wait for the end of the execution of the script Returned values Values are only returned by the neuron if the async mode is set to False . Name Description Type sample output The shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\" string Sun Oct 16 15:50:45 CEST 2016 returncode The returned code of the command. Return 0 if the command was succesfuly exectued, else 1 int 0 Synapses example Simple example : - name : \"run-simple-script\" signals : - order : \"Run the script\" neurons : - script : path : \"/path/to/script.sh\" If the script can take a long time and you don't want to block the Kalliope process, you can run it in asynchronous mode. Keep in mind that you cannot get any returned value with this mode. - name : \"run-simple-script\" signals : - order : \"Run the script\" neurons : - script : path : \"/path/to/script.sh\" async : True Make Kalliope speak out loud the result of the script. - name : \"run-script-an-give-output\" signals : - order : \"run the script\" neurons : - script : path : \"/path/to/script.sh\" say_template : \"{{ output }}\" Path an argument to the script from your order - name : \"run-simple-script-with-input-value\" signals : - order : \"Run the script with {{ my_var }}\" neurons : - script : path : \"/path/to/script.sh {{ my_var }}\" async : True Notes Note: Kalliope must have the rights to run the script. Note: Kalliope can be used to grant access to an user with lower rights ... ! Note: When 'async' flag is used, returned value are lost","title":"script"},{"location":"brain/neurons/script/#input-parameters","text":"parameter required default choices comment path YES The path of the script to execute. async NO FALSE If True, Kalliope will not wait for the end of the execution of the script","title":"Input parameters"},{"location":"brain/neurons/script/#returned-values","text":"Values are only returned by the neuron if the async mode is set to False . Name Description Type sample output The shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\" string Sun Oct 16 15:50:45 CEST 2016 returncode The returned code of the command. Return 0 if the command was succesfuly exectued, else 1 int 0","title":"Returned values"},{"location":"brain/neurons/script/#synapses-example","text":"Simple example : - name : \"run-simple-script\" signals : - order : \"Run the script\" neurons : - script : path : \"/path/to/script.sh\" If the script can take a long time and you don't want to block the Kalliope process, you can run it in asynchronous mode. Keep in mind that you cannot get any returned value with this mode. - name : \"run-simple-script\" signals : - order : \"Run the script\" neurons : - script : path : \"/path/to/script.sh\" async : True Make Kalliope speak out loud the result of the script. - name : \"run-script-an-give-output\" signals : - order : \"run the script\" neurons : - script : path : \"/path/to/script.sh\" say_template : \"{{ output }}\" Path an argument to the script from your order - name : \"run-simple-script-with-input-value\" signals : - order : \"Run the script with {{ my_var }}\" neurons : - script : path : \"/path/to/script.sh {{ my_var }}\" async : True","title":"Synapses example"},{"location":"brain/neurons/script/#notes","text":"Note: Kalliope must have the rights to run the script. Note: Kalliope can be used to grant access to an user with lower rights ... ! Note: When 'async' flag is used, returned value are lost","title":"Notes"},{"location":"brain/neurons/settings/","text":"Manage / Update / Add settings entries of Kalliope Currently available: default_tts default_stt default_trigger default_player text_to_speech speech_to_text triggers players hooks var_files variable deaf mute energy_threshold adjust_for_ambient_noise_second Input parameters parameter required type default choices comment default_tts No Str None Pick a tts name from the list of text_to_speech default_stt No Str None Pick a stt name from the list of speech_to_text default_trigger No Str None Pick a trigger name from the list of triggers default_player No Str None Pick a player name from the list of players text_to_speech No list (of dict) None Add or Update a tts to the list speech_to_text No list (of dict) None Add or Update a stt to the list triggers No list (of dict) None Add or Update a trigger to the list players No list (of dict) None Add or Update a player to the list hooks No dict None Update the hooks dict from the settings with the given dict var_files No list None Update variables from the settings with the given files path variable No dict None Update the variable dict from the settings with the given dict deaf No boolean None True, False mute No boolean None True, False recognizer_multiplier No int None recognizer_energy_ratio No int None recognizer_recording_timeout No int None recognizer_recording_timeout_with_silence No int None Returned values None Synapses example tts, stt, triggers, players - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : default_tts : \"googletts\" - say : message : - \"Hello sir\" To update the list of text_to_speech - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : text_to_speech : - googletts : language : \"en\" - pico2wave : language : \"fr-FR\" cache : False default_tts : \"googletts\" - say : message : - \"Hello sir\" Options (deaf, mute, ...) - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : mute : True - say : message : - \"Hello sir\" Hooks - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : hooks : on_order_found : \"random-on-order-found-synapse\" on_processed_synapses : - \"random1-on-processed-synapse\" - \"random2-on-processed-synapse\" - say : message : - \"Hello sir\" Variables - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : variable : nickname : \"monf\" - say : message : - \"Hello {{nickname}}\" The keyword is 'var_files' for files The {{nickname}} will be loaded from the variables.yml file. - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : var_files : - variables.yml - say : message : - \"Hello {{nickname}}\" Notes Note: It is not possible to update the REST API config nor the ressources path nor the cache path for tts. Note: Changes made to the settings from this neuron are not persistent. Settings will be loaded again following the yaml file at the next start of Kalliope.","title":"settings"},{"location":"brain/neurons/settings/#input-parameters","text":"parameter required type default choices comment default_tts No Str None Pick a tts name from the list of text_to_speech default_stt No Str None Pick a stt name from the list of speech_to_text default_trigger No Str None Pick a trigger name from the list of triggers default_player No Str None Pick a player name from the list of players text_to_speech No list (of dict) None Add or Update a tts to the list speech_to_text No list (of dict) None Add or Update a stt to the list triggers No list (of dict) None Add or Update a trigger to the list players No list (of dict) None Add or Update a player to the list hooks No dict None Update the hooks dict from the settings with the given dict var_files No list None Update variables from the settings with the given files path variable No dict None Update the variable dict from the settings with the given dict deaf No boolean None True, False mute No boolean None True, False recognizer_multiplier No int None recognizer_energy_ratio No int None recognizer_recording_timeout No int None recognizer_recording_timeout_with_silence No int None","title":"Input parameters"},{"location":"brain/neurons/settings/#returned-values","text":"None","title":"Returned values"},{"location":"brain/neurons/settings/#synapses-example","text":"","title":"Synapses example"},{"location":"brain/neurons/settings/#tts-stt-triggers-players","text":"- name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : default_tts : \"googletts\" - say : message : - \"Hello sir\" To update the list of text_to_speech - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : text_to_speech : - googletts : language : \"en\" - pico2wave : language : \"fr-FR\" cache : False default_tts : \"googletts\" - say : message : - \"Hello sir\"","title":"tts, stt, triggers, players"},{"location":"brain/neurons/settings/#options-deaf-mute","text":"- name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : mute : True - say : message : - \"Hello sir\"","title":"Options (deaf, mute, ...)"},{"location":"brain/neurons/settings/#hooks","text":"- name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : hooks : on_order_found : \"random-on-order-found-synapse\" on_processed_synapses : - \"random1-on-processed-synapse\" - \"random2-on-processed-synapse\" - say : message : - \"Hello sir\"","title":"Hooks"},{"location":"brain/neurons/settings/#variables","text":"- name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : variable : nickname : \"monf\" - say : message : - \"Hello {{nickname}}\" The keyword is 'var_files' for files The {{nickname}} will be loaded from the variables.yml file. - name : \"say-hello-en\" signals : - order : \"Hello\" neurons : - settings : var_files : - variables.yml - say : message : - \"Hello {{nickname}}\"","title":"Variables"},{"location":"brain/neurons/settings/#notes","text":"Note: It is not possible to update the REST API config nor the ressources path nor the cache path for tts. Note: Changes made to the settings from this neuron are not persistent. Settings will be loaded again following the yaml file at the next start of Kalliope.","title":"Notes"},{"location":"brain/neurons/shell/","text":"Run a shell command on the local system where Kalliope is installed. Input parameters parameter required default choices comment cmd yes The shell command to run async no False If True, Kalliope will not wait for the end of the execution of the command query no False An argument to send the script. Returned values Values are only returned by the neuron if the async mode is set to False . Name Description Type sample output The shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\" string Sun Oct 16 15:50:45 CEST 2016 returncode The returned code of the command. Return 0 if the command was succesfuly exectued, else 1 int 0 Synapses example Simple that will create a file locally - name : \"create-a-local-file\" signals : - order : \"touch\" neurons : - shell : cmd : \"touch ~/test.txt\" We want to launch our favorite web radio. This command, which it call mplayer, will block the entire Kalliope process if we wait for the result unless the mplayer process is killed. So we add async flag. - name : \"run-web-radio\" signals : - order : \"run web radio\" neurons : - shell : cmd : \"mplayer http://192.99.17.12:6410/\" async : True - say : message : \"web radio lanched\" Note: If the parameter async is set to True, the neuron will not return any values. Then, we can kill the player process with another synapse - name : \"stop-web-radio\" signals : - order : \"stop web radio\" neurons : - shell : cmd : \"pkill mplayer\" - say : message : \"web radio stopped\" Make Kalliope add two number and speak out loud the result. Here you should hear \"4\". - name : \"get-the-result-of-the-addition\" signals : - order : \"addition\" neurons : - shell : cmd : \"echo $(expr \\\"1\\\" + \\\"3\\\")\" say_template : \"{{ output }}\" Let's use a file template. We try to remove the file ~/test.txt and make Kalliope give us the result depending of the returned error code. If the file is present on the system, you will hear \"The command has succeeded\" and so the file has been deleted. If you run it a second time, the command will fail as the file is not anymore present and so you should hear \"The command has failed\". See the template example bellow. - name : \"remove-a-file\" signals : - order : \"remove file\" neurons : - shell : cmd : \"rm ~/test.txt\" file_template : remove_file.j2 If you want to add argument to your shell command, you can use an input value from your order. - name : \"Delete-a-specific-file\" signals : - order : \"remove file {{ query }}\" neurons : - shell : cmd : \"rm {{ query }}\" file_template : remove_file.j2 In the example above, kalliope will remove the file you asked for in the query. eg: \"remove file test\", the executed command will be \"rm test\" Templates example Template remove_file.j2 used in the remove file example remove_file.j2 {% if returncode == 0 %} The command succeeded {% else %} The command failled {% endif %} Notes Note: If the parameter async is set to True, the neuron will not return any values.","title":"shell"},{"location":"brain/neurons/shell/#input-parameters","text":"parameter required default choices comment cmd yes The shell command to run async no False If True, Kalliope will not wait for the end of the execution of the command query no False An argument to send the script.","title":"Input parameters"},{"location":"brain/neurons/shell/#returned-values","text":"Values are only returned by the neuron if the async mode is set to False . Name Description Type sample output The shell output of the command if any. The command \"date\" will retun \"Sun Oct 16 15:50:45 CEST 2016\" string Sun Oct 16 15:50:45 CEST 2016 returncode The returned code of the command. Return 0 if the command was succesfuly exectued, else 1 int 0","title":"Returned values"},{"location":"brain/neurons/shell/#synapses-example","text":"Simple that will create a file locally - name : \"create-a-local-file\" signals : - order : \"touch\" neurons : - shell : cmd : \"touch ~/test.txt\" We want to launch our favorite web radio. This command, which it call mplayer, will block the entire Kalliope process if we wait for the result unless the mplayer process is killed. So we add async flag. - name : \"run-web-radio\" signals : - order : \"run web radio\" neurons : - shell : cmd : \"mplayer http://192.99.17.12:6410/\" async : True - say : message : \"web radio lanched\" Note: If the parameter async is set to True, the neuron will not return any values. Then, we can kill the player process with another synapse - name : \"stop-web-radio\" signals : - order : \"stop web radio\" neurons : - shell : cmd : \"pkill mplayer\" - say : message : \"web radio stopped\" Make Kalliope add two number and speak out loud the result. Here you should hear \"4\". - name : \"get-the-result-of-the-addition\" signals : - order : \"addition\" neurons : - shell : cmd : \"echo $(expr \\\"1\\\" + \\\"3\\\")\" say_template : \"{{ output }}\" Let's use a file template. We try to remove the file ~/test.txt and make Kalliope give us the result depending of the returned error code. If the file is present on the system, you will hear \"The command has succeeded\" and so the file has been deleted. If you run it a second time, the command will fail as the file is not anymore present and so you should hear \"The command has failed\". See the template example bellow. - name : \"remove-a-file\" signals : - order : \"remove file\" neurons : - shell : cmd : \"rm ~/test.txt\" file_template : remove_file.j2 If you want to add argument to your shell command, you can use an input value from your order. - name : \"Delete-a-specific-file\" signals : - order : \"remove file {{ query }}\" neurons : - shell : cmd : \"rm {{ query }}\" file_template : remove_file.j2 In the example above, kalliope will remove the file you asked for in the query. eg: \"remove file test\", the executed command will be \"rm test\"","title":"Synapses example"},{"location":"brain/neurons/shell/#templates-example","text":"Template remove_file.j2 used in the remove file example remove_file.j2 {% if returncode == 0 %} The command succeeded {% else %} The command failled {% endif %}","title":"Templates example"},{"location":"brain/neurons/shell/#notes","text":"Note: If the parameter async is set to True, the neuron will not return any values.","title":"Notes"},{"location":"brain/neurons/signals/","text":"Send a message to all signals launched in Kalliope to update their behavior. The message will be interpreted by all signals that support notification. All supported notification type are documented in each Signals. A basic example of usage is to disable the trigger from the Order signal to create an interactive mode where you can chain orders without having to wake up Kalliope with the hotword. Input parameters parameter required type default choices comment notification YES string The notification string identifier that will be recognized by launched signals payload NO dict Dict of parameters to send with the notification. The payload must match the target Signal documentation Synapse examples Syntax: - name : \"my-synapse\" signals : {} neurons : - signals : notification : \"notification_name\" payload : key1 : \"value1\" key2 : \"value2\" E.g: - name : \"start-skip-trigger\" signals : {} neurons : - signals : notification : \"skip_trigger\" payload : status : \"True\" Concrete example See a complete example from the order signal documentation . How to implement notifications in my community signals You Signal will implement 2 classes, SignalModule and Thread. SignalModule is used to implement methods like notification Thread is used to keep the signal awaken during the Kalliope process execution. Here is a basic implementation of a signal. class Mysignal ( SignalModule , Thread ): def __init__ ( self ): super ( Mysignal , self ) . __init__ () Thread . __init__ ( self , name = Mysignal ) def run : # do my signal job Now, to implement notification, add the on_notification_received class Mysignal ( SignalModule , Thread ): def __init__ ( self ): super ( Mysignal , self ) . __init__ () Thread . __init__ ( self , name = Mysignal ) def run : # do my signal job def on_notification_received ( self , notification = None , payload = None ): logger . debug ( \"[My_signal] received notification, notification: %s , payload: %s \" % ( notification , payload )) if notification == \"notification_that_I_care\" : # do stuff with payload","title":"signals"},{"location":"brain/neurons/signals/#input-parameters","text":"parameter required type default choices comment notification YES string The notification string identifier that will be recognized by launched signals payload NO dict Dict of parameters to send with the notification. The payload must match the target Signal documentation","title":"Input parameters"},{"location":"brain/neurons/signals/#synapse-examples","text":"Syntax: - name : \"my-synapse\" signals : {} neurons : - signals : notification : \"notification_name\" payload : key1 : \"value1\" key2 : \"value2\" E.g: - name : \"start-skip-trigger\" signals : {} neurons : - signals : notification : \"skip_trigger\" payload : status : \"True\"","title":"Synapse examples"},{"location":"brain/neurons/signals/#concrete-example","text":"See a complete example from the order signal documentation .","title":"Concrete example"},{"location":"brain/neurons/signals/#how-to-implement-notifications-in-my-community-signals","text":"You Signal will implement 2 classes, SignalModule and Thread. SignalModule is used to implement methods like notification Thread is used to keep the signal awaken during the Kalliope process execution. Here is a basic implementation of a signal. class Mysignal ( SignalModule , Thread ): def __init__ ( self ): super ( Mysignal , self ) . __init__ () Thread . __init__ ( self , name = Mysignal ) def run : # do my signal job Now, to implement notification, add the on_notification_received class Mysignal ( SignalModule , Thread ): def __init__ ( self ): super ( Mysignal , self ) . __init__ () Thread . __init__ ( self , name = Mysignal ) def run : # do my signal job def on_notification_received ( self , notification = None , payload = None ): logger . debug ( \"[My_signal] received notification, notification: %s , payload: %s \" % ( notification , payload )) if notification == \"notification_that_I_care\" : # do stuff with payload","title":"How to implement notifications in my community signals"},{"location":"brain/neurons/sleep/","text":"This neuron sleeps the system for a given time in seconds. Input parameters parameter required default choices comment seconds YES The number of seconds to sleep. Returned values No returned values Synapses example Simple example : - name : \"run-simple-sleep\" signals : - order : \"Wait for me \" neurons : - sleep : seconds : 60","title":"sleep"},{"location":"brain/neurons/sleep/#input-parameters","text":"parameter required default choices comment seconds YES The number of seconds to sleep.","title":"Input parameters"},{"location":"brain/neurons/sleep/#returned-values","text":"No returned values","title":"Returned values"},{"location":"brain/neurons/sleep/#synapses-example","text":"Simple example : - name : \"run-simple-sleep\" signals : - order : \"Wait for me \" neurons : - sleep : seconds : 60","title":"Synapses example"},{"location":"brain/neurons/systemdate/","text":"Give the current time from the system where Kalliope is installed. Return a dict of parameters that can be used in a template. Input parameters None Returned values name description type sample hours Hour (24-hour clock) as a decimal number [00,23]. string 22 minutes Minute as a decimal number [00,59]. string 54 weekday Weekday as a decimal number [0(Sunday),6]. string 4 month Month as a decimal number [01,12]. string 4 day_month Day of the month as a decimal number [01,31]. string 12 year Year with century as a decimal number string 2016 Synapses example Simple synapse that give the current time with only hours and minutes - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : say_template : - \"It' {{ hours }} hours and {{ minutes }} minutes\" Synapse that give complete date and time with a template file. - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : file_template : en_systemdate_template_example.j2 Templates example This template will transcribe received numbers from the neuron into natural language \"It's {{ hours }} hours and {{ minutes }} minutes This template, which it must be placed in a file_template, will give the complete date and time. { % set day_of_week = { \"0\" : \"sunday\" , \"1\" : \"monday\" , \"2\" : \"tuesday\" , \"3\" : \"wednesday\" , \"4\" : \"thursday\" , \"5\" : \"friday\" , \"6\" : \"saturday\" } [ weekday ] | default ( \"\" ) -% } { % set month_word = { \"1\" : \"january\" , \"2\" : \"february\" , \"3\" : \"march\" , \"4\" : \"april\" , \"5\" : \"may\" , \"6\" : \"june\" , \"7\" : \"july\" , \"8\" : \"august\" , \"9\" : \"september\" , \"10\" : \"october\" , \"11\" : \"november\" , \"12\" : \"december\" } [ month ] | default ( \"\" ) -% } { % set day_month_formated = { \"1\" : \"first\" , \"2\" : \"second\" , \"3\" : \"third\" , \"4\" : \"fourth\" , \"5\" : \"fifth\" , \"6\" : \"sixth\" , \"7\" : \"seventh\" , \"8\" : \"eighth\" , \"9\" : \"ninth\" , \"10\" : \"tenth\" , \"11\" : \"eleventh\" , \"12\" : \"twelfth\" , \"13\" : \"thirteenth\" , \"14\" : \"fourteenth\" , \"15\" : \"fifteenth\" , \"16\" : \"sixteenth\" , \"17\" : \"seventeenth\" , \"18\" : \"eighteenth\" , \"19\" : \"nineteenth\" , \"20\" : \"twentieth\" , \"21\" : \"twenty-first\" , \"22\" : \"twenty-second\" , \"23\" : \"twenty-third\" , \"24\" : \"twenty-fourth\" , \"25\" : \"twenty-fifth\" , \"26\" : \"twenty-sixth\" , \"27\" : \"twenty-seventh\" , \"28\" : \"twenty-eighth\" , \"29\" : \"twenty-ninth\" , \"30\" : \"thirtieth\" , \"31\" : \"thirty-first\" , } [ day_month ] | default ( \"\" ) -% } It ' {{ hours }} hours and {{ minutes }} minutes . We are the {{ day_of_week }} {{ month_word }} the {{ day_month_formated }} {{ year }} Notes Note: As the neuron is based on the local system date, this last must be well configured. A good practice is the installation and configuration of a NTP client to synchronize the time on your Linux system with a centralized NTP server.","title":"systemdate"},{"location":"brain/neurons/systemdate/#input-parameters","text":"None","title":"Input parameters"},{"location":"brain/neurons/systemdate/#returned-values","text":"name description type sample hours Hour (24-hour clock) as a decimal number [00,23]. string 22 minutes Minute as a decimal number [00,59]. string 54 weekday Weekday as a decimal number [0(Sunday),6]. string 4 month Month as a decimal number [01,12]. string 4 day_month Day of the month as a decimal number [01,31]. string 12 year Year with century as a decimal number string 2016","title":"Returned values"},{"location":"brain/neurons/systemdate/#synapses-example","text":"Simple synapse that give the current time with only hours and minutes - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : say_template : - \"It' {{ hours }} hours and {{ minutes }} minutes\" Synapse that give complete date and time with a template file. - name : \"time\" signals : - order : \"what time is it\" neurons : - systemdate : file_template : en_systemdate_template_example.j2","title":"Synapses example"},{"location":"brain/neurons/systemdate/#templates-example","text":"This template will transcribe received numbers from the neuron into natural language \"It's {{ hours }} hours and {{ minutes }} minutes This template, which it must be placed in a file_template, will give the complete date and time. { % set day_of_week = { \"0\" : \"sunday\" , \"1\" : \"monday\" , \"2\" : \"tuesday\" , \"3\" : \"wednesday\" , \"4\" : \"thursday\" , \"5\" : \"friday\" , \"6\" : \"saturday\" } [ weekday ] | default ( \"\" ) -% } { % set month_word = { \"1\" : \"january\" , \"2\" : \"february\" , \"3\" : \"march\" , \"4\" : \"april\" , \"5\" : \"may\" , \"6\" : \"june\" , \"7\" : \"july\" , \"8\" : \"august\" , \"9\" : \"september\" , \"10\" : \"october\" , \"11\" : \"november\" , \"12\" : \"december\" } [ month ] | default ( \"\" ) -% } { % set day_month_formated = { \"1\" : \"first\" , \"2\" : \"second\" , \"3\" : \"third\" , \"4\" : \"fourth\" , \"5\" : \"fifth\" , \"6\" : \"sixth\" , \"7\" : \"seventh\" , \"8\" : \"eighth\" , \"9\" : \"ninth\" , \"10\" : \"tenth\" , \"11\" : \"eleventh\" , \"12\" : \"twelfth\" , \"13\" : \"thirteenth\" , \"14\" : \"fourteenth\" , \"15\" : \"fifteenth\" , \"16\" : \"sixteenth\" , \"17\" : \"seventeenth\" , \"18\" : \"eighteenth\" , \"19\" : \"nineteenth\" , \"20\" : \"twentieth\" , \"21\" : \"twenty-first\" , \"22\" : \"twenty-second\" , \"23\" : \"twenty-third\" , \"24\" : \"twenty-fourth\" , \"25\" : \"twenty-fifth\" , \"26\" : \"twenty-sixth\" , \"27\" : \"twenty-seventh\" , \"28\" : \"twenty-eighth\" , \"29\" : \"twenty-ninth\" , \"30\" : \"thirtieth\" , \"31\" : \"thirty-first\" , } [ day_month ] | default ( \"\" ) -% } It ' {{ hours }} hours and {{ minutes }} minutes . We are the {{ day_of_week }} {{ month_word }} the {{ day_month_formated }} {{ year }}","title":"Templates example"},{"location":"brain/neurons/systemdate/#notes","text":"Note: As the neuron is based on the local system date, this last must be well configured. A good practice is the installation and configuration of a NTP client to synchronize the time on your Linux system with a centralized NTP server.","title":"Notes"},{"location":"brain/neurons/uri/","text":"Interacts with HTTP and HTTPS web services. Input parameters parameter required default choices comment url YES HTTP or HTTPS URL in the form (http headers NO E.g: Content-Type: 'application/json' Add custom HTTP headers to a request in the format of a YAML hash data NO E.g: \"{\\\"title\\\": \\\"foo\\\"}\" JSON data to send to the server. You must escape quotes in the YAML file. data_from_file NO E.g: /path/to/my/file.json JSON data loaded from a file. method NO GET GET, POST, DELETE, PUT, HEAD, PATCH, OPTIONS The HTTP method of the request or response. It MUST be uppercase. user NO username for the basic authentication. password NO passwordfor the basic authentication. timeout NO The socket level timeout in seconds. Must be an integer without quotes Returned values Name Description Type sample status_code Numeric, HTTP status code that signifies success of the request. int 200 content The body content of the server answer. May be JSON serialized and usable in a template string {\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1} response_header Response header from the server. dict {'Date': 'Sat, 19 Nov 2016 11:17:56 GMT', 'Content-Length': '192', 'Content-Type': 'text/html'} Synapses example Simple call to a server. The default method is GET - name : \"test-get-url\" signals : - order : \"test-get-url\" neurons : - uri : url : \"http://host.domain/get/1\" A simple call with authentication - name : \"test-get-url-with-auth\" signals : - order : \"test-get-url-with-auth\" neurons : - uri : url : \"http://host.domain/get/1\" user : \"admin\" password : \"secret\" A simple post with data inside the url - name : \"test-post-url-with-auth\" signals : - order : \"test-post-url-with-data\" neurons : - uri : url : \"http://host.domain/login?email=user@host.domain&password=foobar123\" method : POST A post with json data. Note that we need to escape quotes from the payload. - name : \"test-post-url\" signals : - order : \"test-post-url\" neurons : - uri : url : \"http://host.domain/posts\" method : POST headers : Content-Type : 'application/json' data : \"{\\\"id\\\": 1,\\\"title\\\": \\\"foo\\\", \\\"body\\\": \\\"bar\\\", \\\"userId\\\": 1}\" A post with json data imported from a file and a custom header. - name : \"test-post-url\" signals : - order : \"test-post-url\" neurons : - uri : url : \"http://host.domain/posts\" method : POST headers : Content-Type : 'application/json' user-agent : 'my-app/0.0.1' data_from_file : \"/path/to/my/payload.json\" And the payload.json would be (note that we don't need to escape any character): { \"title\" : \"foo\" , \"body\" : \"bar\" , \"userId\" : 1 } A simple call to a deletion. Here we also ask Kalliope to tell use if request was a success through a template, depending on the returned status code. - name : \"test-delete-url\" signals : - order : \"test-delete-url\" neurons : - uri : url : \"http://host.domain/posts/1\" method : DELETE say_template : - \"{% if status_code==201 %}delete complete{% else %}fail to delete{% endif %}\" Call to an URL to get a resource and make kalliope speaking out loud a value of returned content. Here, we ask the server to return us the user with ID number 42. We know that the server will return a dict like the following { \"id\" : 42 , \"name\" : \"Leanne Graham\" , \"username\" : \"Bret\" , \"email\" : \"Sincere@april.biz\" , \"phone\" : \"1-770-736-8031 x56442\" , \"website\" : \"hildegard.org\" , \"company\" : { \"name\" : \"Romaguera-Crona\" , \"catchPhrase\" : \"Multi-layered client-server neural-net\" , \"bs\" : \"harness real-time e-markets\" } } Here is the synapse we would use to make Kalliope speak out loud the name of the user and the name of his company - name : \"test-get-url-with-template\" signals : - order : \"test-get-url-with-template\" neurons : - uri : url : \"http://host.domain/users/42\" say_template : - \"The user name is {{ content.name }} and his company's name is {{ content.company.name }}\" Templates example The following template will make kalliope read the content of the received json variable \"title\" from the remote server. The title is {{ content.title }} The following template will make Kalliope say if the request has been made with success or not depending on the returned status code. {% if status_code == 200 %} request complete {% else %} request failled {% endif %} Notes When the parameter data is used, you need to escape character that could be interpreted by the YAML syntax.","title":"uri"},{"location":"brain/neurons/uri/#input-parameters","text":"parameter required default choices comment url YES HTTP or HTTPS URL in the form (http headers NO E.g: Content-Type: 'application/json' Add custom HTTP headers to a request in the format of a YAML hash data NO E.g: \"{\\\"title\\\": \\\"foo\\\"}\" JSON data to send to the server. You must escape quotes in the YAML file. data_from_file NO E.g: /path/to/my/file.json JSON data loaded from a file. method NO GET GET, POST, DELETE, PUT, HEAD, PATCH, OPTIONS The HTTP method of the request or response. It MUST be uppercase. user NO username for the basic authentication. password NO passwordfor the basic authentication. timeout NO The socket level timeout in seconds. Must be an integer without quotes","title":"Input parameters"},{"location":"brain/neurons/uri/#returned-values","text":"Name Description Type sample status_code Numeric, HTTP status code that signifies success of the request. int 200 content The body content of the server answer. May be JSON serialized and usable in a template string {\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1} response_header Response header from the server. dict {'Date': 'Sat, 19 Nov 2016 11:17:56 GMT', 'Content-Length': '192', 'Content-Type': 'text/html'}","title":"Returned values"},{"location":"brain/neurons/uri/#synapses-example","text":"Simple call to a server. The default method is GET - name : \"test-get-url\" signals : - order : \"test-get-url\" neurons : - uri : url : \"http://host.domain/get/1\" A simple call with authentication - name : \"test-get-url-with-auth\" signals : - order : \"test-get-url-with-auth\" neurons : - uri : url : \"http://host.domain/get/1\" user : \"admin\" password : \"secret\" A simple post with data inside the url - name : \"test-post-url-with-auth\" signals : - order : \"test-post-url-with-data\" neurons : - uri : url : \"http://host.domain/login?email=user@host.domain&password=foobar123\" method : POST A post with json data. Note that we need to escape quotes from the payload. - name : \"test-post-url\" signals : - order : \"test-post-url\" neurons : - uri : url : \"http://host.domain/posts\" method : POST headers : Content-Type : 'application/json' data : \"{\\\"id\\\": 1,\\\"title\\\": \\\"foo\\\", \\\"body\\\": \\\"bar\\\", \\\"userId\\\": 1}\" A post with json data imported from a file and a custom header. - name : \"test-post-url\" signals : - order : \"test-post-url\" neurons : - uri : url : \"http://host.domain/posts\" method : POST headers : Content-Type : 'application/json' user-agent : 'my-app/0.0.1' data_from_file : \"/path/to/my/payload.json\" And the payload.json would be (note that we don't need to escape any character): { \"title\" : \"foo\" , \"body\" : \"bar\" , \"userId\" : 1 } A simple call to a deletion. Here we also ask Kalliope to tell use if request was a success through a template, depending on the returned status code. - name : \"test-delete-url\" signals : - order : \"test-delete-url\" neurons : - uri : url : \"http://host.domain/posts/1\" method : DELETE say_template : - \"{% if status_code==201 %}delete complete{% else %}fail to delete{% endif %}\" Call to an URL to get a resource and make kalliope speaking out loud a value of returned content. Here, we ask the server to return us the user with ID number 42. We know that the server will return a dict like the following { \"id\" : 42 , \"name\" : \"Leanne Graham\" , \"username\" : \"Bret\" , \"email\" : \"Sincere@april.biz\" , \"phone\" : \"1-770-736-8031 x56442\" , \"website\" : \"hildegard.org\" , \"company\" : { \"name\" : \"Romaguera-Crona\" , \"catchPhrase\" : \"Multi-layered client-server neural-net\" , \"bs\" : \"harness real-time e-markets\" } } Here is the synapse we would use to make Kalliope speak out loud the name of the user and the name of his company - name : \"test-get-url-with-template\" signals : - order : \"test-get-url-with-template\" neurons : - uri : url : \"http://host.domain/users/42\" say_template : - \"The user name is {{ content.name }} and his company's name is {{ content.company.name }}\"","title":"Synapses example"},{"location":"brain/neurons/uri/#templates-example","text":"The following template will make kalliope read the content of the received json variable \"title\" from the remote server. The title is {{ content.title }} The following template will make Kalliope say if the request has been made with success or not depending on the returned status code. {% if status_code == 200 %} request complete {% else %} request failled {% endif %}","title":"Templates example"},{"location":"brain/neurons/uri/#notes","text":"When the parameter data is used, you need to escape character that could be interpreted by the YAML syntax.","title":"Notes"},{"location":"brain/neurons/volume/","text":"Update the volume Input parameters parameter required type default choices comment level yes int None The volume level to set or increase or decrease depending of the selected 'action' action no string set set,raise,lower The action to apply to the volume Action type: set: set the 'level' value as new volume level raise: increase the current volume level with the value provided in 'level' lower: decrease the current volume level with the value provided in 'level' Returned values name description type sample asked_level The level variable sent to the neuron int 22 asked_action The action variable sent to the neuron string set current_level The current volume level on the system int 50 Synapses example Set the volume to 50% - name : \"set-volume\" signals : - order : \"set the volume to 50\" neurons : - volume : level : \"50\" Set the volume dynamically - name : \"set-volume-dynamic\" signals : - order : \"set the volume to {{ volume }}\" neurons : - volume : level : \"{{ volume }}\" Note: Depending of your STT engine, the caught 'volume' variable can be a string. For example \"twenty\" instead of \"20\". Raise the volume - name : \"raise-volume\" signals : - order : \"raise the volume\" neurons : - volume : level : \"10\" action : \"raise\" Reduce the volume - name : \"lower-volume\" signals : - order : \"reduce the volume\" neurons : - volume : level : \"10\" action : \"lower\"","title":"volume"},{"location":"brain/neurons/volume/#input-parameters","text":"parameter required type default choices comment level yes int None The volume level to set or increase or decrease depending of the selected 'action' action no string set set,raise,lower The action to apply to the volume Action type: set: set the 'level' value as new volume level raise: increase the current volume level with the value provided in 'level' lower: decrease the current volume level with the value provided in 'level'","title":"Input parameters"},{"location":"brain/neurons/volume/#returned-values","text":"name description type sample asked_level The level variable sent to the neuron int 22 asked_action The action variable sent to the neuron string set current_level The current volume level on the system int 50","title":"Returned values"},{"location":"brain/neurons/volume/#synapses-example","text":"Set the volume to 50% - name : \"set-volume\" signals : - order : \"set the volume to 50\" neurons : - volume : level : \"50\" Set the volume dynamically - name : \"set-volume-dynamic\" signals : - order : \"set the volume to {{ volume }}\" neurons : - volume : level : \"{{ volume }}\" Note: Depending of your STT engine, the caught 'volume' variable can be a string. For example \"twenty\" instead of \"20\". Raise the volume - name : \"raise-volume\" signals : - order : \"raise the volume\" neurons : - volume : level : \"10\" action : \"raise\" Reduce the volume - name : \"lower-volume\" signals : - order : \"reduce the volume\" neurons : - volume : level : \"10\" action : \"lower\"","title":"Synapses example"},{"location":"brain/signals/event/","text":"Event An event is a way to schedule the launching of a synapse periodically at fixed times, dates, or intervals. The event system is based on APScheduler which it is itself based on Linux crontab . When you declare an event in the signal, Kalliope will schedule the launching of the target synapse. The syntax of an event declaration in a synapse is the following signals : - event : parameter1 : \"value1\" parameter2 : \"value2\" For example, if we want Kalliope to run the synapse every day a 8:30, the event will be declared like this: - event : hour : \"8\" minute : \"30\" Input parameters List of available parameter: parameter required default choices comment year no * 4 digit E.g: 2016 month no * month (1-12) day no * day of the (1-31) week no * ISO week (1-53) day_of_week no * number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun) 6=Sunday hour no * hour (0-23) minute no * minute (0-59) second no * second (0-59) Note: You must set at least one parameter from the list of parameter Expressions can be used in value of each parameter. Multiple expression can be given in a single field, separated by commas. Expression Field Description * any Fire on every value */a any Fire every a values, starting from the minimum a-b any Fire on any value within the a-b range (a must be smaller than b) a-b/c any Fire every c values within the a-b range xrd y day Fire on the x -rd occurrence of weekday y within the month last x day Fire on the last occurrence of weekday x within the month last x day Fire on the last day within the month x,y,z day Fire on any matching expression; can combine any number of any of the above expressions Synapses example Web clock radio Let's make a complete example. We want Kalliope to wake us up each morning of working day (Monday to friday) at 7:30 AM and: - Wish us good morning - Give us the time - Play our favourite web radio The synapse in the brain would be - name : \"wake-up\" signals : - event : hour : \"7\" minute : \"30\" day_of_week : \"1,2,3,4,5\" neurons : - say : message : - \"Good morning\" - systemdate : say_template : - \"It is {{ hours }} hours and {{ minutes }} minutes\" - shell : cmd : \"mplayer http://192.99.17.12:6410/\" async : True After setting up an event, you must restart Kalliope python kalliope.py start If the syntax is ok, Kalliope will show you each synapse that it has loaded in the crontab Add synapse name \"wake-up\" to the scheduler : cron [ day_of_week = '1,2,3,4,5' , hour = '7' , minute = '30' ] Event loaded That's it, the synapse is now scheduled and will be started automatically. Make Kalliope say something on the third Friday of June, July, August, November and December at 00:00, 01:00, 02:00 and 03:00 - name : \"wake-up\" signals : - event : day : \"3rd fri\" month : \"6-8,11-12\" hour : \"0-3\" neurons : - say : message : - \"This is a schedulled sentence\"","title":"event"},{"location":"brain/signals/event/#event","text":"An event is a way to schedule the launching of a synapse periodically at fixed times, dates, or intervals. The event system is based on APScheduler which it is itself based on Linux crontab . When you declare an event in the signal, Kalliope will schedule the launching of the target synapse. The syntax of an event declaration in a synapse is the following signals : - event : parameter1 : \"value1\" parameter2 : \"value2\" For example, if we want Kalliope to run the synapse every day a 8:30, the event will be declared like this: - event : hour : \"8\" minute : \"30\"","title":"Event"},{"location":"brain/signals/event/#input-parameters","text":"List of available parameter: parameter required default choices comment year no * 4 digit E.g: 2016 month no * month (1-12) day no * day of the (1-31) week no * ISO week (1-53) day_of_week no * number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun) 6=Sunday hour no * hour (0-23) minute no * minute (0-59) second no * second (0-59) Note: You must set at least one parameter from the list of parameter Expressions can be used in value of each parameter. Multiple expression can be given in a single field, separated by commas. Expression Field Description * any Fire on every value */a any Fire every a values, starting from the minimum a-b any Fire on any value within the a-b range (a must be smaller than b) a-b/c any Fire every c values within the a-b range xrd y day Fire on the x -rd occurrence of weekday y within the month last x day Fire on the last occurrence of weekday x within the month last x day Fire on the last day within the month x,y,z day Fire on any matching expression; can combine any number of any of the above expressions","title":"Input parameters"},{"location":"brain/signals/event/#synapses-example","text":"Web clock radio Let's make a complete example. We want Kalliope to wake us up each morning of working day (Monday to friday) at 7:30 AM and: - Wish us good morning - Give us the time - Play our favourite web radio The synapse in the brain would be - name : \"wake-up\" signals : - event : hour : \"7\" minute : \"30\" day_of_week : \"1,2,3,4,5\" neurons : - say : message : - \"Good morning\" - systemdate : say_template : - \"It is {{ hours }} hours and {{ minutes }} minutes\" - shell : cmd : \"mplayer http://192.99.17.12:6410/\" async : True After setting up an event, you must restart Kalliope python kalliope.py start If the syntax is ok, Kalliope will show you each synapse that it has loaded in the crontab Add synapse name \"wake-up\" to the scheduler : cron [ day_of_week = '1,2,3,4,5' , hour = '7' , minute = '30' ] Event loaded That's it, the synapse is now scheduled and will be started automatically. Make Kalliope say something on the third Friday of June, July, August, November and December at 00:00, 01:00, 02:00 and 03:00 - name : \"wake-up\" signals : - event : day : \"3rd fri\" month : \"6-8,11-12\" hour : \"0-3\" neurons : - say : message : - \"This is a schedulled sentence\"","title":"Synapses example"},{"location":"brain/signals/geolocation/","text":"Geolocation is a way to launch a synapse when ENTERING a geolocated zone. As Kalliope does not manage its own geolocation, this signal has been designed in view to be implemented from external clients (smartphones, watches, embedded devices, etc). The syntax of a geolocation declaration in a synapse is the following. signals : - geolocation : latitude : \"46.204391\" longitude : \"6.143158\" radius : \"10000\" For example, if we want Kalliope to run the synapse when entering in Geneva - geolocation : latitude : \"46.204391\" longitude : \"6.143158\" radius : \"1000\" Input parameters Parameters are keyword you can use to build your geolocation List of available parameter: parameter required default choices comment latitude yes 46.204391 longitude yes 6.143158 radius yes 1 (meters) Synapses example Geolocation clock radio Let's make a complete example. We want to Kalliope to : - welcome when coming back home - Play our favourite web radio The synapse in the brain would be: - name : \"geolocation-welcome-radio\" signals : - geolocation : latitude : \"46.204391\" longitude : \"6.143158\" radius : \"10\" neurons : - say : message : - \"Welcome Home!\" - shell : cmd : \"mplayer http://192.99.17.12:6410/\" async : True After setting up a geolocation signal, you must restart Kalliope python kalliope.py start If the syntax is NOT ok, Kalliope will raise an error and log a message: [ Geolocation ] The signal is missing mandatory parameters , check documentation Note Note: this feature is supported by the Kalliope official smartphone application.","title":"geolocation"},{"location":"brain/signals/geolocation/#input-parameters","text":"Parameters are keyword you can use to build your geolocation List of available parameter: parameter required default choices comment latitude yes 46.204391 longitude yes 6.143158 radius yes 1 (meters)","title":"Input parameters"},{"location":"brain/signals/geolocation/#synapses-example","text":"","title":"Synapses example"},{"location":"brain/signals/geolocation/#geolocation-clock-radio","text":"Let's make a complete example. We want to Kalliope to : - welcome when coming back home - Play our favourite web radio The synapse in the brain would be: - name : \"geolocation-welcome-radio\" signals : - geolocation : latitude : \"46.204391\" longitude : \"6.143158\" radius : \"10\" neurons : - say : message : - \"Welcome Home!\" - shell : cmd : \"mplayer http://192.99.17.12:6410/\" async : True After setting up a geolocation signal, you must restart Kalliope python kalliope.py start If the syntax is NOT ok, Kalliope will raise an error and log a message: [ Geolocation ] The signal is missing mandatory parameters , check documentation","title":"Geolocation clock radio"},{"location":"brain/signals/geolocation/#note","text":"Note: this feature is supported by the Kalliope official smartphone application.","title":"Note"},{"location":"brain/signals/mqtt_subscriber/","text":"Launch synapses when receiving a message on a topic from a MQTT messaging broker server. MQTT is a Client Server publish/subscribe messaging transport protocol. It is mostly used in communication in Machine to Machine (M2M) and Internet of Things (IoT) contexts. The main concept is that a client will publish a message attached to a \"topic\" to a server called a \"broker\", and other clients which are interested by the topic will subscribe to it. The broker filters all incoming messages and distributes them accordingly. Input parameters parameter required default choices comment broker_ip YES IP address of the MQTT broker server topic YES topic name to subscribe is_json NO FALSE True, False if true, all received message will be converted into a dict broker_port NO 1883 Port of the broker. By default 1883. 8883 when TLS is activated. client_id NO kalliope The client identifier is an identifier of each MQTT client and used by the broker server for identifying the client. Should be unique per broker keepalive NO 60 A time interval in seconds where the clients commits to by sending regular PING Request messages to the broker. username NO username for authenticating the client password NO password for authenticating the client protocol NO MQTTv311 MQTTv31, MQTTv311 Can be either MQTTv31 or MQTTv311 ca_cert NO Path to the remote server CA certificate used for securing the transport certfile NO Path to the client certificate file used for authentication keyfile NO Path to the client key file attached to the client certificate tls_insecure NO FALSE True, False Set the verification of the server hostname in the server certificate Values sent to the synapse Name Description Type sample mqtt_subscriber_message message received from the broker string/dict \"on\", \"off\", {\"temperature\": \"25\", \"humidity\": \"30\"} Synapses example Topic with plain text message The topic send the status of a light. The received message would be \"on\" or off\" - name : \"test-mqtt-1\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic1\" neurons : - say : message : - \"The light is now {{ mqtt_subscriber_message }}\" Kalliope output example: The light is now on Topic with json message In this example, the topic send a json payload that contain multiple information. E.g: {\"temperature\": \"25\", \"humidity\": \"30\"} - name : \"test-mqtt-2\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic2\" is_json : True neurons : - say : message : - \"The temperature is now {{ mqtt_subscriber_message['temperature'] }}, humidity {{ mqtt_subscriber_message['humidity'] percents }}\" Kalliope output example: The temperature is now 25 degrees, humidity 30% The broker require authentication Password authentication - name : \"test-mqtt-3\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic 3\" username : \"guest\" password : \"guest\" neurons : - say : message : - \"Message received on topic 3\" It's better to use TLS when using password authentication for securing the transport - name : \"test-mqtt-4\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" broker_port : 8883 topic : \"topic 4\" username : \"guest\" password : \"guest\" ca_cert : \"/path/to/ca.cert\" tls_insecure : True neurons : - say : message : - \"Message received on topic 3\" Authentication based on client certificate - name : \"test-mqtt-5\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" broker_port : 8883 topic : \"topic 5\" ca_cert : \"/path/to/ca.cert\" tls_insecure : True certfile : \"/path/to/client.crt\" keyfile : \"/path/to/client.key\" neurons : - say : message : - \"Message received on topic 5\" Notes When you want to use the same broker within your multiple synapses in your brain, you must keep in mind that the configuration must be the same It means that you cannot declare a synapse that use a broker ip with TLS activated, and another synapse that use the same broker ip but without TLS activated. When you declare a \"broker_ip\", a unique object is created once, then topic are added following all synapses On the other hand, you can subscribe to multiple topic that use json or not within the same broker ip. - name : \"synapse-mqtt-1\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic1\" is_json : False neurons : - say : message : - \"I'm started when message on topic 1\" - name : \"synapse-mqtt-2\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic2\" is_json : True neurons : - say : message : - \"I'm started when message on topic 2\" Test with rabbitmq-server broker This part can help you to configure your brain by sending message to a local broker Install rabbitmq sudo apt-get install rabbitmq-server mosquitto-clients Enable mqtt plugin sudo rabbitmq-plugins enable rabbitmq_mqtt sudo systemctl restart rabbitmq-server Active web ui (optional) sudo rabbitmq-plugins enable rabbitmq_management Get the cli and make it available to use wget http://127.0.0.1:15672/cli/rabbitmqadmin sudo mv rabbitmqadmin /etc/rabbitmqadmin sudo chmod 755 /etc/rabbitmqadmin Create admin account (when UI installed) sudo rabbitmqctl add_user admin p@ssw0rd sudo rabbitmqctl set_user_tags admin administrator sudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\" Publish message from CLI Publish a plain text message mosquitto_pub -t 'my_topic' -m 'message' Test publish a json message mosquitto_pub -t 'my_topic' -m '{\"test\" : \"message\"}' Add TLS to rabbitmq Create root CA Install openssl apt-get install openssl Create PKI structure mkdir testca cd testca echo 01 > serial Create private key and CA certificate openssl req -out ca.key -new -x509 Generate server/key pair openssl genrsa -out server.key 2048 openssl req -key server.key -new -out server.req openssl x509 -req -in server.req -CA ca.crt -CAkey privkey.pem -CAserial serial -out server.crt Create client certificate/key pair Create private key openssl genrsa -out client.key 2048 Create a certificate request openssl req -key client.key -new -out client.req Sign the client request with the CA openssl x509 -req -in client.req -CA ca.cert -CAkey privkey.pem -CAserial serial -out client.crt Update rabbitmq configuration Edit (or create if the file is not present) a config file /etc/rabbitmq/rabbitmq.config [ {rabbit, [ {ssl_listeners, [5671]}, {ssl_options, [{cacertfile,\"/path/to/ca.cert\"}, {certfile,\"/path/to/server.crt\"}, {keyfile,\"/path/to/server.key\"}, {verify,verify_peer}, {fail_if_no_peer_cert,false}]} ]}, {rabbitmq_mqtt, [ {ssl_listeners, [8883]}, {tcp_listeners, [1883]} ]} ]. Restart rabbitmq server to take care of changes sudo systemctl restart rabbitmq-server","title":"mqtt_subscriber"},{"location":"brain/signals/mqtt_subscriber/#input-parameters","text":"parameter required default choices comment broker_ip YES IP address of the MQTT broker server topic YES topic name to subscribe is_json NO FALSE True, False if true, all received message will be converted into a dict broker_port NO 1883 Port of the broker. By default 1883. 8883 when TLS is activated. client_id NO kalliope The client identifier is an identifier of each MQTT client and used by the broker server for identifying the client. Should be unique per broker keepalive NO 60 A time interval in seconds where the clients commits to by sending regular PING Request messages to the broker. username NO username for authenticating the client password NO password for authenticating the client protocol NO MQTTv311 MQTTv31, MQTTv311 Can be either MQTTv31 or MQTTv311 ca_cert NO Path to the remote server CA certificate used for securing the transport certfile NO Path to the client certificate file used for authentication keyfile NO Path to the client key file attached to the client certificate tls_insecure NO FALSE True, False Set the verification of the server hostname in the server certificate","title":"Input parameters"},{"location":"brain/signals/mqtt_subscriber/#values-sent-to-the-synapse","text":"Name Description Type sample mqtt_subscriber_message message received from the broker string/dict \"on\", \"off\", {\"temperature\": \"25\", \"humidity\": \"30\"}","title":"Values sent to the synapse"},{"location":"brain/signals/mqtt_subscriber/#synapses-example","text":"","title":"Synapses example"},{"location":"brain/signals/mqtt_subscriber/#topic-with-plain-text-message","text":"The topic send the status of a light. The received message would be \"on\" or off\" - name : \"test-mqtt-1\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic1\" neurons : - say : message : - \"The light is now {{ mqtt_subscriber_message }}\" Kalliope output example: The light is now on","title":"Topic with plain text message"},{"location":"brain/signals/mqtt_subscriber/#topic-with-json-message","text":"In this example, the topic send a json payload that contain multiple information. E.g: {\"temperature\": \"25\", \"humidity\": \"30\"} - name : \"test-mqtt-2\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic2\" is_json : True neurons : - say : message : - \"The temperature is now {{ mqtt_subscriber_message['temperature'] }}, humidity {{ mqtt_subscriber_message['humidity'] percents }}\" Kalliope output example: The temperature is now 25 degrees, humidity 30%","title":"Topic with json message"},{"location":"brain/signals/mqtt_subscriber/#the-broker-require-authentication","text":"Password authentication - name : \"test-mqtt-3\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic 3\" username : \"guest\" password : \"guest\" neurons : - say : message : - \"Message received on topic 3\" It's better to use TLS when using password authentication for securing the transport - name : \"test-mqtt-4\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" broker_port : 8883 topic : \"topic 4\" username : \"guest\" password : \"guest\" ca_cert : \"/path/to/ca.cert\" tls_insecure : True neurons : - say : message : - \"Message received on topic 3\" Authentication based on client certificate - name : \"test-mqtt-5\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" broker_port : 8883 topic : \"topic 5\" ca_cert : \"/path/to/ca.cert\" tls_insecure : True certfile : \"/path/to/client.crt\" keyfile : \"/path/to/client.key\" neurons : - say : message : - \"Message received on topic 5\"","title":"The broker require authentication"},{"location":"brain/signals/mqtt_subscriber/#notes","text":"When you want to use the same broker within your multiple synapses in your brain, you must keep in mind that the configuration must be the same It means that you cannot declare a synapse that use a broker ip with TLS activated, and another synapse that use the same broker ip but without TLS activated. When you declare a \"broker_ip\", a unique object is created once, then topic are added following all synapses On the other hand, you can subscribe to multiple topic that use json or not within the same broker ip. - name : \"synapse-mqtt-1\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic1\" is_json : False neurons : - say : message : - \"I'm started when message on topic 1\" - name : \"synapse-mqtt-2\" signals : - mqtt_subscriber : broker_ip : \"127.0.0.1\" topic : \"topic2\" is_json : True neurons : - say : message : - \"I'm started when message on topic 2\"","title":"Notes"},{"location":"brain/signals/mqtt_subscriber/#test-with-rabbitmq-server-broker","text":"This part can help you to configure your brain by sending message to a local broker","title":"Test with rabbitmq-server broker"},{"location":"brain/signals/mqtt_subscriber/#install-rabbitmq","text":"sudo apt-get install rabbitmq-server mosquitto-clients Enable mqtt plugin sudo rabbitmq-plugins enable rabbitmq_mqtt sudo systemctl restart rabbitmq-server Active web ui (optional) sudo rabbitmq-plugins enable rabbitmq_management Get the cli and make it available to use wget http://127.0.0.1:15672/cli/rabbitmqadmin sudo mv rabbitmqadmin /etc/rabbitmqadmin sudo chmod 755 /etc/rabbitmqadmin Create admin account (when UI installed) sudo rabbitmqctl add_user admin p@ssw0rd sudo rabbitmqctl set_user_tags admin administrator sudo rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"","title":"Install rabbitmq"},{"location":"brain/signals/mqtt_subscriber/#publish-message-from-cli","text":"Publish a plain text message mosquitto_pub -t 'my_topic' -m 'message' Test publish a json message mosquitto_pub -t 'my_topic' -m '{\"test\" : \"message\"}'","title":"Publish message from CLI"},{"location":"brain/signals/mqtt_subscriber/#add-tls-to-rabbitmq","text":"","title":"Add TLS to rabbitmq"},{"location":"brain/signals/mqtt_subscriber/#create-root-ca","text":"Install openssl apt-get install openssl Create PKI structure mkdir testca cd testca echo 01 > serial Create private key and CA certificate openssl req -out ca.key -new -x509 Generate server/key pair openssl genrsa -out server.key 2048 openssl req -key server.key -new -out server.req openssl x509 -req -in server.req -CA ca.crt -CAkey privkey.pem -CAserial serial -out server.crt","title":"Create root CA"},{"location":"brain/signals/mqtt_subscriber/#create-client-certificatekey-pair","text":"Create private key openssl genrsa -out client.key 2048 Create a certificate request openssl req -key client.key -new -out client.req Sign the client request with the CA openssl x509 -req -in client.req -CA ca.cert -CAkey privkey.pem -CAserial serial -out client.crt","title":"Create client certificate/key pair"},{"location":"brain/signals/mqtt_subscriber/#update-rabbitmq-configuration","text":"Edit (or create if the file is not present) a config file /etc/rabbitmq/rabbitmq.config [ {rabbit, [ {ssl_listeners, [5671]}, {ssl_options, [{cacertfile,\"/path/to/ca.cert\"}, {certfile,\"/path/to/server.crt\"}, {keyfile,\"/path/to/server.key\"}, {verify,verify_peer}, {fail_if_no_peer_cert,false}]} ]}, {rabbitmq_mqtt, [ {ssl_listeners, [8883]}, {tcp_listeners, [1883]} ]} ]. Restart rabbitmq server to take care of changes sudo systemctl restart rabbitmq-server","title":"Update rabbitmq configuration"},{"location":"brain/signals/order/","text":"An order signal is a word, or a sentence caught by the microphone and processed by the STT engine. Input parameters parameter required default choices comment order YES The order is passed directly without any parameters Other way to write an order, with parameters: parameter required default choices comment text YES The order to match matching-type NO normal normal, strict, ordered-strict, not-contain Type of matching. See explanation bellow excluded-words only if not-contain The words which are present in the order to prevent other orders to be execute stt-correction NO List of words from the order to replace by other words stt-correction-file NO Same as stt-correction but load words from a YAML file Matching type You are not limited by the exact sentence you put in your order. Kalliope uses the matching, it means that you can pronounce the sentence which contains your order (so, can be much longer) and it will launch an attached task anyway. In this example, the task attached to order \"say hello\" will be launched even if you say \"say hello Kalliope\" \"Kalliope, say hello\" \"I want you to say hello\" \"i say goodbye you say hello\" \"whatever I say as long it contains say hello\" You must pay attention to define the orders as precise as possible. As Kalliope is based on matching, if you define your orders in different synapses too similiary, Kalliope risks to trigger more actions that you were expecting. For example, if you define two different synapses as shown below: - name : \"Say-hello\" signals : - order : \"say hello\" and - name : \"Say-something\" signals : - order : \"say\" When you will pronounce \"say hello\", it will trigger both synapses. To prevent this behavior, you can define a matching type for each order: normal : Will match if all words are present in the spoken order. strict : All word are present. No more word must be present in the spoken order. ordered-strict : All word are present, no more word and all word are in the same order as defined in the signal. not-contain : It will match only if all the words are present in the spoken order WITHOUT the excluded-words . Note: Words need to be lowercase - order : text : \"what is the weather\" matching-type : \"not-contain\" excluded-words : - \"in\" - \"at\" - \"on\" This way you can call for example \"whats the weather in Paris\" and the above synapse will not be execute. Order with arguments You can add one or more arguments to an order by adding bracket to the sentence. Syntax: signals : - order : \"<sentence> {{ arg_name }}\" - order : \"<sentence> {{ arg_name }} <sentence>\" - order : \"<sentence> {{ arg_name }} <sentence> {{ arg_name }}\" Example: signals : - order : \"I want to listen {{ artist_name }}\" - order : \"start the {{ episode_number }} episode\" - order : \"give me the weather at {{ location }} for {{ date }}\" Here, an example order would be speaking out loud the order: \"I want to listen Amy Winehouse\" In this example, both word \"Amy\" and \"Winehouse\" will be passed as an unique argument called artist_name to the neuron. If you want to send more than one argument, you must split your argument with a word that Kalliope will use to recognise the start and the end of each arguments. For example: \"give me the weather at {{ location }} for {{ date }}\" And the order would be: \"give me the weather at Paris for tomorrow\" And so, it will work too with: \"give me the weather at St-Pierre de Chartreuse for tomorrow\" See the input values section of the neuron documentation to know how to send arguments to a neuron. Important note: The following syntax cannot be used: \" {{ arg_name }} {{ arg_name2 }}\" as Kalliope cannot know when a block starts and when it finishes. stt-correction This option allow you to replace some words from the captured order by other word. Syntax: signals : - order : text : \"<sentence>\" stt-correction : - input : \"words to replace\" output : \"replacing words\" E.g - name : \"stt-correction-test\" signals : - order : text : \"this is my order\" stt-correction : - input : \"test\" output : \"order\" neurons : - debug : message : \"hello\" In this example, if you pronounce \"this is my test\", the word test will be translated into \"order\" and so the signal \"stt-correction-test\" would b triggered. This feature can be useful when working with numbers. For example, you know that your STT engine return all number as string and you need them as integer for your neurons. E.g: - name : \"mm-say\" signals : - order : text : \"this is my number {{ number }}\" stt-correction : - input : \"one\" output : 1 neurons : - debug : message : \"{{ number }}\" In this example, if you say \"this is my number one\", Kalliope will translate the word \"one\" into \"1\". stt-correction-file This option allow to set a list of corrections from a YAML file instead of writing them directly in the order. Syntax: signals : - order : text : \"<sentence>\" stt-correction-file : \"<path to yaml file>\" E.g - name : \"stt-correction-test\" signals : - order : text : \"this is my order\" stt-correction-file : \"my_stt_correction_file.yml\" neurons : - debug : message : \"hello\" Where my_stt_correction_file.yaml would looks like the following: - input : \"test\" output : \"order\" Use both stt-correction and stt-correction-file You can use both flag stt-correction and stt-correction-file in a synapse. This can be useful to set a correction file used as global file, and override input with stt-correction. Syntax: signals : - order : text : \"<sentence>\" stt-correction-file : \"<path to yaml file>\" stt-correction : - input : \"<sentence>\" output : \"<replacing sentence>\" For example, if you define a stt-correction-file with the content bellow: - input : \"bla\" output : \"this\" And a synapse like the following - name : \"stt-correction-test\" signals : - order : text : \"this is my order\" stt-correction-file : \"correction.yml\" stt-correction : - input : \"test\" output : \"order\" If you pronounce \"bla is my test\", both stt-correction-file and stt-correction will be used to fix the pronounced order, resulting \"this is my order\". Note: stt-correction has precedence over stt-correction-file . If an input is declared in stt-correction and in stt-correction-file , the output will be taken from the stt-correction option. Control from the Signal Neuron This signal can be updated on the fly from the Signals neuron . Skip the trigger Notification ID: \"skip_trigger\" Payload dict : parameter required default choices comment status YES TRUE, FALSE Set to True to skip the trigger Skip the trigger at the end of the synapse execution. Kalliope will listen for a new order directly without waiting for a trigger detection. The default flow of Kalliope is the following Me : \" Kalliope \" \u2192 hotword trigger \u2192 Me : \" do this \" \u2192 synapse launched \u2192 hotword trigger \u2192 Me : \" do that \" \u2192 synapse launched \u2192 \u2026 \" When switching the skip_trigger to True , the Kalliope workflow will be the following one until you switch back the skip_trigger to False : Me : \" Kalliope \" \u2192 hotword trigger \u2192 Me : \" do this \" \u2192 synapse launched \u2192 Me : \" do that \" \u2192 synapse launched \u2192 \u2026 \u2192 \" stop interactive trigger \" ( eg : Thanks kalliope ) Example synapses: Start skipping the trigger from a specific synapse - name : \"say-hello\" signals : - order : \"hello\" neurons : - say : message : \"hello sir\" - signals : notification : \"skip_trigger\" payload : status : \"True\" As we are escaping the trigger process, we need a synapse to break the loop. - name : \"stop-skip-trigger\" signals : - order : \"thanks kalliope\" neurons : - say : message : \"at your service\" - signals : notification : \"skip_trigger\" payload : status : \"False\" You can set it in a hook, so it will be activated after the first capture of the hotword from the trigger process. In this settings example, we will cal a synapse called start-skip-trigger on each trigger detection: hooks : on_start : \"on-start-synapse\" on_triggered : - \"on-triggered-synapse\" - \"start-skip-trigger\" The synapse in the brain looks like the following, of course we need to keep a stop-skip-trigger to be able to stop the loop anytime - name : \"start-skip-trigger\" signals : {} neurons : - signals : notification : \"skip_trigger\" payload : status : \"True\" - name : \"stop-skip-trigger\" signals : - order : \"thanks kalliope\" neurons : - say : message : \"at your service\" - signals : notification : \"skip_trigger\" payload : status : \"False\" Synapses example Normal order Syntax: signals : - order : \"<sentence>\" signals : - order : text : \"<sentence>\" matching-type : \"normal\" Example: signals : - order : \"please do this action\" signals : - order : text : \"please do this action\" matching-type : \"normal\" In this example, with a normal matching type, the synapse would be triggered if the user say: - please do this action - please do this action with more word - action this do please - action this do please with more word Strict order Syntax: signals : - order : text : \"<sentence>\" matching-type : \"strict\" Example: signals : - order : text : \"please do this action\" matching-type : \"strict\" In this example, with a strict matching type, the synapse would be triggered if the user say: - please do this action - action this do please Ordered strict order Syntax: signals : - order : text : \"<sentence>\" matching-type : \"ordered-strict\" Example: signals : - order : text : \"please do this action\" matching-type : \"ordered-strict\" In this example, with a strict matching type, the synapse would be triggered if the user say: - please do this action Notes Important note: SST engines can misunderstand what you say, or translate your sentence into text containing some spelling mistakes. For example, if you say \"Kalliope please do this\", the SST engine can return \"caliope please do this\". So, to be sure that your speaking order will be correctly caught and executed, we recommend you to test your STT engine by using the Kalliope GUI and check the returned text for the given order. Important note: STT engines don't know the context. Sometime they will return an unexpected word. For example, \"the operation to perform is 2 minus 2\" can return \"two\", \"too\", \"to\" or \"2\" in english. Important note: Kalliope will try to match the order in each synapse of its brain. So, if an order of one synapse is included in another order of another synapse, then both synapses tasks will be started by Kalliope. For example, you have \"test my umbrella\" in a synapse A and \"test\" in a synapse B. When you'll say \"test my umbrella\", both synapse A and B will be started by Kalliope. So keep in mind that the best practice is to use really different sentences with more than one word for your order.","title":"order"},{"location":"brain/signals/order/#input-parameters","text":"parameter required default choices comment order YES The order is passed directly without any parameters Other way to write an order, with parameters: parameter required default choices comment text YES The order to match matching-type NO normal normal, strict, ordered-strict, not-contain Type of matching. See explanation bellow excluded-words only if not-contain The words which are present in the order to prevent other orders to be execute stt-correction NO List of words from the order to replace by other words stt-correction-file NO Same as stt-correction but load words from a YAML file","title":"Input parameters"},{"location":"brain/signals/order/#matching-type","text":"You are not limited by the exact sentence you put in your order. Kalliope uses the matching, it means that you can pronounce the sentence which contains your order (so, can be much longer) and it will launch an attached task anyway. In this example, the task attached to order \"say hello\" will be launched even if you say \"say hello Kalliope\" \"Kalliope, say hello\" \"I want you to say hello\" \"i say goodbye you say hello\" \"whatever I say as long it contains say hello\" You must pay attention to define the orders as precise as possible. As Kalliope is based on matching, if you define your orders in different synapses too similiary, Kalliope risks to trigger more actions that you were expecting. For example, if you define two different synapses as shown below: - name : \"Say-hello\" signals : - order : \"say hello\" and - name : \"Say-something\" signals : - order : \"say\" When you will pronounce \"say hello\", it will trigger both synapses. To prevent this behavior, you can define a matching type for each order: normal : Will match if all words are present in the spoken order. strict : All word are present. No more word must be present in the spoken order. ordered-strict : All word are present, no more word and all word are in the same order as defined in the signal. not-contain : It will match only if all the words are present in the spoken order WITHOUT the excluded-words . Note: Words need to be lowercase - order : text : \"what is the weather\" matching-type : \"not-contain\" excluded-words : - \"in\" - \"at\" - \"on\" This way you can call for example \"whats the weather in Paris\" and the above synapse will not be execute.","title":"Matching type"},{"location":"brain/signals/order/#order-with-arguments","text":"You can add one or more arguments to an order by adding bracket to the sentence. Syntax: signals : - order : \"<sentence> {{ arg_name }}\" - order : \"<sentence> {{ arg_name }} <sentence>\" - order : \"<sentence> {{ arg_name }} <sentence> {{ arg_name }}\" Example: signals : - order : \"I want to listen {{ artist_name }}\" - order : \"start the {{ episode_number }} episode\" - order : \"give me the weather at {{ location }} for {{ date }}\" Here, an example order would be speaking out loud the order: \"I want to listen Amy Winehouse\" In this example, both word \"Amy\" and \"Winehouse\" will be passed as an unique argument called artist_name to the neuron. If you want to send more than one argument, you must split your argument with a word that Kalliope will use to recognise the start and the end of each arguments. For example: \"give me the weather at {{ location }} for {{ date }}\" And the order would be: \"give me the weather at Paris for tomorrow\" And so, it will work too with: \"give me the weather at St-Pierre de Chartreuse for tomorrow\" See the input values section of the neuron documentation to know how to send arguments to a neuron. Important note: The following syntax cannot be used: \" {{ arg_name }} {{ arg_name2 }}\" as Kalliope cannot know when a block starts and when it finishes.","title":"Order with arguments"},{"location":"brain/signals/order/#stt-correction","text":"This option allow you to replace some words from the captured order by other word. Syntax: signals : - order : text : \"<sentence>\" stt-correction : - input : \"words to replace\" output : \"replacing words\" E.g - name : \"stt-correction-test\" signals : - order : text : \"this is my order\" stt-correction : - input : \"test\" output : \"order\" neurons : - debug : message : \"hello\" In this example, if you pronounce \"this is my test\", the word test will be translated into \"order\" and so the signal \"stt-correction-test\" would b triggered. This feature can be useful when working with numbers. For example, you know that your STT engine return all number as string and you need them as integer for your neurons. E.g: - name : \"mm-say\" signals : - order : text : \"this is my number {{ number }}\" stt-correction : - input : \"one\" output : 1 neurons : - debug : message : \"{{ number }}\" In this example, if you say \"this is my number one\", Kalliope will translate the word \"one\" into \"1\".","title":"stt-correction"},{"location":"brain/signals/order/#stt-correction-file","text":"This option allow to set a list of corrections from a YAML file instead of writing them directly in the order. Syntax: signals : - order : text : \"<sentence>\" stt-correction-file : \"<path to yaml file>\" E.g - name : \"stt-correction-test\" signals : - order : text : \"this is my order\" stt-correction-file : \"my_stt_correction_file.yml\" neurons : - debug : message : \"hello\" Where my_stt_correction_file.yaml would looks like the following: - input : \"test\" output : \"order\"","title":"stt-correction-file"},{"location":"brain/signals/order/#use-both-stt-correction-and-stt-correction-file","text":"You can use both flag stt-correction and stt-correction-file in a synapse. This can be useful to set a correction file used as global file, and override input with stt-correction. Syntax: signals : - order : text : \"<sentence>\" stt-correction-file : \"<path to yaml file>\" stt-correction : - input : \"<sentence>\" output : \"<replacing sentence>\" For example, if you define a stt-correction-file with the content bellow: - input : \"bla\" output : \"this\" And a synapse like the following - name : \"stt-correction-test\" signals : - order : text : \"this is my order\" stt-correction-file : \"correction.yml\" stt-correction : - input : \"test\" output : \"order\" If you pronounce \"bla is my test\", both stt-correction-file and stt-correction will be used to fix the pronounced order, resulting \"this is my order\". Note: stt-correction has precedence over stt-correction-file . If an input is declared in stt-correction and in stt-correction-file , the output will be taken from the stt-correction option.","title":"Use both stt-correction and stt-correction-file"},{"location":"brain/signals/order/#control-from-the-signal-neuron","text":"This signal can be updated on the fly from the Signals neuron .","title":"Control from the Signal Neuron"},{"location":"brain/signals/order/#skip-the-trigger","text":"Notification ID: \"skip_trigger\" Payload dict : parameter required default choices comment status YES TRUE, FALSE Set to True to skip the trigger Skip the trigger at the end of the synapse execution. Kalliope will listen for a new order directly without waiting for a trigger detection. The default flow of Kalliope is the following Me : \" Kalliope \" \u2192 hotword trigger \u2192 Me : \" do this \" \u2192 synapse launched \u2192 hotword trigger \u2192 Me : \" do that \" \u2192 synapse launched \u2192 \u2026 \" When switching the skip_trigger to True , the Kalliope workflow will be the following one until you switch back the skip_trigger to False : Me : \" Kalliope \" \u2192 hotword trigger \u2192 Me : \" do this \" \u2192 synapse launched \u2192 Me : \" do that \" \u2192 synapse launched \u2192 \u2026 \u2192 \" stop interactive trigger \" ( eg : Thanks kalliope ) Example synapses: Start skipping the trigger from a specific synapse - name : \"say-hello\" signals : - order : \"hello\" neurons : - say : message : \"hello sir\" - signals : notification : \"skip_trigger\" payload : status : \"True\" As we are escaping the trigger process, we need a synapse to break the loop. - name : \"stop-skip-trigger\" signals : - order : \"thanks kalliope\" neurons : - say : message : \"at your service\" - signals : notification : \"skip_trigger\" payload : status : \"False\" You can set it in a hook, so it will be activated after the first capture of the hotword from the trigger process. In this settings example, we will cal a synapse called start-skip-trigger on each trigger detection: hooks : on_start : \"on-start-synapse\" on_triggered : - \"on-triggered-synapse\" - \"start-skip-trigger\" The synapse in the brain looks like the following, of course we need to keep a stop-skip-trigger to be able to stop the loop anytime - name : \"start-skip-trigger\" signals : {} neurons : - signals : notification : \"skip_trigger\" payload : status : \"True\" - name : \"stop-skip-trigger\" signals : - order : \"thanks kalliope\" neurons : - say : message : \"at your service\" - signals : notification : \"skip_trigger\" payload : status : \"False\"","title":"Skip the trigger"},{"location":"brain/signals/order/#synapses-example","text":"","title":"Synapses example"},{"location":"brain/signals/order/#normal-order","text":"Syntax: signals : - order : \"<sentence>\" signals : - order : text : \"<sentence>\" matching-type : \"normal\" Example: signals : - order : \"please do this action\" signals : - order : text : \"please do this action\" matching-type : \"normal\" In this example, with a normal matching type, the synapse would be triggered if the user say: - please do this action - please do this action with more word - action this do please - action this do please with more word","title":"Normal order"},{"location":"brain/signals/order/#strict-order","text":"Syntax: signals : - order : text : \"<sentence>\" matching-type : \"strict\" Example: signals : - order : text : \"please do this action\" matching-type : \"strict\" In this example, with a strict matching type, the synapse would be triggered if the user say: - please do this action - action this do please","title":"Strict order"},{"location":"brain/signals/order/#ordered-strict-order","text":"Syntax: signals : - order : text : \"<sentence>\" matching-type : \"ordered-strict\" Example: signals : - order : text : \"please do this action\" matching-type : \"ordered-strict\" In this example, with a strict matching type, the synapse would be triggered if the user say: - please do this action","title":"Ordered strict order"},{"location":"brain/signals/order/#notes","text":"Important note: SST engines can misunderstand what you say, or translate your sentence into text containing some spelling mistakes. For example, if you say \"Kalliope please do this\", the SST engine can return \"caliope please do this\". So, to be sure that your speaking order will be correctly caught and executed, we recommend you to test your STT engine by using the Kalliope GUI and check the returned text for the given order. Important note: STT engines don't know the context. Sometime they will return an unexpected word. For example, \"the operation to perform is 2 minus 2\" can return \"two\", \"too\", \"to\" or \"2\" in english. Important note: Kalliope will try to match the order in each synapse of its brain. So, if an order of one synapse is included in another order of another synapse, then both synapses tasks will be started by Kalliope. For example, you have \"test my umbrella\" in a synapse A and \"test\" in a synapse B. When you'll say \"test my umbrella\", both synapse A and B will be started by Kalliope. So keep in mind that the best practice is to use really different sentences with more than one word for your order.","title":"Notes"},{"location":"contribute/core/","text":"Contributing: core The community can contribute to the Core of Kalliope by providing some new features. How to contribute Fork it! Checkout the dev branch git checkout dev Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request in the dev branch Constraints Respect PEP 257 -- Docstring conventions. For each class or method add a description with summary, input parameter, returned parameter, type of parameter python def my_method(my_parameter): \"\"\" Description of he method :param my_parameter: description of he parameter :type my_parameter: str \"\"\" Respect PEP 8 -- Style Guide for Python Code We recommend the usage of an IDE like Pycharm Limitations The management of incoming variable from the signal order when they are numbers or float are not efficient . Because of the differences between the STTs outputs: some are returning word some numbers (two != 2). Because of the i18n, we are not able to know if a variable should be interpreted in english, french, spanish, etc ... (\"two\" != \"deux\" != \"dos\")","title":"Core"},{"location":"contribute/core/#contributing-core","text":"The community can contribute to the Core of Kalliope by providing some new features. How to contribute Fork it! Checkout the dev branch git checkout dev Create your feature branch: git checkout -b my-new-feature Commit your changes: git commit -am 'Add some feature' Push to the branch: git push origin my-new-feature Submit a pull request in the dev branch","title":"Contributing: core"},{"location":"contribute/core/#constraints","text":"Respect PEP 257 -- Docstring conventions. For each class or method add a description with summary, input parameter, returned parameter, type of parameter python def my_method(my_parameter): \"\"\" Description of he method :param my_parameter: description of he parameter :type my_parameter: str \"\"\" Respect PEP 8 -- Style Guide for Python Code We recommend the usage of an IDE like Pycharm","title":"Constraints"},{"location":"contribute/core/#limitations","text":"The management of incoming variable from the signal order when they are numbers or float are not efficient . Because of the differences between the STTs outputs: some are returning word some numbers (two != 2). Because of the i18n, we are not able to know if a variable should be interpreted in english, french, spanish, etc ... (\"two\" != \"deux\" != \"dos\")","title":"Limitations"},{"location":"contribute/dna/","text":"dna.yml file The dna file is the descriptor of your module. This file has a yaml syntax and must be present to allow Kalliope to install it from the CLI . DNA parameters parameter type required choices comment name string yes Lowercase. It will be the name of the folder installed in ressources_dir for the target type of resource type string yes neuron, stt, tts The type of resource. This will be used by Kalliope install process to place the resource in the right directory set in resources_dir author string no String that contain info about the author of the modul like a name or a github profile page kalliope_supported_version list yes 0.4 list of kalliope MAJOR version the module support. E.g - 0.4 tags list no list of tags that can help to categorize the module. E.g: \"email\", \"social network\", \"search engine\" DNA file examples A dna file for a neuron name : \"wikipedia_searcher\" type : \"neuron\" author : \"The dream team of Kalliope project\" kalliope_supported_version : - 0.5 tags : - \"search engine\" - \"wiki\"","title":"dna.yml"},{"location":"contribute/dna/#dnayml-file","text":"The dna file is the descriptor of your module. This file has a yaml syntax and must be present to allow Kalliope to install it from the CLI .","title":"dna.yml file"},{"location":"contribute/dna/#dna-parameters","text":"parameter type required choices comment name string yes Lowercase. It will be the name of the folder installed in ressources_dir for the target type of resource type string yes neuron, stt, tts The type of resource. This will be used by Kalliope install process to place the resource in the right directory set in resources_dir author string no String that contain info about the author of the modul like a name or a github profile page kalliope_supported_version list yes 0.4 list of kalliope MAJOR version the module support. E.g - 0.4 tags list no list of tags that can help to categorize the module. E.g: \"email\", \"social network\", \"search engine\"","title":"DNA parameters"},{"location":"contribute/dna/#dna-file-examples","text":"A dna file for a neuron name : \"wikipedia_searcher\" type : \"neuron\" author : \"The dream team of Kalliope project\" kalliope_supported_version : - 0.5 tags : - \"search engine\" - \"wiki\"","title":"DNA file examples"},{"location":"contribute/documentation/","text":"Contributing: core documentation The main documentation is written in markdown and then generated with mkdocs . Install python packages sudo pip3 install mkdocs mkdocs-material markdown-include pygments Update the documentation in the docs folder placed in the root of the project. Then, run dev server locally to check the result mkdocs serve When ready, send a pull request in the dev branch.","title":"Documentation"},{"location":"contribute/documentation/#contributing-core-documentation","text":"The main documentation is written in markdown and then generated with mkdocs . Install python packages sudo pip3 install mkdocs mkdocs-material markdown-include pygments Update the documentation in the docs folder placed in the root of the project. Then, run dev server locally to check the result mkdocs serve When ready, send a pull request in the dev branch.","title":"Contributing: core documentation"},{"location":"contribute/installation_file/","text":"install.yml file The installation file, called install.yml, must be placed at the root of a repository. This one will be read by Kalliope in order to install your module from the command line by any Kalliope user. How to create an install.yml file The module installation process is based on the Ansible program. Ansible is an IT orchestrator. It means it can help you to perform configuration management, application deployment or task automation. The install.yml file must contains what we called a Playbook in the Ansible world. A playbook is like a recipe or an instructions manual which tells Ansible what to do against an host. In our case, the host will be the local machine of the current user who asked Kalliope to install the module. Let's see a basic playbook, the one used by the neuron wikipedia_searcher - name : Kalliope wikipedia_searcher neuron install hosts : localhost gather_facts : no connection : local become : true tasks : - name : \"Install pip dependencies\" pip : name : wikipedia version : 1.4.0 executable : pip3 As the file is a playbook , it can contains multiple play . That's why the file start with a \"-\", the yaml syntax to define a list of element. In this example, our playbook contains only one play. The first element is the name . It can be anything you want. Here we've set what the play do. The hosts parameter is, like the name sugest us, to design on which host we want to apply our configuration. In the context of a Kalliope module installation, it will always be localhost . By default, ansible call a module to gather useful variables about remote hosts that can be used in playbooks. In this example, we don't need it and so we disable the gather_facts feature in order to win a couple seconds during the installation process. In most of case, our play will need to apply admin operations. In this case, installing a python lib. So we set become to true to be allowed to install our lib as root user. The next part is tasks . This key must contains a list of task to apply on the target system. The only task we've added here is based on the pip Ansible module . Ansible comes with a lot of modules, see the complete list here . Here is an example which use the apt module to install Debian packages tasks : - name : Install packages apt : name={{ item }} update_cache=yes with_items : - flac - mplayer","title":"install.yml"},{"location":"contribute/installation_file/#installyml-file","text":"The installation file, called install.yml, must be placed at the root of a repository. This one will be read by Kalliope in order to install your module from the command line by any Kalliope user.","title":"install.yml file"},{"location":"contribute/installation_file/#how-to-create-an-installyml-file","text":"The module installation process is based on the Ansible program. Ansible is an IT orchestrator. It means it can help you to perform configuration management, application deployment or task automation. The install.yml file must contains what we called a Playbook in the Ansible world. A playbook is like a recipe or an instructions manual which tells Ansible what to do against an host. In our case, the host will be the local machine of the current user who asked Kalliope to install the module. Let's see a basic playbook, the one used by the neuron wikipedia_searcher - name : Kalliope wikipedia_searcher neuron install hosts : localhost gather_facts : no connection : local become : true tasks : - name : \"Install pip dependencies\" pip : name : wikipedia version : 1.4.0 executable : pip3 As the file is a playbook , it can contains multiple play . That's why the file start with a \"-\", the yaml syntax to define a list of element. In this example, our playbook contains only one play. The first element is the name . It can be anything you want. Here we've set what the play do. The hosts parameter is, like the name sugest us, to design on which host we want to apply our configuration. In the context of a Kalliope module installation, it will always be localhost . By default, ansible call a module to gather useful variables about remote hosts that can be used in playbooks. In this example, we don't need it and so we disable the gather_facts feature in order to win a couple seconds during the installation process. In most of case, our play will need to apply admin operations. In this case, installing a python lib. So we set become to true to be allowed to install our lib as root user. The next part is tasks . This key must contains a list of task to apply on the target system. The only task we've added here is based on the pip Ansible module . Ansible comes with a lot of modules, see the complete list here . Here is an example which use the apt module to install Debian packages tasks : - name : Install packages apt : name={{ item }} update_cache=yes with_items : - flac - mplayer","title":"How to create an install.yml file"},{"location":"contribute/neuron/","text":"Contributing: Create a neuron Neurons are independent projects so they can be developed under a github project. Anyone can clone them, place them under the neurons repository and reuse them. Creating a new Neuron must follow some rules: Repository Structure The Neuron repository name is in lowercase . Under the Neuron repository, the Neuron has a README.md file describing the Neuron following this structure: Neuron name: Installation: The CLI command used to install the neuron Synopsis: Description of the Neuron Options: A table of the incoming parameters managed by the Neuron. Return Values: A table of the returned values which can be catched by the say_template attribute . Synapses example: An example of how to use the Neuron inside a Synapse. Notes: Something which needs to be add. Under the Neuron repository, include a Tests repository to manage the test of the Neuron. Under the neuron repository, a dna.yml file must be added that contains information about the neuron. type = \"neuron\" Under the neuron repository, a install.yml file must be added that contains the installation process. Code Under the Neuron repository, the Neuron file name .py is also in lowercase . The Neuron must be coded in Python 2.7 . Under the Neuron repository, include the init .py file which contains: from neuron import Neuron (/!\\ respect the Case) Inside the Neuron file, the Neuron Class name is in uppercase . The Neuron inherits from the NeuronModule coming from the Core. python from core.NeuronModule import NeuronModule class Say(NeuronModule): The Neuron has a constructor init which is the entry point. The constructor has a **kwargs argument which is corresponding to the Dict of incoming variables:values defined either in the brain file or in the signal. The Neuron must refer to its parent structure in the init by calling the super of NeuronModule. Python def __init__(self, **kwargs): super(Say, self).__init__(**kwargs) You must run unit tests with success before sending a pull request. Add new tests that cover the code you want to publish. bash cd /path/to/kalliope python -m unittest discover ( optionnal-> good practice ) The Neuron can implement a private method _is_parameters_ok(self) which checks if entries are ok. return: true if parameters are ok, raise an exception otherwise ( optionnal-> good practice ) The Neuron can import and raise exceptions coming from NeuronModule: MissingParameterException: Some Neuron parameters are missing. InvalidParameterException: Some Neuron parameters are invalid. The Neuron can use a self.say(message) method to speak out some return values using the say_template attribute in the brain file. the message variable must be a Dict of variable:values where variables can be defined as output. The Neuron must (as much as possible) ensure the i18n. This means that they should not manage a specific language inside its own logic. Only synapse by the use of order must interact with the languages. This allow a Neuron to by reused by anyone, speaking any language. Code example Example of neuron structure myneuron/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 myneuron.py \u251c\u2500\u2500 dna.yml \u251c\u2500\u2500 install.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_myneuron.py Example of neuron code class Myneuron ( NeuronModule ): def __init__ ( self , ** kwargs ): super ( Myneuron , self ) . __init__ ( ** kwargs ) # the args from the neuron configuration self . arg1 = kwargs . get ( 'arg1' , None ) self . arg2 = kwargs . get ( 'arg2' , None ) # check if parameters have been provided if self . _is_parameters_ok (): # ------------------- # do amazing code # ------------------- def _is_parameters_ok ( self ): \"\"\" Check if received parameters are ok to perform operations in the neuron :return: true if parameters are ok, raise an exception otherwise .. raises:: MissingParameterException \"\"\" if self . arg1 is None : raise MissingParameterException ( \"You must specify a arg1\" ) if not isinstance ( self . arg2 , int ): raise MissingParameterException ( \"arg2 must be an integer\" ) return True Share it We are maintaining a list of all the Neurons available from the community, let us know you've developed your own by opening an issue with the link of your neuron or send a pull request to update the neuron list on the Kalliope's website directly.","title":"Neuron"},{"location":"contribute/neuron/#contributing-create-a-neuron","text":"Neurons are independent projects so they can be developed under a github project. Anyone can clone them, place them under the neurons repository and reuse them. Creating a new Neuron must follow some rules:","title":"Contributing: Create a neuron"},{"location":"contribute/neuron/#repository-structure","text":"The Neuron repository name is in lowercase . Under the Neuron repository, the Neuron has a README.md file describing the Neuron following this structure: Neuron name: Installation: The CLI command used to install the neuron Synopsis: Description of the Neuron Options: A table of the incoming parameters managed by the Neuron. Return Values: A table of the returned values which can be catched by the say_template attribute . Synapses example: An example of how to use the Neuron inside a Synapse. Notes: Something which needs to be add. Under the Neuron repository, include a Tests repository to manage the test of the Neuron. Under the neuron repository, a dna.yml file must be added that contains information about the neuron. type = \"neuron\" Under the neuron repository, a install.yml file must be added that contains the installation process.","title":"Repository Structure"},{"location":"contribute/neuron/#code","text":"Under the Neuron repository, the Neuron file name .py is also in lowercase . The Neuron must be coded in Python 2.7 . Under the Neuron repository, include the init .py file which contains: from neuron import Neuron (/!\\ respect the Case) Inside the Neuron file, the Neuron Class name is in uppercase . The Neuron inherits from the NeuronModule coming from the Core. python from core.NeuronModule import NeuronModule class Say(NeuronModule): The Neuron has a constructor init which is the entry point. The constructor has a **kwargs argument which is corresponding to the Dict of incoming variables:values defined either in the brain file or in the signal. The Neuron must refer to its parent structure in the init by calling the super of NeuronModule. Python def __init__(self, **kwargs): super(Say, self).__init__(**kwargs) You must run unit tests with success before sending a pull request. Add new tests that cover the code you want to publish. bash cd /path/to/kalliope python -m unittest discover ( optionnal-> good practice ) The Neuron can implement a private method _is_parameters_ok(self) which checks if entries are ok. return: true if parameters are ok, raise an exception otherwise ( optionnal-> good practice ) The Neuron can import and raise exceptions coming from NeuronModule: MissingParameterException: Some Neuron parameters are missing. InvalidParameterException: Some Neuron parameters are invalid. The Neuron can use a self.say(message) method to speak out some return values using the say_template attribute in the brain file. the message variable must be a Dict of variable:values where variables can be defined as output. The Neuron must (as much as possible) ensure the i18n. This means that they should not manage a specific language inside its own logic. Only synapse by the use of order must interact with the languages. This allow a Neuron to by reused by anyone, speaking any language.","title":"Code"},{"location":"contribute/neuron/#code-example","text":"Example of neuron structure myneuron/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 myneuron.py \u251c\u2500\u2500 dna.yml \u251c\u2500\u2500 install.yml \u251c\u2500\u2500 README.md \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_myneuron.py Example of neuron code class Myneuron ( NeuronModule ): def __init__ ( self , ** kwargs ): super ( Myneuron , self ) . __init__ ( ** kwargs ) # the args from the neuron configuration self . arg1 = kwargs . get ( 'arg1' , None ) self . arg2 = kwargs . get ( 'arg2' , None ) # check if parameters have been provided if self . _is_parameters_ok (): # ------------------- # do amazing code # ------------------- def _is_parameters_ok ( self ): \"\"\" Check if received parameters are ok to perform operations in the neuron :return: true if parameters are ok, raise an exception otherwise .. raises:: MissingParameterException \"\"\" if self . arg1 is None : raise MissingParameterException ( \"You must specify a arg1\" ) if not isinstance ( self . arg2 , int ): raise MissingParameterException ( \"arg2 must be an integer\" ) return True","title":"Code example"},{"location":"contribute/neuron/#share-it","text":"We are maintaining a list of all the Neurons available from the community, let us know you've developed your own by opening an issue with the link of your neuron or send a pull request to update the neuron list on the Kalliope's website directly.","title":"Share it"},{"location":"contribute/stt/","text":"Contributing: Create a STT STT are independent projects so they can be developed under a github project. Anyone can clone them and place them under the STT repository and reuse them or directly install them via the CLI. Creating a new STT must follow some rules: Repository Structure The STT repository name is in lowercase . Under the STT repository, the STT has a README.md file describing the STT following this structure: STT name: Installation: The CLI command used to install the STT Synopsis: Description of the STT Options: A table of the incoming parameters managed by the STT. Notes: Something which needs to be add. Licence: The licence you want to use Under the STT repository, a dna.yml file must be added that contains information about the STT. type = \"stt\" Under the STT repository, a install.yml file must be added that contains the installation process. Code Under the STT repository, the STT file name .py is also in lowercase . The STT must be coded in Python 2.7 . Under the STT repository, include the init .py file which contains: from stt import STT (/!\\ respect the Case) Inside the STT file, the STT Class name is in uppercase . The STT inherits from the SpeechRecognition coming from the Utils file in the STT package. python from kalliope.stt.Utils import SpeechRecognition class Google(SpeechRecognition): The STT has a constructor init which is the entry point. The constructor has an incoming callback to call once we get the text. The constructor has a **kwargs argument which is corresponding to the Dict of incoming variables:values defined either in the settings file. The STT must init itself first. Attach the incoming callback to the self.main_controller_callback attribute. This callback come from the main controller and will receive the text at the end of the process Obtain audio from the microphone in the constructor. (Note : we mostly use the speech_recognition library ) Set your callback method into the mother class with self.set_callback(self.google_callback) . This callback is the one which will process the audio into a text. Use self.start_processing() from the mother class to get an audio from the microphone or read the audio file path if provided. The mother class will give the audio stream to the callback you've set before. The callback method must implement two arguments: recognizer and audio. The audio argument contains the stream caught by the microphone or read from an audio file path Do magic stuff with the audio in order to get a string that contains the translated text Once you get the text, let give it to the main_controller_callback method received in the constructor by calling it with the text string as argument self.main_controller_callback(audio_to_text) Code example: def __init__ ( self , callback = None , ** kwargs ): # give the audio file path to process directly to the mother class if exist SpeechRecognition . __init__ ( self , kwargs . get ( 'audio_file_path' , None )) # here is the main controller callback. We will return the text at the end of the process self . main_controller_callback = callback self . argument_from_settings = kwargs . get ( 'argument_from_settings' , None ) # give our callback self . set_callback ( self . my_callback ) # start processing, record a sample from the microphone if no audio file path provided, else read the file self . start_processing () def my_callback (( self , recognizer , audio ): # --------------------------------------------- # do amazing code to translate the audio stream into text # 'audio' contain stream caught by the microphone # --------------------------------------------- # at the end of the process, send the text into the received callback method self . main_controller_callback ( audio_to_text )","title":"STT"},{"location":"contribute/stt/#contributing-create-a-stt","text":"STT are independent projects so they can be developed under a github project. Anyone can clone them and place them under the STT repository and reuse them or directly install them via the CLI. Creating a new STT must follow some rules:","title":"Contributing: Create a STT"},{"location":"contribute/stt/#repository-structure","text":"The STT repository name is in lowercase . Under the STT repository, the STT has a README.md file describing the STT following this structure: STT name: Installation: The CLI command used to install the STT Synopsis: Description of the STT Options: A table of the incoming parameters managed by the STT. Notes: Something which needs to be add. Licence: The licence you want to use Under the STT repository, a dna.yml file must be added that contains information about the STT. type = \"stt\" Under the STT repository, a install.yml file must be added that contains the installation process.","title":"Repository Structure"},{"location":"contribute/stt/#code","text":"Under the STT repository, the STT file name .py is also in lowercase . The STT must be coded in Python 2.7 . Under the STT repository, include the init .py file which contains: from stt import STT (/!\\ respect the Case) Inside the STT file, the STT Class name is in uppercase . The STT inherits from the SpeechRecognition coming from the Utils file in the STT package. python from kalliope.stt.Utils import SpeechRecognition class Google(SpeechRecognition): The STT has a constructor init which is the entry point. The constructor has an incoming callback to call once we get the text. The constructor has a **kwargs argument which is corresponding to the Dict of incoming variables:values defined either in the settings file. The STT must init itself first. Attach the incoming callback to the self.main_controller_callback attribute. This callback come from the main controller and will receive the text at the end of the process Obtain audio from the microphone in the constructor. (Note : we mostly use the speech_recognition library ) Set your callback method into the mother class with self.set_callback(self.google_callback) . This callback is the one which will process the audio into a text. Use self.start_processing() from the mother class to get an audio from the microphone or read the audio file path if provided. The mother class will give the audio stream to the callback you've set before. The callback method must implement two arguments: recognizer and audio. The audio argument contains the stream caught by the microphone or read from an audio file path Do magic stuff with the audio in order to get a string that contains the translated text Once you get the text, let give it to the main_controller_callback method received in the constructor by calling it with the text string as argument self.main_controller_callback(audio_to_text) Code example: def __init__ ( self , callback = None , ** kwargs ): # give the audio file path to process directly to the mother class if exist SpeechRecognition . __init__ ( self , kwargs . get ( 'audio_file_path' , None )) # here is the main controller callback. We will return the text at the end of the process self . main_controller_callback = callback self . argument_from_settings = kwargs . get ( 'argument_from_settings' , None ) # give our callback self . set_callback ( self . my_callback ) # start processing, record a sample from the microphone if no audio file path provided, else read the file self . start_processing () def my_callback (( self , recognizer , audio ): # --------------------------------------------- # do amazing code to translate the audio stream into text # 'audio' contain stream caught by the microphone # --------------------------------------------- # at the end of the process, send the text into the received callback method self . main_controller_callback ( audio_to_text )","title":"Code"},{"location":"contribute/tts/","text":"Contributing: Create a TTS TTS are independent projects so they can be developed under a github project. Anyone can clone them and place them under the TTS repository and reuse them or directly install them. Creating a new TTS must follow some rules: Repository Structure The TTS repository name is in lowercase . Under the TTS repository, the TTS has a README.md file describing the TTS following this structure: TTS name: Installation: The CLI command used to install the TTS Synopsis: Description of the TTS Options: A table of the incoming parameters managed by the TTS. Notes: Something which needs to be add. Licence: The licence you want to use Under the TTS repository, a dna.yml file must be added that contains information about the TTS. type = \"tts\" Under the TTS repository, a install.yml file must be added that contains the installation process. Code Under the TTS repository, the TTS file name .py is also in lowercase . The TTS must be coded in Python 2.7 . Under the TTS repository, include the init .py file which contains: from tts import TTS (/!\\ respect the Case) Inside the TTS file, the TTS Class name is in uppercase . The TTS inherits from the TTSModule coming from the Core. python from kalliope.core.TTS.TTSModule import TTSModule class Pico2wave(TTSModule): The TTS has a constructor init which is the entry point. The constructor has a **kwargs argument which is corresponding to the Dict of incoming variables:values defined either in the settings file. The TTS must refer to its parent structure in the init by calling the super of TTSModule. python def __init__(self, **kwargs): super(Pico2wave, self).__init__(**kwargs) The TTS must implements a method _say(self, words) which must run call a method coming from the mother Class self.generate_and_play(words, callback). Implement a callback in a separate method to run the audio. This callback is in charge to get the sound and save it on the disk. You can use our lib \"FileManager.write_in_file(file_path, content)\" The module must use self.file_path from the mother class to know the full path where to save the generated audio file. The file path is handled by the core in order to allow caching. The generated audio file must be supported by Mplayer. Try to play a generated file with mplayer /path/to/the/generated_audio_file Code example Example of TTS structure mytts/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 mytts.py \u251c\u2500\u2500 dna.yml \u251c\u2500\u2500 install.yml \u2514\u2500\u2500 README.md Example of TTS code class Mytts ( TTSModule ): def __init__ ( self , ** kwargs ): super ( Mytts , self ) . __init__ ( ** kwargs ) # the args from the tts configuration self . arg1 = kwargs . get ( 'arg1' , None ) self . arg2 = kwargs . get ( 'arg2' , None ) def say ( self , words ): \"\"\" :param words: The sentence to say \"\"\" self . generate_and_play ( words , self . _generate_audio_file ) def _generate_audio_file ( self ): \"\"\" Generic method used as a Callback in TTSModule - must provided the audio file and write it on the disk in self.file_path .. raises:: FailToLoadSoundFile \"\"\" # ------------------- # - do amazing code to get the sound # - save it to the disk using self.file_path # - Attach the sound file path to the attribute : self.file_path = audio_file_path ! # -------------------","title":"TTS"},{"location":"contribute/tts/#contributing-create-a-tts","text":"TTS are independent projects so they can be developed under a github project. Anyone can clone them and place them under the TTS repository and reuse them or directly install them. Creating a new TTS must follow some rules:","title":"Contributing: Create a TTS"},{"location":"contribute/tts/#repository-structure","text":"The TTS repository name is in lowercase . Under the TTS repository, the TTS has a README.md file describing the TTS following this structure: TTS name: Installation: The CLI command used to install the TTS Synopsis: Description of the TTS Options: A table of the incoming parameters managed by the TTS. Notes: Something which needs to be add. Licence: The licence you want to use Under the TTS repository, a dna.yml file must be added that contains information about the TTS. type = \"tts\" Under the TTS repository, a install.yml file must be added that contains the installation process.","title":"Repository Structure"},{"location":"contribute/tts/#code","text":"Under the TTS repository, the TTS file name .py is also in lowercase . The TTS must be coded in Python 2.7 . Under the TTS repository, include the init .py file which contains: from tts import TTS (/!\\ respect the Case) Inside the TTS file, the TTS Class name is in uppercase . The TTS inherits from the TTSModule coming from the Core. python from kalliope.core.TTS.TTSModule import TTSModule class Pico2wave(TTSModule): The TTS has a constructor init which is the entry point. The constructor has a **kwargs argument which is corresponding to the Dict of incoming variables:values defined either in the settings file. The TTS must refer to its parent structure in the init by calling the super of TTSModule. python def __init__(self, **kwargs): super(Pico2wave, self).__init__(**kwargs) The TTS must implements a method _say(self, words) which must run call a method coming from the mother Class self.generate_and_play(words, callback). Implement a callback in a separate method to run the audio. This callback is in charge to get the sound and save it on the disk. You can use our lib \"FileManager.write_in_file(file_path, content)\" The module must use self.file_path from the mother class to know the full path where to save the generated audio file. The file path is handled by the core in order to allow caching. The generated audio file must be supported by Mplayer. Try to play a generated file with mplayer /path/to/the/generated_audio_file","title":"Code"},{"location":"contribute/tts/#code-example","text":"Example of TTS structure mytts/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 mytts.py \u251c\u2500\u2500 dna.yml \u251c\u2500\u2500 install.yml \u2514\u2500\u2500 README.md Example of TTS code class Mytts ( TTSModule ): def __init__ ( self , ** kwargs ): super ( Mytts , self ) . __init__ ( ** kwargs ) # the args from the tts configuration self . arg1 = kwargs . get ( 'arg1' , None ) self . arg2 = kwargs . get ( 'arg2' , None ) def say ( self , words ): \"\"\" :param words: The sentence to say \"\"\" self . generate_and_play ( words , self . _generate_audio_file ) def _generate_audio_file ( self ): \"\"\" Generic method used as a Callback in TTSModule - must provided the audio file and write it on the disk in self.file_path .. raises:: FailToLoadSoundFile \"\"\" # ------------------- # - do amazing code to get the sound # - save it to the disk using self.file_path # - Attach the sound file path to the attribute : self.file_path = audio_file_path ! # -------------------","title":"Code example"},{"location":"installation/check_env/","text":"Test your env Check your microphone and speaker config To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope. (Optional) Start Kalliope automatically after a reboot If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"Check env"},{"location":"installation/check_env/#test-your-env","text":"","title":"Test your env"},{"location":"installation/check_env/#check-your-microphone-and-speaker-config","text":"To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope.","title":"Check your microphone and speaker config"},{"location":"installation/check_env/#optional-start-kalliope-automatically-after-a-reboot","text":"If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"(Optional) Start Kalliope automatically after a reboot"},{"location":"installation/create_raspbian_image/","text":"Create a Raspbian image with already installed Kalliope This documentation aims at explaining how to creta a Raspbian image with pre installed Kalliope. Install a fresh image of Raspbian as usual on your raspberry Pi. Once deployed, follow manual steps bellow. Note: From here I suppose that the Rpi has received a valid IP from your LAN DHCP server and can access to the internet. Prepare the image Login to your Rpi. Enable SSH sudo systemctl enable ssh sudo systemctl start ssh You now have a SSH connection, you can connect remotely to your Pi to perform next steps from a console. Note: The SSH server is listening on the default SSH port with the default Rasbpian credentials. This can be a security issue. It is recommended to check that the Rpi is not directly accessible from the internet. Install Kalliope from the script curl -s https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh | bash If you want to install a particular branch you can specify it with an argument following the syntax bellow curl -s https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh | bash -s <branch_name> E.g curl -s https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh | bash -s dev Check Kalliope is installed kalliope --version Cleanup installation files rm -rf get-pip.py sudo rm -rf kalliope Clone some starter kit git clone https://github.com/kalliope-project/kalliope_starter_fr.git git clone https://github.com/kalliope-project/kalliope_starter_en.git git clone https://github.com/kalliope-project/kalliope_starter_de.git Change the hostname sudo hostnamectl set-hostname kalliope sudo sed -i 's/raspberrypi/kalliope/g' /etc/hosts Clear the command line history history -c Shutdown the Rpi sudo shutdown -h now Create the image Next commands have been tested on Ubuntu 16.04. In the next part we create an image an shrink it in order to take less storage space. Note: Raspbian operating system comes with a tool to resize the filesystem to the largest size the SD card will support (sudo raspi-config, then select Expend Filesystem). You wont lose space by shrinking the image because you can expand it back again. Note: Be sure of what you doing in next steps. Writing disk image on the wrong disk will destroy all your computer data. Remove the SD card from your Rpi and connect it into a Linux distrib via an external USB card reader. Check where the card is mounted df -h The output should looks like this df -h Filesystem Size Used Avail Use% Mounted on --- TRUNCKATED --- /dev/sdb2 15G 1 .3G 13G 10 % /media/nico/f2100b2f-ed84-4647-b5ae-089280112716 /dev/sdb1 41M 21M 21M 51 % /media/nico/boot The SD card is on /dev/sdb device . It has two partition, /dev/sdb1 and /dev/sdb2 . Note: Your system might mount the card somewhere else depending on the number of disk you already have like /dev/sdc or /dev/sde. Note down the path where your SD is. Unmount the two partitions. Keep the SD card in the reader and connected to the system. sudo umount /dev/sdb1 /dev/sdb2 Make the image with dcfldd . This program is a replacement for the old dd disk utility program that show the progression of a copy. Install the tool sudo apt-get install dcfldd Create the image following this syntax. sudo dcfldd if =< my_sd_card_disk_path > of =< target_path >/ kalliope . img E.g sudo dcfldd if = /dev/sdb of = kalliope.img Note: Be sure you have enough space available in the target path It will take a couple minutes to create the image depending of the size of your SD card. Once it's done, give the ownership back to your current user. (the image belong to root as we created it with sudo) sudo chown ${ USER } : ${ USER } kalliope.img Now we have a file that can already be used to instantiate a Rpi. But the file is big as the SD card itself. To reduce the size of the image we need gparted . Install it sudo apt-get install gparted Gparted is only able to edit physical device, so we need to create a virtual device from the image before using it. As we saw when we have identified our disk, Raspbian has two partitions. The fist one, boot, is already tiny and does not need to be shrank. The second partition is where everything is stored. It contains a lot of free space. Show partition info from the image sudo fdisk -l kalliope.img The output should looks like this Device Boot Start End Sectors Size Id Type kalliope . img1 8192 92159 83968 41 M c W95 FAT32 ( LBA ) kalliope . img2 92160 31116287 31024128 14 . 8 G 83 Linux Export the START sector of the second partition. The variable will be used in next commands. export START = 92160 Check the env variable is set correctly echo ${ START } Create the virtual drive with only the second patition sudo losetup /dev/loop0 kalliope.img -o $(( START*512 )) Now read the loopback device with gparted sudo gparted /dev/loop0 Gparted will show you the state of the partition. Click the /dev/loop0 partition and select Resize/Move from the menu. change the value of \"New Size\" so that it is slighty abose the \"Minimum Size\". Note down the new size! In this example the new size is 2000 MB . Then apply the resizing and exit gparted. Remove the loopback device and create a new one with the whole image this time. sudo losetup -d /dev/loop0 sudo losetup /dev/loop0 kalliope.img Now, we use fdisk to edit the partition table in order to resize it to the new size. sudo fdisk /dev/loop0 You should now see the fdisk prompt. - Enter d 2 to delete the table entry for the second partition - Enter n p 2 to create a new second partition entry - Enter the START sector number that you used earlier. - Enter +NEWSIZE as the new size. Don't forget the \"+\" at the start. For example +2000M - Enter w to write the new partition Output example Command ( m for help ) : d Partition number ( 1 , 2 , default 2 ) : 2 Partition 2 has been deleted . Command ( m for help ) : n Partition type p primary ( 1 primary , 0 extended , 3 free ) e extended ( container for logical partitions ) Select ( default p ) : p Partition number ( 2 - 4 , default 2 ) : 2 First sector ( 2048 - 31116287 , default 2048 ) : 92160 Last sector , + sectors or + size { K , M , G , T , P } ( 92160 - 31116287 , default 31116287 ) : + 2000 M Created a new partition 2 of type ' Linux ' and of size 2 GiB . Command ( m for help ) : w The partition table has been altered . Calling ioctl () to re - read partition table . Let's take a look to the partition table again sudo fdisk - l / dev / loop0 Device Boot Start End Sectors Size Id Type / dev / loop0p1 8192 92159 83968 41 M c W95 FAT32 ( LBA ) / dev / loop0p2 92160 4188159 4096000 2 G 83 Linux Note down the ED sector of the second partition export END = 4188159 Destroy the loopback sudo losetup -d /dev/loop0 Now, trim the file to the new length. truncate - s $ ((( END + 1 ) * 512 )) kalliope . img Check the new size of the image du -hs kalliope.img 2 .0G kalliope.img You can now compress it to reduce a little more the size zip kalliope.img.zip kalliope.img Final size du -hs kalliope.img.zip 727M kalliope.img.zip","title":"Create a Raspbian image with already installed Kalliope"},{"location":"installation/create_raspbian_image/#create-a-raspbian-image-with-already-installed-kalliope","text":"This documentation aims at explaining how to creta a Raspbian image with pre installed Kalliope. Install a fresh image of Raspbian as usual on your raspberry Pi. Once deployed, follow manual steps bellow. Note: From here I suppose that the Rpi has received a valid IP from your LAN DHCP server and can access to the internet.","title":"Create a Raspbian image with already installed Kalliope"},{"location":"installation/create_raspbian_image/#prepare-the-image","text":"Login to your Rpi. Enable SSH sudo systemctl enable ssh sudo systemctl start ssh You now have a SSH connection, you can connect remotely to your Pi to perform next steps from a console. Note: The SSH server is listening on the default SSH port with the default Rasbpian credentials. This can be a security issue. It is recommended to check that the Rpi is not directly accessible from the internet. Install Kalliope from the script curl -s https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh | bash If you want to install a particular branch you can specify it with an argument following the syntax bellow curl -s https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh | bash -s <branch_name> E.g curl -s https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh | bash -s dev Check Kalliope is installed kalliope --version Cleanup installation files rm -rf get-pip.py sudo rm -rf kalliope Clone some starter kit git clone https://github.com/kalliope-project/kalliope_starter_fr.git git clone https://github.com/kalliope-project/kalliope_starter_en.git git clone https://github.com/kalliope-project/kalliope_starter_de.git Change the hostname sudo hostnamectl set-hostname kalliope sudo sed -i 's/raspberrypi/kalliope/g' /etc/hosts Clear the command line history history -c Shutdown the Rpi sudo shutdown -h now","title":"Prepare the image"},{"location":"installation/create_raspbian_image/#create-the-image","text":"Next commands have been tested on Ubuntu 16.04. In the next part we create an image an shrink it in order to take less storage space. Note: Raspbian operating system comes with a tool to resize the filesystem to the largest size the SD card will support (sudo raspi-config, then select Expend Filesystem). You wont lose space by shrinking the image because you can expand it back again. Note: Be sure of what you doing in next steps. Writing disk image on the wrong disk will destroy all your computer data. Remove the SD card from your Rpi and connect it into a Linux distrib via an external USB card reader. Check where the card is mounted df -h The output should looks like this df -h Filesystem Size Used Avail Use% Mounted on --- TRUNCKATED --- /dev/sdb2 15G 1 .3G 13G 10 % /media/nico/f2100b2f-ed84-4647-b5ae-089280112716 /dev/sdb1 41M 21M 21M 51 % /media/nico/boot The SD card is on /dev/sdb device . It has two partition, /dev/sdb1 and /dev/sdb2 . Note: Your system might mount the card somewhere else depending on the number of disk you already have like /dev/sdc or /dev/sde. Note down the path where your SD is. Unmount the two partitions. Keep the SD card in the reader and connected to the system. sudo umount /dev/sdb1 /dev/sdb2 Make the image with dcfldd . This program is a replacement for the old dd disk utility program that show the progression of a copy. Install the tool sudo apt-get install dcfldd Create the image following this syntax. sudo dcfldd if =< my_sd_card_disk_path > of =< target_path >/ kalliope . img E.g sudo dcfldd if = /dev/sdb of = kalliope.img Note: Be sure you have enough space available in the target path It will take a couple minutes to create the image depending of the size of your SD card. Once it's done, give the ownership back to your current user. (the image belong to root as we created it with sudo) sudo chown ${ USER } : ${ USER } kalliope.img Now we have a file that can already be used to instantiate a Rpi. But the file is big as the SD card itself. To reduce the size of the image we need gparted . Install it sudo apt-get install gparted Gparted is only able to edit physical device, so we need to create a virtual device from the image before using it. As we saw when we have identified our disk, Raspbian has two partitions. The fist one, boot, is already tiny and does not need to be shrank. The second partition is where everything is stored. It contains a lot of free space. Show partition info from the image sudo fdisk -l kalliope.img The output should looks like this Device Boot Start End Sectors Size Id Type kalliope . img1 8192 92159 83968 41 M c W95 FAT32 ( LBA ) kalliope . img2 92160 31116287 31024128 14 . 8 G 83 Linux Export the START sector of the second partition. The variable will be used in next commands. export START = 92160 Check the env variable is set correctly echo ${ START } Create the virtual drive with only the second patition sudo losetup /dev/loop0 kalliope.img -o $(( START*512 )) Now read the loopback device with gparted sudo gparted /dev/loop0 Gparted will show you the state of the partition. Click the /dev/loop0 partition and select Resize/Move from the menu. change the value of \"New Size\" so that it is slighty abose the \"Minimum Size\". Note down the new size! In this example the new size is 2000 MB . Then apply the resizing and exit gparted. Remove the loopback device and create a new one with the whole image this time. sudo losetup -d /dev/loop0 sudo losetup /dev/loop0 kalliope.img Now, we use fdisk to edit the partition table in order to resize it to the new size. sudo fdisk /dev/loop0 You should now see the fdisk prompt. - Enter d 2 to delete the table entry for the second partition - Enter n p 2 to create a new second partition entry - Enter the START sector number that you used earlier. - Enter +NEWSIZE as the new size. Don't forget the \"+\" at the start. For example +2000M - Enter w to write the new partition Output example Command ( m for help ) : d Partition number ( 1 , 2 , default 2 ) : 2 Partition 2 has been deleted . Command ( m for help ) : n Partition type p primary ( 1 primary , 0 extended , 3 free ) e extended ( container for logical partitions ) Select ( default p ) : p Partition number ( 2 - 4 , default 2 ) : 2 First sector ( 2048 - 31116287 , default 2048 ) : 92160 Last sector , + sectors or + size { K , M , G , T , P } ( 92160 - 31116287 , default 31116287 ) : + 2000 M Created a new partition 2 of type ' Linux ' and of size 2 GiB . Command ( m for help ) : w The partition table has been altered . Calling ioctl () to re - read partition table . Let's take a look to the partition table again sudo fdisk - l / dev / loop0 Device Boot Start End Sectors Size Id Type / dev / loop0p1 8192 92159 83968 41 M c W95 FAT32 ( LBA ) / dev / loop0p2 92160 4188159 4096000 2 G 83 Linux Note down the ED sector of the second partition export END = 4188159 Destroy the loopback sudo losetup -d /dev/loop0 Now, trim the file to the new length. truncate - s $ ((( END + 1 ) * 512 )) kalliope . img Check the new size of the image du -hs kalliope.img 2 .0G kalliope.img You can now compress it to reduce a little more the size zip kalliope.img.zip kalliope.img Final size du -hs kalliope.img.zip 727M kalliope.img.zip","title":"Create the image"},{"location":"installation/debian/","text":"Kalliope requirements for Debian Jessie/Stretch Debian packages requirements Edit /etc/apt/sources.list and check that you have contrib and non-free are enabled: On Debian Jessie: deb http://httpredir.debian.org/debian jessie main contrib non-free deb-src http://httpredir.debian.org/debian jessie main contrib non-free On Debian Stretch: deb http://httpredir.debian.org/debian stretch main contrib non-free deb-src http://httpredir.debian.org/debian stretch main contrib non-free Install some required system libraries and softwares: sudo apt-get update sudo apt-get install -y \\ git python3-dev libpython3-dev libsmpeg0 libttspico-utils flac \\ libffi-dev libssl-dev portaudio19-dev build-essential \\ libatlas3-base mplayer wget vim sudo locales \\ pulseaudio-utils libasound2-plugins python3-pyaudio libasound-dev \\ libportaudio2 libportaudiocpp0 ffmpeg Let's install the last release of python-pip wget https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Then, with pip, the last release of setuptools sudo pip3 install -U setuptools Kalliope installation Note: Python 2 is not supported anymore Method 1 - User install using the PIP package You can install kalliope on your system by using Pypi: sudo pip3 install kalliope Method 2 - Manual setup using sources Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install . Method 3 - Developer install using Virtualenv Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install . Method 4 - Developer, dependencies install only Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt Test your env Check your microphone and speaker config To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope. (Optional) Start Kalliope automatically after a reboot If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"Debian"},{"location":"installation/debian/#kalliope-requirements-for-debian-jessiestretch","text":"","title":"Kalliope requirements for Debian Jessie/Stretch"},{"location":"installation/debian/#debian-packages-requirements","text":"Edit /etc/apt/sources.list and check that you have contrib and non-free are enabled: On Debian Jessie: deb http://httpredir.debian.org/debian jessie main contrib non-free deb-src http://httpredir.debian.org/debian jessie main contrib non-free On Debian Stretch: deb http://httpredir.debian.org/debian stretch main contrib non-free deb-src http://httpredir.debian.org/debian stretch main contrib non-free Install some required system libraries and softwares: sudo apt-get update sudo apt-get install -y \\ git python3-dev libpython3-dev libsmpeg0 libttspico-utils flac \\ libffi-dev libssl-dev portaudio19-dev build-essential \\ libatlas3-base mplayer wget vim sudo locales \\ pulseaudio-utils libasound2-plugins python3-pyaudio libasound-dev \\ libportaudio2 libportaudiocpp0 ffmpeg Let's install the last release of python-pip wget https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Then, with pip, the last release of setuptools sudo pip3 install -U setuptools","title":"Debian packages requirements"},{"location":"installation/debian/#kalliope-installation","text":"Note: Python 2 is not supported anymore","title":"Kalliope installation"},{"location":"installation/debian/#method-1-user-install-using-the-pip-package","text":"You can install kalliope on your system by using Pypi: sudo pip3 install kalliope","title":"Method 1 - User install using the PIP package"},{"location":"installation/debian/#method-2-manual-setup-using-sources","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install .","title":"Method 2 - Manual setup using sources"},{"location":"installation/debian/#method-3-developer-install-using-virtualenv","text":"Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install .","title":"Method 3 - Developer install using Virtualenv"},{"location":"installation/debian/#method-4-developer-dependencies-install-only","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt","title":"Method 4 - Developer, dependencies install only"},{"location":"installation/debian/#test-your-env","text":"","title":"Test your env"},{"location":"installation/debian/#check-your-microphone-and-speaker-config","text":"To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope.","title":"Check your microphone and speaker config"},{"location":"installation/debian/#optional-start-kalliope-automatically-after-a-reboot","text":"If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"(Optional) Start Kalliope automatically after a reboot"},{"location":"installation/docker/","text":"Run Kalliope in Docker Get the image From docker hub Pull the image from Docker Hub docker pull kalliope/kalliope_ubuntu:18.04 From a local build Get the project git clone https://github.com/kalliope-project/kalliope.git cd kalliope/docker/official_image Build the image docker build --force-rm=true \\ -t kalliope \\ -f ubuntu_18_04.dockerfile . Usage By default, Kalliope directly uses alsa for audio capture & playback. The container has the pulseaudio alsa plugin, in order to use the host pulse server without conflicting. Run the command bellow to to pass your local sound socket to the container docker run -it --rm --name kalliope \\ --volume=/run/user/$(id -u)/pulse:/run/user/1000/pulse \\ kalliope Then, in the container execute kalliope kalliope @397 b317c4921 : ~ $ kalliope start Starting Kalliope Press Ctrl + C for stopping Starting order signal je suis pr\u00eate Use a volume to mount your brain et settings. E.g: docker run -it --rm --name kalliope \\ --volume=/run/user/$(id -u)/pulse:/run/user/1000/pulse \\ -v /path/to/my_kalliope_config:/home/kalliope/my_kalliope_config kalliope","title":"Run Kalliope in Docker"},{"location":"installation/docker/#run-kalliope-in-docker","text":"","title":"Run Kalliope in Docker"},{"location":"installation/docker/#get-the-image","text":"","title":"Get the image"},{"location":"installation/docker/#from-docker-hub","text":"Pull the image from Docker Hub docker pull kalliope/kalliope_ubuntu:18.04","title":"From docker hub"},{"location":"installation/docker/#from-a-local-build","text":"Get the project git clone https://github.com/kalliope-project/kalliope.git cd kalliope/docker/official_image Build the image docker build --force-rm=true \\ -t kalliope \\ -f ubuntu_18_04.dockerfile .","title":"From a local build"},{"location":"installation/docker/#usage","text":"By default, Kalliope directly uses alsa for audio capture & playback. The container has the pulseaudio alsa plugin, in order to use the host pulse server without conflicting. Run the command bellow to to pass your local sound socket to the container docker run -it --rm --name kalliope \\ --volume=/run/user/$(id -u)/pulse:/run/user/1000/pulse \\ kalliope Then, in the container execute kalliope kalliope @397 b317c4921 : ~ $ kalliope start Starting Kalliope Press Ctrl + C for stopping Starting order signal je suis pr\u00eate Use a volume to mount your brain et settings. E.g: docker run -it --rm --name kalliope \\ --volume=/run/user/$(id -u)/pulse:/run/user/1000/pulse \\ -v /path/to/my_kalliope_config:/home/kalliope/my_kalliope_config kalliope","title":"Usage"},{"location":"installation/manual_installation_common/","text":"Note: Python 2 is not supported anymore Method 1 - User install using the PIP package You can install kalliope on your system by using Pypi: sudo pip3 install kalliope Method 2 - Manual setup using sources Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install . Method 3 - Developer install using Virtualenv Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install . Method 4 - Developer, dependencies install only Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt","title":"Manual installation common"},{"location":"installation/manual_installation_common/#method-1-user-install-using-the-pip-package","text":"You can install kalliope on your system by using Pypi: sudo pip3 install kalliope","title":"Method 1 - User install using the PIP package"},{"location":"installation/manual_installation_common/#method-2-manual-setup-using-sources","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install .","title":"Method 2 - Manual setup using sources"},{"location":"installation/manual_installation_common/#method-3-developer-install-using-virtualenv","text":"Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install .","title":"Method 3 - Developer install using Virtualenv"},{"location":"installation/manual_installation_common/#method-4-developer-dependencies-install-only","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt","title":"Method 4 - Developer, dependencies install only"},{"location":"installation/raspbian/","text":"Kalliope requirements for Raspberry Pi OS Kalliope can be installed: Via script Manually Install via script Just run the following bash command to install Kalliope on a freshly installed Raspberry Pi (32bit): bash -c \"$(curl -sL https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh)\" Manual installation Note: It is recommended to use a lite installation of Raspberry Pi OS without any graphical interface for a better experience. Note: The first Raspberry Pi is not officially supported. The installation will works but a single core with only 700Mhz may produce latency. Note: Python 2 is not supported anymore Note: Raspbian was renamed to Raspberry Pi OS Debian packages requirements Install the required system libraries and software: sudo apt-get update sudo apt-get install -y git python3-dev libsmpeg0 \\ flac libffi-dev portaudio19-dev build-essential libssl-dev libatlas3-base mplayer libyaml-dev libpython3-dev libjpeg-dev ffmpeg pulseaudio On Raspberry Pi OS Buster , the default TTS engine is not installable directly from the package manager. Run command below to install it manually: wget http://ftp.fr.debian.org/debian/pool/non-free/s/svox/libttspico-utils_1.0+git20130326-9_armhf.deb wget http://ftp.fr.debian.org/debian/pool/non-free/s/svox/libttspico0_1.0+git20130326-9_armhf.deb wget http://ftp.fr.debian.org/debian/pool/non-free/s/svox/libttspico-data_1.0+git20130326-9_all.deb sudo dpkg -i libttspico-data_1.0+git20130326-9_all.deb sudo dpkg -i libttspico0_1.0+git20130326-9_armhf.deb sudo dpkg -i libttspico-utils_1.0+git20130326-9_armhf.deb Install the last release of python-pip: wget https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Note: Python 2 is not supported anymore Method 1 - User install using the PIP package You can install kalliope on your system by using Pypi: sudo pip3 install kalliope Method 2 - Manual setup using sources Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install . Method 3 - Developer install using Virtualenv Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install . Method 4 - Developer, dependencies install only Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt Raspberry Pi configuration This section deals with the special configuration needed to get Kalliope working on a RPi. Pulseaudio configuration Note: If you installed Kalliope via script, you can skip this part Add the pi user to the group pulse-access to allow to use the audio device: sudo usermod -a -G pulse-access pi Setting up default client settings by adding default server and disable autospawn to client.conf: echo \"default-server = /var/run/pulse/native\" | sudo tee -a /etc/pulse/client.conf echo 'autospawn = no' | sudo tee -a /etc/pulse/client.conf Create a pulseaudio service in /etc/systemd/system/pulseaudio.service [ Unit ] Description = PulseAudio system server After = network.target [ Service ] Type = notify ExecStart = pulseaudio --daemonize = no --system --realtime --log-target = journal Restart = always RestartSec = 30 [ Install ] WantedBy = multi-user.target Or use this command to download the script and move it to /etc/systemd/system/ : wget https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/files/pulseaudio.service && sudo mv pulseaudio.service /etc/systemd/system/ There is a bug if you use the analog jack output of the raspberry with pulseaudio, the audio player needs about 2 seconds longer to start the audio. To speed it up add the following to the end of /etc/pulse/system.pa : echo 'load-module module-alsa-sink device=\"hw:0,0\"' | sudo tee -a /etc/pulse/system.pa echo 'set-default-sink alsa_output.hw_0_0' | sudo tee -a /etc/pulse/system.pa We disable load-module module-suspend-on-idle in /etc/pulse/system.pa sed -e '/load-module module-suspend-on-idle/ s/^#*/#/' -i /etc/pulse/system.pa Now reload systemctl, start the service and enable it at startup: sudo systemctl daemon-reload sudo systemctl start pulseaudio sudo systemctl enable pulseaudio Microphone and speaker configuration Get the output card: pactl list sinks short Output example with a speaker connected to the Raspberry jack: 0 alsa_output.platform-soc_audio.analog-mono module-alsa-card.c s16le 1ch 44100Hz IDLE 1 alsa_output.hw_0_0 module-alsa-sink.c s16le 2ch 48000Hz IDLE Here we see that: - the analog audio (where the jack is connected) is on card 0 - the fixed output (with less delay on pulseaudio) on card 1 Note: If you use a USB sound card for output there is no delay at all. Get the input (microphone card): pactl list sources short Output example with a PS3 eye (which has a great Mircophone array for a cheap price) connected: 0 alsa_output.platform-soc_audio.analog-mono.monitor module-alsa-card.c s16le 1ch 44100Hz SUSPENDED 1 alsa_input.usb-OmniVision_Technologies__Inc._USB_Camera-B4.09.24.1-01.multichannel-input module-alsa-card.c s16le 4ch 16000Hz SUSPENDED Here we see: - analog-mono.monitor which is used for e.g stereo mix (What we don't need) - The PS3 eye USB camera with the built in microphone array Now we can set our desire default input and output device. To set the default output to the analog audio jack of the raspberry: pactl set-default-sink 1 To set the default input, in this case the PS3 eye: pactl set-default-source 1 Adjust the microphone sensibility by running alsamixer: alsamixer By pressing F5 you can set the microphone sensibility and speaker level for pulseaudio: Note: After changing the default input or output, you have to restart Kalliope HDMI / Analog audio By default, the audio stream will use HDMI if something is plugged into this port. Check the official documentation to switch from HDMI to analog. sudo raspi-config Configure your locales Locales defines language and country specific setting for your programs and shell session. To set system\u2019s locale you need use shell variable. For example, LANG variable can be used to set en_US (English US) language. Check current locales: locale To update your locale, type the command bellow: sudo dpkg-reconfigure locales Select in the list the locales of your country, by selecting the code with UTF8, example: de_DE.utf8 en_GB.utf8 fr_FR.utf8 es_ES.utf8 Then, update your /home/pi/.bashrc file by exporting the language. Example: export LC_ALL = \"en_US.UTF-8\" export LANG = \"en_US.UTF-8\" export LANGUAGE = \"en_US.UTF-8\" Source the file to handle changes source /home/pi/.bashrc Test your env Check your microphone and speaker config To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope. (Optional) Start Kalliope automatically after a reboot If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"Raspberry"},{"location":"installation/raspbian/#kalliope-requirements-for-raspberry-pi-os","text":"Kalliope can be installed: Via script Manually","title":"Kalliope requirements for Raspberry Pi OS"},{"location":"installation/raspbian/#install-via-script","text":"Just run the following bash command to install Kalliope on a freshly installed Raspberry Pi (32bit): bash -c \"$(curl -sL https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/rpi_install_kalliope.sh)\"","title":"Install via script"},{"location":"installation/raspbian/#manual-installation","text":"Note: It is recommended to use a lite installation of Raspberry Pi OS without any graphical interface for a better experience. Note: The first Raspberry Pi is not officially supported. The installation will works but a single core with only 700Mhz may produce latency. Note: Python 2 is not supported anymore Note: Raspbian was renamed to Raspberry Pi OS","title":"Manual installation"},{"location":"installation/raspbian/#debian-packages-requirements","text":"Install the required system libraries and software: sudo apt-get update sudo apt-get install -y git python3-dev libsmpeg0 \\ flac libffi-dev portaudio19-dev build-essential libssl-dev libatlas3-base mplayer libyaml-dev libpython3-dev libjpeg-dev ffmpeg pulseaudio On Raspberry Pi OS Buster , the default TTS engine is not installable directly from the package manager. Run command below to install it manually: wget http://ftp.fr.debian.org/debian/pool/non-free/s/svox/libttspico-utils_1.0+git20130326-9_armhf.deb wget http://ftp.fr.debian.org/debian/pool/non-free/s/svox/libttspico0_1.0+git20130326-9_armhf.deb wget http://ftp.fr.debian.org/debian/pool/non-free/s/svox/libttspico-data_1.0+git20130326-9_all.deb sudo dpkg -i libttspico-data_1.0+git20130326-9_all.deb sudo dpkg -i libttspico0_1.0+git20130326-9_armhf.deb sudo dpkg -i libttspico-utils_1.0+git20130326-9_armhf.deb Install the last release of python-pip: wget https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Note: Python 2 is not supported anymore","title":"Debian packages requirements"},{"location":"installation/raspbian/#method-1-user-install-using-the-pip-package","text":"You can install kalliope on your system by using Pypi: sudo pip3 install kalliope","title":"Method 1 - User install using the PIP package"},{"location":"installation/raspbian/#method-2-manual-setup-using-sources","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install .","title":"Method 2 - Manual setup using sources"},{"location":"installation/raspbian/#method-3-developer-install-using-virtualenv","text":"Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install .","title":"Method 3 - Developer install using Virtualenv"},{"location":"installation/raspbian/#method-4-developer-dependencies-install-only","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt","title":"Method 4 - Developer, dependencies install only"},{"location":"installation/raspbian/#raspberry-pi-configuration","text":"This section deals with the special configuration needed to get Kalliope working on a RPi.","title":"Raspberry Pi configuration"},{"location":"installation/raspbian/#pulseaudio-configuration","text":"Note: If you installed Kalliope via script, you can skip this part Add the pi user to the group pulse-access to allow to use the audio device: sudo usermod -a -G pulse-access pi Setting up default client settings by adding default server and disable autospawn to client.conf: echo \"default-server = /var/run/pulse/native\" | sudo tee -a /etc/pulse/client.conf echo 'autospawn = no' | sudo tee -a /etc/pulse/client.conf Create a pulseaudio service in /etc/systemd/system/pulseaudio.service [ Unit ] Description = PulseAudio system server After = network.target [ Service ] Type = notify ExecStart = pulseaudio --daemonize = no --system --realtime --log-target = journal Restart = always RestartSec = 30 [ Install ] WantedBy = multi-user.target Or use this command to download the script and move it to /etc/systemd/system/ : wget https://raw.githubusercontent.com/kalliope-project/kalliope/master/install/files/pulseaudio.service && sudo mv pulseaudio.service /etc/systemd/system/ There is a bug if you use the analog jack output of the raspberry with pulseaudio, the audio player needs about 2 seconds longer to start the audio. To speed it up add the following to the end of /etc/pulse/system.pa : echo 'load-module module-alsa-sink device=\"hw:0,0\"' | sudo tee -a /etc/pulse/system.pa echo 'set-default-sink alsa_output.hw_0_0' | sudo tee -a /etc/pulse/system.pa We disable load-module module-suspend-on-idle in /etc/pulse/system.pa sed -e '/load-module module-suspend-on-idle/ s/^#*/#/' -i /etc/pulse/system.pa Now reload systemctl, start the service and enable it at startup: sudo systemctl daemon-reload sudo systemctl start pulseaudio sudo systemctl enable pulseaudio","title":"Pulseaudio configuration"},{"location":"installation/raspbian/#microphone-and-speaker-configuration","text":"Get the output card: pactl list sinks short Output example with a speaker connected to the Raspberry jack: 0 alsa_output.platform-soc_audio.analog-mono module-alsa-card.c s16le 1ch 44100Hz IDLE 1 alsa_output.hw_0_0 module-alsa-sink.c s16le 2ch 48000Hz IDLE Here we see that: - the analog audio (where the jack is connected) is on card 0 - the fixed output (with less delay on pulseaudio) on card 1 Note: If you use a USB sound card for output there is no delay at all. Get the input (microphone card): pactl list sources short Output example with a PS3 eye (which has a great Mircophone array for a cheap price) connected: 0 alsa_output.platform-soc_audio.analog-mono.monitor module-alsa-card.c s16le 1ch 44100Hz SUSPENDED 1 alsa_input.usb-OmniVision_Technologies__Inc._USB_Camera-B4.09.24.1-01.multichannel-input module-alsa-card.c s16le 4ch 16000Hz SUSPENDED Here we see: - analog-mono.monitor which is used for e.g stereo mix (What we don't need) - The PS3 eye USB camera with the built in microphone array Now we can set our desire default input and output device. To set the default output to the analog audio jack of the raspberry: pactl set-default-sink 1 To set the default input, in this case the PS3 eye: pactl set-default-source 1 Adjust the microphone sensibility by running alsamixer: alsamixer By pressing F5 you can set the microphone sensibility and speaker level for pulseaudio: Note: After changing the default input or output, you have to restart Kalliope","title":"Microphone and speaker configuration"},{"location":"installation/raspbian/#hdmi-analog-audio","text":"By default, the audio stream will use HDMI if something is plugged into this port. Check the official documentation to switch from HDMI to analog. sudo raspi-config","title":"HDMI / Analog audio"},{"location":"installation/raspbian/#configure-your-locales","text":"Locales defines language and country specific setting for your programs and shell session. To set system\u2019s locale you need use shell variable. For example, LANG variable can be used to set en_US (English US) language. Check current locales: locale To update your locale, type the command bellow: sudo dpkg-reconfigure locales Select in the list the locales of your country, by selecting the code with UTF8, example: de_DE.utf8 en_GB.utf8 fr_FR.utf8 es_ES.utf8 Then, update your /home/pi/.bashrc file by exporting the language. Example: export LC_ALL = \"en_US.UTF-8\" export LANG = \"en_US.UTF-8\" export LANGUAGE = \"en_US.UTF-8\" Source the file to handle changes source /home/pi/.bashrc","title":"Configure your locales"},{"location":"installation/raspbian/#test-your-env","text":"","title":"Test your env"},{"location":"installation/raspbian/#check-your-microphone-and-speaker-config","text":"To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope.","title":"Check your microphone and speaker config"},{"location":"installation/raspbian/#optional-start-kalliope-automatically-after-a-reboot","text":"If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"(Optional) Start Kalliope automatically after a reboot"},{"location":"installation/ubuntu/","text":"Kalliope requirements for Ubuntu Pre requisite Ubuntu 18.04 Install some required system libraries and software: sudo apt update sudo apt install -y \\ git python3-dev python3.7-dev libsmpeg0 libttspico-utils flac \\ libffi-dev libssl-dev portaudio19-dev build-essential \\ libatlas3-base mplayer wget vim sudo locales alsa-base alsa-utils \\ pulseaudio-utils libasound2-plugins python3-pyaudio libasound-dev \\ libportaudio2 libportaudiocpp0 ffmpeg Ubuntu 20.04 Install some required system libraries and software: sudo apt update sudo apt install -y \\ git python3-dev libsmpeg0 libttspico-utils flac \\ libffi-dev libssl-dev portaudio19-dev build-essential \\ libatlas3-base mplayer wget vim sudo locales alsa-base alsa-utils \\ pulseaudio-utils libasound2-plugins python3-pyaudio libasound-dev \\ libportaudio2 libportaudiocpp0 ffmpeg Install lasted version of the python package manager Install the last release of python-pip wget https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py Kalliope installation Note: Python 2 is not supported anymore Method 1 - User install using the PIP package You can install kalliope on your system by using Pypi: sudo pip3 install kalliope Method 2 - Manual setup using sources Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install . Method 3 - Developer install using Virtualenv Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install . Method 4 - Developer, dependencies install only Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt Test your env Check your microphone and speaker config To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope. (Optional) Start Kalliope automatically after a reboot If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"Ubuntu"},{"location":"installation/ubuntu/#kalliope-requirements-for-ubuntu","text":"","title":"Kalliope requirements for Ubuntu"},{"location":"installation/ubuntu/#pre-requisite","text":"","title":"Pre requisite"},{"location":"installation/ubuntu/#ubuntu-1804","text":"Install some required system libraries and software: sudo apt update sudo apt install -y \\ git python3-dev python3.7-dev libsmpeg0 libttspico-utils flac \\ libffi-dev libssl-dev portaudio19-dev build-essential \\ libatlas3-base mplayer wget vim sudo locales alsa-base alsa-utils \\ pulseaudio-utils libasound2-plugins python3-pyaudio libasound-dev \\ libportaudio2 libportaudiocpp0 ffmpeg","title":"Ubuntu 18.04"},{"location":"installation/ubuntu/#ubuntu-2004","text":"Install some required system libraries and software: sudo apt update sudo apt install -y \\ git python3-dev libsmpeg0 libttspico-utils flac \\ libffi-dev libssl-dev portaudio19-dev build-essential \\ libatlas3-base mplayer wget vim sudo locales alsa-base alsa-utils \\ pulseaudio-utils libasound2-plugins python3-pyaudio libasound-dev \\ libportaudio2 libportaudiocpp0 ffmpeg","title":"Ubuntu 20.04"},{"location":"installation/ubuntu/#install-lasted-version-of-the-python-package-manager","text":"Install the last release of python-pip wget https://bootstrap.pypa.io/get-pip.py sudo python3 get-pip.py","title":"Install lasted version of the python package manager"},{"location":"installation/ubuntu/#kalliope-installation","text":"Note: Python 2 is not supported anymore","title":"Kalliope installation"},{"location":"installation/ubuntu/#method-1-user-install-using-the-pip-package","text":"You can install kalliope on your system by using Pypi: sudo pip3 install kalliope","title":"Method 1 - User install using the PIP package"},{"location":"installation/ubuntu/#method-2-manual-setup-using-sources","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the project: sudo python3 -m pip install .","title":"Method 2 - Manual setup using sources"},{"location":"installation/ubuntu/#method-3-developer-install-using-virtualenv","text":"Install the python-virtualenv package: sudo pip3 install virtualenv Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Generate a local python3 virtual environment: virtualenv venv -p /usr/bin/python3 Activate the local environment: source venv/bin/activate Install Kalliope python3 -m pip install .","title":"Method 3 - Developer install using Virtualenv"},{"location":"installation/ubuntu/#method-4-developer-dependencies-install-only","text":"Clone the project: git clone https://github.com/kalliope-project/kalliope.git cd kalliope Install the python dependencies directly: sudo pip3 install -r install/files/python_requirements.txt","title":"Method 4 - Developer, dependencies install only"},{"location":"installation/ubuntu/#test-your-env","text":"","title":"Test your env"},{"location":"installation/ubuntu/#check-your-microphone-and-speaker-config","text":"To ensure that you can record your voice, run the following command to capture audio input from your microphone: rec test.wav Press CTRL-C after capturing a sample of your voice. Then play the recorded audio file mplayer test.wav Your installation is now complete, let's take a look now to the getting started documentation to learn how to use Kalliope.","title":"Check your microphone and speaker config"},{"location":"installation/ubuntu/#optional-start-kalliope-automatically-after-a-reboot","text":"If you want to start Kalliope automatically: Place the script bellow in /etc/systemd/system/kalliope.service . Update the path <my_config_path> with the path where you've placed your brain.yml and settings.yml . Update the <username> with a non root user. For example, on Raspbian you can set pi . [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = <my_config_path> Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = <username> [ Install ] WantedBy = multi-user.target E.g [ Unit ] Description = Kalliope After = pulseaudio.service [ Service ] WorkingDirectory = /home/pi/my_kalliope_config Environment = 'STDOUT=/var/log/kalliope.log' Environment = 'STDERR=/var/log/kalliope.err.log' ExecStart = /bin/bash -c \"/usr/local/bin/kalliope start > ${ STDOUT } 2> ${ STDERR } \" User = pi [ Install ] WantedBy = multi-user.target Create both log files and give rights to you user sudo touch /var/log/kalliope.log sudo touch /var/log/kalliope.err.log sudo chown pi:pi /var/log/kalliope* Then, reload systemctl, start the service and enable it at startup sudo systemctl daemon-reload sudo systemctl start kalliope sudo systemctl enable kalliope Check that the service is ok sudo systemctl status kalliope","title":"(Optional) Start Kalliope automatically after a reboot"},{"location":"installation/upgrade/","text":"Kalliope upgrade Check my current version of Kalliope Run the command below to check your current version kalliope --version Kalliope 0.5.3 You can check the last available version on pypi.org Upgrade There is multiple way to upgrade Kalliope depending on the way you've installed it. Upgrade via pip If you've installed Kalliope from the pip package, you can upgrade with: pip3 install --upgrade kalliope Upgrade from source code If you've installed Kalliope from the source code, get the last version of via git: cd /path/to/kalliope_folder git pull Then run the installer sudo python3 setup.py install","title":"Upgrade"},{"location":"installation/upgrade/#kalliope-upgrade","text":"","title":"Kalliope upgrade"},{"location":"installation/upgrade/#check-my-current-version-of-kalliope","text":"Run the command below to check your current version kalliope --version Kalliope 0.5.3 You can check the last available version on pypi.org","title":"Check my current version of Kalliope"},{"location":"installation/upgrade/#upgrade","text":"There is multiple way to upgrade Kalliope depending on the way you've installed it.","title":"Upgrade"},{"location":"installation/upgrade/#upgrade-via-pip","text":"If you've installed Kalliope from the pip package, you can upgrade with: pip3 install --upgrade kalliope","title":"Upgrade via pip"},{"location":"installation/upgrade/#upgrade-from-source-code","text":"If you've installed Kalliope from the source code, get the last version of via git: cd /path/to/kalliope_folder git pull Then run the installer sudo python3 setup.py install","title":"Upgrade from source code"},{"location":"settings/settings/","text":"settings.yml This part of the documentation explains the main configuration of Kalliope placed in the settings.yml file. Kalliope will look for the settings file in the order bellow: From you current folder, E.g /home/pi/my_kalliope/settings.yml From /etc/kalliope/settings.yml From the default settings.yml located in the root of the project tree. Triggers configuration default_trigger The trigger is the engine in charge of detecting the hotword that will wake up Kalliope. Common usage of hotword include \"Alexa\" on Amazon Echo, \"OK Google\" on some Android devices and \"Hey Siri\" on iPhones. Specify the name of the trigger module you want to use. default_trigger : \"trigger_name\" E.g default_trigger : \"snowboy\" triggers The hotword (also called a wake word or trigger word) detector is the engine in charge of waking up Kalliope. Each Trigger has it own configuration. This configuration is passed as argument following the syntax bellow triggers : - trigger_name : parameter_name : \"value\" E.g, the default Snowboy trigger configuration is triggers : - snowboy : pmdl_file : \"trigger/snowboy/resources/model.pmdl\" Settings example default_trigger : \"snowboy\" triggers : - snowboy : pmdl_file : \"trigger/snowboy/resources/model.pmdl\" Available trigger engine Doc Note snowboy Based on Snowboy software Players configuration The player is the library/software used to make Kalliope talk. With Kalliope project, you can set whatever sound player you want to use. default_player Specify the name of the player module you want to use. default_player : \"player_name\" E.g default_player : \"mplayer\" players Each Players has it own configuration. This configuration is passed as argument following the syntax bellow players : - player_name : parameter_name : \"value\" When no parameters are required set an empty object: players : - mplayer : {} Settings example players : - mplayer : {} - pyalsaaudio : device : \"default\" convert_to_wav : True - pyaudioplayer : convert_to_wav : True - sounddeviceplayer : convert_to_wav : True Note: Sometime, parameters will be necessary to use an engine. Click on a Player engine link in the Current CORE Available Players section to know which parameter are required. Note: A player which does not ask for input parameters need to be declared as an empty dict. E.g: - player_name: {} Note: Core players are already packaged with the installation of Kalliope an can be used out of the box. Note: Most cloud based TTS generate a file in MP3 format. Some players are not able to read this format and then a conversion to wav is needed. Available players Core Players are already packaged with the installation of Kalliope an can be used out of the box. Doc Note mplayer Based on mplayer software pyalsaaudio Based on pyalsaaudio lib pyaudioplayer Based on pyaudio lib sounddeviceplayer Based on sounddevice lib Speech to text configuration default_speech_to_text A Speech To Text(STT) is an engine used to translate what you say into a text that can be processed by Kalliope core. By default, Kalliope uses google STT engine. The following syntax is used to provide the engine name: default_speech_to_text : \"stt_name\" E.g default_speech_to_text : \"google\" speech_to_text Each STT has it own configuration. This configuration is passed as argument as shown bellow speech_to_text : - stt_name : parameter_name : \"value\" E.g: speech_to_text : - google : language : \"fr-FR\" - bing Settings example default_speech_to_text: \"google\" speech_to_text: - google: language: \"fr-FR\" - wit: key: \"MYKEYS\" - bing: key: \"MYKEYS\" - apiai: key: \"MYKEYS\" language: \"fr\" - houndify: key: \"MYKEYS\" client_id: \"MYCLIENTID\" Available STT Core STTs are already packaged with the installation of Kalliope an can be used out of the box. Name Type apiai Cloud based Bing Cloud based CMUSphinx Self hosted Google Cloud based Houndify Cloud based wit.ai Cloud based Text to speech configuration default_text_to_speech A Text To Speech is an engine used to translate written text into a speech, into an audio stream. By default, Kalliope use Pico2wave TTS engine. The following syntax is used to provide the TTS engine name default_text_to_speech : \"tts_name\" Eg default_text_to_speech: \"pico2wave\" text_to_speech Each TTS has it own configuration. This configuration is passed as argument following the syntax bellow text_to_speech : - tts_name : parameter_name : \"value\" E.g text_to_speech : - pico2wave : language : \"fr-FR\" - googletts : language : \"fr\" cache_path TTS engines work all the same, we give them a text, they give back an audio file and we play the audio file. The generated audio file is placed in cache until it is played by the audio player. Before generating a new audio file, Kalliope will take a look to the cache to load it directly without having to call the TSS engine if the file has been generated before. You must set a path where the cache will be saved in the tag cache_path . This one is placed in /tmp by default. cache_path: \"/tmp/kalliope_tts_cache\" Note: The path must be a valid path, and the current user must has enough right to read and write in it. Note: The consumed disk space can dramatically increase in the cache path folder. It is recommended to set your neuron correctly to clean up automatically generated audio files that will not be played more than once. Settings example default_text_to_speech : \"voicerss\" cache_path : \"/tmp/kalliope_tts_cache\" text_to_speech : - pico2wave : language : \"fr-FR\" cache : True - acapela : language : \"sonid15\" voice : \"Manon\" cache : False - googletts : language : \"fr\" - voicerss : language : \"fr-fr\" cache : True Available TTS Core TTSs are already packaged with the installation of Kalliope an can be used out of the box. Name Type espeak Self hosted googletts Cloud based marytts Self hosted pico2wave Self hosted voicerss Cloud based watson Cloud based Hooks Hooking allow to bind actions to events based on the lifecycle of Kalliope. For example, it's useful to know when Kalliope has detected the hotword from the trigger engine and make her spell out loud that she's ready to listen your order. To use a hook, attach the name of the hook to a synapse (or list of synapse) which exists in your brain. Syntax: hooks : hook_name1 : synapse_name hook_name2 : - synapse_name_1 - synapse_name_2 E.g. hooks : on_start : \"on-start-synapse\" List of available hook Hook name Description on_start When kalliope is started. This hook will only be triggered once on_waiting_for_trigger When Kalliope waits for the hotword detection on_triggered When the hotword has been detected on_start_listening When the Speech to Text engine is listening for an order on_stop_listening When the Speech to Text engine stop listening for an order on_order_found When the pronounced order has been found in the brain on_order_not_found When the pronounced order has not been found in the brain on_processed_synapses When all neurons in synapses have been processed on_deaf When Kalliope switches from non deaf to deaf on_undeaf When Kalliope switches from deaf to non deaf on_mute When Kalliope switches from non mute to mute on_unmute When Kalliope switches from mute to non mute on_start_speaking When Kalliope starts speaking via the text to speech engine on_stop_speaking When Kalliope stops speaking on_stt_error When an error appeared during the STT processing Settings example Example: You want to hear a random answer when the hotword has been triggered settings.yml hooks : on_triggered : \"on-triggered-synapse\" brain.yml - name : \"on-triggered-synapse\" signals : [] neurons : - say : message : - \"yes sir?\" - \"I'm listening\" - \"I'm listening to you\" - \"sir?\" - \"what can i do for you?\" - \"Speaking\" - \"how can i help you?\" Example: You want to know that your order has not been found settings.yml hooks : on_order_not_found : \"order-not-found-synapse\" brain.yml - name : \"order-not-found-synapse\" signals : [] neurons : - say : message : - \"I haven't understood\" - \"I don't know this order\" - \"Please renew your order\" - \"Would you please reword your order\" - \"Can ou please reformulate your order\" - \"I don't recognize that order\" Example: You are running Kalliope on a Rpi. You've made a script that turn on or off a led. You can call this script every time kalliope start or stop speaking settings.yaml hooks : on_start_speaking : \"turn-on-led\" on_stop_speaking : \"turn-off-led\" brain.yml - name : \"turn-on-led\" signals : [] neurons : - script : path : \"/path/to/script.sh on\" - name : \"turn-off-led\" signals : [] neurons : - script : path : \"/path/to/script.sh off\" Note: You cannot use a neurotransmitter neuron inside a synapse called from a hook. You cannot use the \"say\" neuron inside the \"on_start_speaking\" or \"on_stop_speaking\" or it will create an infinite loop Rest API A Rest API can be activated in order to: List synapses Get synapse's detail Run a synapse Update settings Update the brain For the complete API ref see the REST API documentation Settings examples: rest_api : active : True port : 5000 password_protected : True login : admin password : secret allowed_cors_origin : \"*\" parameter type comment active boolean To enable the rest api server port integer TThe listening port of the web server. Must be an integer in range 1024-65535 password_protected boolean If True , the whole api will be password protected login string Login used by the basic HTTP authentication. Must be provided if password_protected is True password string Password used by the basic HTTP authentication. Must be provided if password_protected is True allowed_cors_origin string Allow request from external application. See examples bellow Cors request If you want to allow request from external application, you'll need to enable the CORS requests settings by defining authorized origins. To do so, just indicated the origins that are allowed to leverage the API. The authorize values are: False to forbid CORS request. allowed_cors_origin : False or either a string or a list: allowed_cors_origin: \"*\" (in case of \"*\", all origins are accepted). or allowed_cors_origin: - 'http://mydomain.com/*' - 'http://localhost:4200/*' Remember that an origin is composed of the scheme (http(s)), the port (eg: 80, 4200,\u2026) and the domain (mydomain.com, localhost). Resources directory The resources directory is the path where Kalliope will try to load community modules like Neurons, STTs or TTSs. Set a valid path is required if you want to install community neuron. The path can be relative or absolute. resource_directory : resource_name : \"path\" E.g resource_directory : neuron : \"resources/neurons\" stt : \"resources/stt\" tts : \"resources/tts\" trigger : \"/full/path/to/trigger\" Global Variables The Global Variables paths list where to load the global variables. Those variables can be reused in neuron parameters within double brackets. E.g var_files : - variables . yml - variables2 . yml Note: If a variable is defined in different files, the last file defines the value. In the files the variables are defined by key/value: variable : 60 baseURL : \"http://blabla.com/\" password : \"secret\" And use variables in your neurons: - name : \"run-simple-sleep\" signals : - order : \"Wait for me \" neurons : - uri : url : \"{{baseURL}}get/1\" user : \"admin\" password : \"{{password}}\" Note: Because YAML format does no allow double braces not surrounded by quotes: you must use the variable between double quotes. A global variable can be a dictionary. Example: contacts : nico : \"1234\" tibo : \"5678\" And a synapse that use this dict: - name : \"test-var\" signals : - order : \"give me the number of {{ contact_to_search }}\" neurons : - say : message : - \"the number is {{ contacts[contact_to_search] }}\" Options Options that can be defined for Kalliope. Example config options : mute : True deaf : False Available options: Option Default Description mute False When mute, the STT engine will not be used to make Kalliope talking during neurons execution deaf False When deaf, the trigger engine is not started. Kalliope will not listen for a wake up word recognizer_multiplier 1.0 The multiplier acts on the Threshold recognizer_energy_ratio 1.5 Is used in speech recognition to identify characteristics of audio, such as whether a person has stopped or started speaking recognizer_recording_timeout 15.0 The maximum seconds a phrase can be recorded, provided there is noise the entire time recognizer_recording_timeout_with_silence 3.0 The maximum time it will continue to record silence when not enough noise has been detected send_anonymous_usage_stats This flag allow Kalliope to send some stats in order to anonymously evaluate the global usage of Kalliope app by users. Syntax: send_anonymous_usage_stats: <boolean> E.g: send_anonymous_usage_stats : False","title":"settings.yml"},{"location":"settings/settings/#settingsyml","text":"This part of the documentation explains the main configuration of Kalliope placed in the settings.yml file. Kalliope will look for the settings file in the order bellow: From you current folder, E.g /home/pi/my_kalliope/settings.yml From /etc/kalliope/settings.yml From the default settings.yml located in the root of the project tree.","title":"settings.yml"},{"location":"settings/settings/#triggers-configuration","text":"","title":"Triggers configuration"},{"location":"settings/settings/#default_trigger","text":"The trigger is the engine in charge of detecting the hotword that will wake up Kalliope. Common usage of hotword include \"Alexa\" on Amazon Echo, \"OK Google\" on some Android devices and \"Hey Siri\" on iPhones. Specify the name of the trigger module you want to use. default_trigger : \"trigger_name\" E.g default_trigger : \"snowboy\"","title":"default_trigger"},{"location":"settings/settings/#triggers","text":"The hotword (also called a wake word or trigger word) detector is the engine in charge of waking up Kalliope. Each Trigger has it own configuration. This configuration is passed as argument following the syntax bellow triggers : - trigger_name : parameter_name : \"value\" E.g, the default Snowboy trigger configuration is triggers : - snowboy : pmdl_file : \"trigger/snowboy/resources/model.pmdl\"","title":"triggers"},{"location":"settings/settings/#settings-example","text":"default_trigger : \"snowboy\" triggers : - snowboy : pmdl_file : \"trigger/snowboy/resources/model.pmdl\"","title":"Settings example"},{"location":"settings/settings/#available-trigger-engine","text":"Doc Note snowboy Based on Snowboy software","title":"Available trigger engine"},{"location":"settings/settings/#players-configuration","text":"The player is the library/software used to make Kalliope talk. With Kalliope project, you can set whatever sound player you want to use.","title":"Players configuration"},{"location":"settings/settings/#default_player","text":"Specify the name of the player module you want to use. default_player : \"player_name\" E.g default_player : \"mplayer\"","title":"default_player"},{"location":"settings/settings/#players","text":"Each Players has it own configuration. This configuration is passed as argument following the syntax bellow players : - player_name : parameter_name : \"value\" When no parameters are required set an empty object: players : - mplayer : {}","title":"players"},{"location":"settings/settings/#settings-example_1","text":"players : - mplayer : {} - pyalsaaudio : device : \"default\" convert_to_wav : True - pyaudioplayer : convert_to_wav : True - sounddeviceplayer : convert_to_wav : True Note: Sometime, parameters will be necessary to use an engine. Click on a Player engine link in the Current CORE Available Players section to know which parameter are required. Note: A player which does not ask for input parameters need to be declared as an empty dict. E.g: - player_name: {} Note: Core players are already packaged with the installation of Kalliope an can be used out of the box. Note: Most cloud based TTS generate a file in MP3 format. Some players are not able to read this format and then a conversion to wav is needed.","title":"Settings example"},{"location":"settings/settings/#available-players","text":"Core Players are already packaged with the installation of Kalliope an can be used out of the box. Doc Note mplayer Based on mplayer software pyalsaaudio Based on pyalsaaudio lib pyaudioplayer Based on pyaudio lib sounddeviceplayer Based on sounddevice lib","title":"Available players"},{"location":"settings/settings/#speech-to-text-configuration","text":"","title":"Speech to text configuration"},{"location":"settings/settings/#default_speech_to_text","text":"A Speech To Text(STT) is an engine used to translate what you say into a text that can be processed by Kalliope core. By default, Kalliope uses google STT engine. The following syntax is used to provide the engine name: default_speech_to_text : \"stt_name\" E.g default_speech_to_text : \"google\"","title":"default_speech_to_text"},{"location":"settings/settings/#speech_to_text","text":"Each STT has it own configuration. This configuration is passed as argument as shown bellow speech_to_text : - stt_name : parameter_name : \"value\" E.g: speech_to_text : - google : language : \"fr-FR\" - bing","title":"speech_to_text"},{"location":"settings/settings/#settings-example_2","text":"default_speech_to_text: \"google\" speech_to_text: - google: language: \"fr-FR\" - wit: key: \"MYKEYS\" - bing: key: \"MYKEYS\" - apiai: key: \"MYKEYS\" language: \"fr\" - houndify: key: \"MYKEYS\" client_id: \"MYCLIENTID\"","title":"Settings example"},{"location":"settings/settings/#available-stt","text":"Core STTs are already packaged with the installation of Kalliope an can be used out of the box. Name Type apiai Cloud based Bing Cloud based CMUSphinx Self hosted Google Cloud based Houndify Cloud based wit.ai Cloud based","title":"Available STT"},{"location":"settings/settings/#text-to-speech-configuration","text":"","title":"Text to speech configuration"},{"location":"settings/settings/#default_text_to_speech","text":"A Text To Speech is an engine used to translate written text into a speech, into an audio stream. By default, Kalliope use Pico2wave TTS engine. The following syntax is used to provide the TTS engine name default_text_to_speech : \"tts_name\" Eg default_text_to_speech: \"pico2wave\"","title":"default_text_to_speech"},{"location":"settings/settings/#text_to_speech","text":"Each TTS has it own configuration. This configuration is passed as argument following the syntax bellow text_to_speech : - tts_name : parameter_name : \"value\" E.g text_to_speech : - pico2wave : language : \"fr-FR\" - googletts : language : \"fr\"","title":"text_to_speech"},{"location":"settings/settings/#cache_path","text":"TTS engines work all the same, we give them a text, they give back an audio file and we play the audio file. The generated audio file is placed in cache until it is played by the audio player. Before generating a new audio file, Kalliope will take a look to the cache to load it directly without having to call the TSS engine if the file has been generated before. You must set a path where the cache will be saved in the tag cache_path . This one is placed in /tmp by default. cache_path: \"/tmp/kalliope_tts_cache\" Note: The path must be a valid path, and the current user must has enough right to read and write in it. Note: The consumed disk space can dramatically increase in the cache path folder. It is recommended to set your neuron correctly to clean up automatically generated audio files that will not be played more than once.","title":"cache_path"},{"location":"settings/settings/#settings-example_3","text":"default_text_to_speech : \"voicerss\" cache_path : \"/tmp/kalliope_tts_cache\" text_to_speech : - pico2wave : language : \"fr-FR\" cache : True - acapela : language : \"sonid15\" voice : \"Manon\" cache : False - googletts : language : \"fr\" - voicerss : language : \"fr-fr\" cache : True","title":"Settings example"},{"location":"settings/settings/#available-tts","text":"Core TTSs are already packaged with the installation of Kalliope an can be used out of the box. Name Type espeak Self hosted googletts Cloud based marytts Self hosted pico2wave Self hosted voicerss Cloud based watson Cloud based","title":"Available TTS"},{"location":"settings/settings/#hooks","text":"Hooking allow to bind actions to events based on the lifecycle of Kalliope. For example, it's useful to know when Kalliope has detected the hotword from the trigger engine and make her spell out loud that she's ready to listen your order. To use a hook, attach the name of the hook to a synapse (or list of synapse) which exists in your brain. Syntax: hooks : hook_name1 : synapse_name hook_name2 : - synapse_name_1 - synapse_name_2 E.g. hooks : on_start : \"on-start-synapse\" List of available hook Hook name Description on_start When kalliope is started. This hook will only be triggered once on_waiting_for_trigger When Kalliope waits for the hotword detection on_triggered When the hotword has been detected on_start_listening When the Speech to Text engine is listening for an order on_stop_listening When the Speech to Text engine stop listening for an order on_order_found When the pronounced order has been found in the brain on_order_not_found When the pronounced order has not been found in the brain on_processed_synapses When all neurons in synapses have been processed on_deaf When Kalliope switches from non deaf to deaf on_undeaf When Kalliope switches from deaf to non deaf on_mute When Kalliope switches from non mute to mute on_unmute When Kalliope switches from mute to non mute on_start_speaking When Kalliope starts speaking via the text to speech engine on_stop_speaking When Kalliope stops speaking on_stt_error When an error appeared during the STT processing","title":"Hooks"},{"location":"settings/settings/#settings-example_4","text":"Example: You want to hear a random answer when the hotword has been triggered settings.yml hooks : on_triggered : \"on-triggered-synapse\" brain.yml - name : \"on-triggered-synapse\" signals : [] neurons : - say : message : - \"yes sir?\" - \"I'm listening\" - \"I'm listening to you\" - \"sir?\" - \"what can i do for you?\" - \"Speaking\" - \"how can i help you?\" Example: You want to know that your order has not been found settings.yml hooks : on_order_not_found : \"order-not-found-synapse\" brain.yml - name : \"order-not-found-synapse\" signals : [] neurons : - say : message : - \"I haven't understood\" - \"I don't know this order\" - \"Please renew your order\" - \"Would you please reword your order\" - \"Can ou please reformulate your order\" - \"I don't recognize that order\" Example: You are running Kalliope on a Rpi. You've made a script that turn on or off a led. You can call this script every time kalliope start or stop speaking settings.yaml hooks : on_start_speaking : \"turn-on-led\" on_stop_speaking : \"turn-off-led\" brain.yml - name : \"turn-on-led\" signals : [] neurons : - script : path : \"/path/to/script.sh on\" - name : \"turn-off-led\" signals : [] neurons : - script : path : \"/path/to/script.sh off\" Note: You cannot use a neurotransmitter neuron inside a synapse called from a hook. You cannot use the \"say\" neuron inside the \"on_start_speaking\" or \"on_stop_speaking\" or it will create an infinite loop","title":"Settings example"},{"location":"settings/settings/#rest-api","text":"A Rest API can be activated in order to: List synapses Get synapse's detail Run a synapse Update settings Update the brain For the complete API ref see the REST API documentation Settings examples: rest_api : active : True port : 5000 password_protected : True login : admin password : secret allowed_cors_origin : \"*\" parameter type comment active boolean To enable the rest api server port integer TThe listening port of the web server. Must be an integer in range 1024-65535 password_protected boolean If True , the whole api will be password protected login string Login used by the basic HTTP authentication. Must be provided if password_protected is True password string Password used by the basic HTTP authentication. Must be provided if password_protected is True allowed_cors_origin string Allow request from external application. See examples bellow Cors request If you want to allow request from external application, you'll need to enable the CORS requests settings by defining authorized origins. To do so, just indicated the origins that are allowed to leverage the API. The authorize values are: False to forbid CORS request. allowed_cors_origin : False or either a string or a list: allowed_cors_origin: \"*\" (in case of \"*\", all origins are accepted). or allowed_cors_origin: - 'http://mydomain.com/*' - 'http://localhost:4200/*' Remember that an origin is composed of the scheme (http(s)), the port (eg: 80, 4200,\u2026) and the domain (mydomain.com, localhost).","title":"Rest API"},{"location":"settings/settings/#resources-directory","text":"The resources directory is the path where Kalliope will try to load community modules like Neurons, STTs or TTSs. Set a valid path is required if you want to install community neuron. The path can be relative or absolute. resource_directory : resource_name : \"path\" E.g resource_directory : neuron : \"resources/neurons\" stt : \"resources/stt\" tts : \"resources/tts\" trigger : \"/full/path/to/trigger\"","title":"Resources directory"},{"location":"settings/settings/#global-variables","text":"The Global Variables paths list where to load the global variables. Those variables can be reused in neuron parameters within double brackets. E.g var_files : - variables . yml - variables2 . yml Note: If a variable is defined in different files, the last file defines the value. In the files the variables are defined by key/value: variable : 60 baseURL : \"http://blabla.com/\" password : \"secret\" And use variables in your neurons: - name : \"run-simple-sleep\" signals : - order : \"Wait for me \" neurons : - uri : url : \"{{baseURL}}get/1\" user : \"admin\" password : \"{{password}}\" Note: Because YAML format does no allow double braces not surrounded by quotes: you must use the variable between double quotes. A global variable can be a dictionary. Example: contacts : nico : \"1234\" tibo : \"5678\" And a synapse that use this dict: - name : \"test-var\" signals : - order : \"give me the number of {{ contact_to_search }}\" neurons : - say : message : - \"the number is {{ contacts[contact_to_search] }}\"","title":"Global Variables"},{"location":"settings/settings/#options","text":"Options that can be defined for Kalliope. Example config options : mute : True deaf : False Available options: Option Default Description mute False When mute, the STT engine will not be used to make Kalliope talking during neurons execution deaf False When deaf, the trigger engine is not started. Kalliope will not listen for a wake up word recognizer_multiplier 1.0 The multiplier acts on the Threshold recognizer_energy_ratio 1.5 Is used in speech recognition to identify characteristics of audio, such as whether a person has stopped or started speaking recognizer_recording_timeout 15.0 The maximum seconds a phrase can be recorded, provided there is noise the entire time recognizer_recording_timeout_with_silence 3.0 The maximum time it will continue to record silence when not enough noise has been detected","title":"Options"},{"location":"settings/settings/#send_anonymous_usage_stats","text":"This flag allow Kalliope to send some stats in order to anonymously evaluate the global usage of Kalliope app by users. Syntax: send_anonymous_usage_stats: <boolean> E.g: send_anonymous_usage_stats : False","title":"send_anonymous_usage_stats"},{"location":"settings/players/mplayer/","text":"Default player of kalliope. This Player is based on the mplayer engine Input parameters No parameter required Settings example default_player : \"mplayer\" players : - mplayer : {} Notes Note: This Player handles mp3 and wav format.","title":"mplayer"},{"location":"settings/players/mplayer/#input-parameters","text":"No parameter required","title":"Input parameters"},{"location":"settings/players/mplayer/#settings-example","text":"default_player : \"mplayer\" players : - mplayer : {}","title":"Settings example"},{"location":"settings/players/mplayer/#notes","text":"Note: This Player handles mp3 and wav format.","title":"Notes"},{"location":"settings/players/pyalsaaudio/","text":"This Player is based on the alsa engine Input parameters parameter required default choices comment device no \"default\" Select the device to use for alsa convert_to_wav no TRUE True, False Convert the generated file from the TTS into wav before reading Settings example Here is n example of configuration you would use if your TTS was acapela. As this TTS generate an MP3 file, this last need to be converted into wav. default_player : \"pyalsaaudio\" players : - pyalsaaudio : device : \"default\" convert_to_wav : True Notes Note: Define the default card to use in the device parameter. For example, on a Raspberry Pi, the default card can be sysdefault:CARD=ALSA Note: This Player does not handle mp3 format, converting mp3 to wav might be required if the selected TTS engine generate mp3 file.","title":"pyalsaaudio"},{"location":"settings/players/pyalsaaudio/#input-parameters","text":"parameter required default choices comment device no \"default\" Select the device to use for alsa convert_to_wav no TRUE True, False Convert the generated file from the TTS into wav before reading","title":"Input parameters"},{"location":"settings/players/pyalsaaudio/#settings-example","text":"Here is n example of configuration you would use if your TTS was acapela. As this TTS generate an MP3 file, this last need to be converted into wav. default_player : \"pyalsaaudio\" players : - pyalsaaudio : device : \"default\" convert_to_wav : True","title":"Settings example"},{"location":"settings/players/pyalsaaudio/#notes","text":"Note: Define the default card to use in the device parameter. For example, on a Raspberry Pi, the default card can be sysdefault:CARD=ALSA Note: This Player does not handle mp3 format, converting mp3 to wav might be required if the selected TTS engine generate mp3 file.","title":"Notes"},{"location":"settings/players/pyaudioplayer/","text":"This Player is based on the pyaudio engine Input parameters parameter required default choices comment convert_to_wav no TRUE True, False Convert the generated file from the TTS into wav before reading Settings example default_player : \"pyaudioplayer\" players : - pyaudioplayer : convert_to_wav : True Notes Note: This Player does not handle mp3 format, converting mp3 to wav might be required.","title":"pyaudioplayer"},{"location":"settings/players/pyaudioplayer/#input-parameters","text":"parameter required default choices comment convert_to_wav no TRUE True, False Convert the generated file from the TTS into wav before reading","title":"Input parameters"},{"location":"settings/players/pyaudioplayer/#settings-example","text":"default_player : \"pyaudioplayer\" players : - pyaudioplayer : convert_to_wav : True","title":"Settings example"},{"location":"settings/players/pyaudioplayer/#notes","text":"Note: This Player does not handle mp3 format, converting mp3 to wav might be required.","title":"Notes"},{"location":"settings/players/sounddeviceplayer/","text":"This Player is based on the sounddevice and soundfile engines Input parameters parameter required default choices comment convert_to_wav no TRUE True, False Convert the generated file from the TTS into wav before reading Settings example default_player : \"sounddeviceplayer\" players : - sounddeviceplayer : convert_to_wav : True Notes Note: This Player does not handle mp3 format, converting mp3 to wav might be required.","title":"sounddeviceplayer"},{"location":"settings/players/sounddeviceplayer/#input-parameters","text":"parameter required default choices comment convert_to_wav no TRUE True, False Convert the generated file from the TTS into wav before reading","title":"Input parameters"},{"location":"settings/players/sounddeviceplayer/#settings-example","text":"default_player : \"sounddeviceplayer\" players : - sounddeviceplayer : convert_to_wav : True","title":"Settings example"},{"location":"settings/players/sounddeviceplayer/#notes","text":"Note: This Player does not handle mp3 format, converting mp3 to wav might be required.","title":"Notes"},{"location":"settings/stt/CMUSphinx/","text":"This module is based on the self hosted STT solution CMUSPhinx engine . By default, only english language is available. You can download another language model from the main repository and install it following the official documentation . Installation Install packages sudo apt-get install swig libpulse-dev Then install the python lib sudo pip3 install pocketsphinx Input parameters parameter required type default choices comment language no string en-US Installing other languages keyword_entries no list List of tuples of the form (keyword, sensitivity), where keyword is a phrase, and sensitivity is how sensitive to this phrase the recognizer should be grammar_file no string FSG or JSGF grammars file path. Note: If keyword_entries are passed, grammar_file will be ignored Settings example default_speech_to_text : \"cmusphinx\" speech_to_text : - cmusphinx : language : \"en-US\" Using keywords Sphinx usually operates in 'transcription mode' and will return whatever words it recognizes. Adding keyword_entries to the settings narrows down its search space and is more accurate than just looking for those same keywords in non-keyword-based transcriptions, because Sphinx knows specifically what sounds to look for. The parameter keyword_entries expects a list of tuples consisting of a phrase and a sensitivity level defining how sensitive to this phrase the recognizer should be, on a scale from 0 (very insensitive, more false negatives) to 1 (very sensitive, more false positives). default_speech_to_text : \"cmusphinx\" speech_to_text : - cmusphinx : language : \"en-US\" keyword_entries : - [ \"hello\" , 0.8 ] - [ \"stop the music\" , 0.6 ]","title":"CMUSphinx"},{"location":"settings/stt/CMUSphinx/#installation","text":"Install packages sudo apt-get install swig libpulse-dev Then install the python lib sudo pip3 install pocketsphinx","title":"Installation"},{"location":"settings/stt/CMUSphinx/#input-parameters","text":"parameter required type default choices comment language no string en-US Installing other languages keyword_entries no list List of tuples of the form (keyword, sensitivity), where keyword is a phrase, and sensitivity is how sensitive to this phrase the recognizer should be grammar_file no string FSG or JSGF grammars file path. Note: If keyword_entries are passed, grammar_file will be ignored","title":"Input parameters"},{"location":"settings/stt/CMUSphinx/#settings-example","text":"default_speech_to_text : \"cmusphinx\" speech_to_text : - cmusphinx : language : \"en-US\"","title":"Settings example"},{"location":"settings/stt/CMUSphinx/#using-keywords","text":"Sphinx usually operates in 'transcription mode' and will return whatever words it recognizes. Adding keyword_entries to the settings narrows down its search space and is more accurate than just looking for those same keywords in non-keyword-based transcriptions, because Sphinx knows specifically what sounds to look for. The parameter keyword_entries expects a list of tuples consisting of a phrase and a sensitivity level defining how sensitive to this phrase the recognizer should be, on a scale from 0 (very insensitive, more false negatives) to 1 (very sensitive, more false positives). default_speech_to_text : \"cmusphinx\" speech_to_text : - cmusphinx : language : \"en-US\" keyword_entries : - [ \"hello\" , 0.8 ] - [ \"stop the music\" , 0.6 ]","title":"Using keywords"},{"location":"settings/stt/api.ai/","text":"The api.ai STT is based on the api.ai API Input parameters parameter required default choices comment key yes None User info language no en-US lang Settings example default_speech_to_text : \"apiai\" speech_to_text : - apiai : key : \"0cbff154af44944a6\" language : \"en\"","title":"api.ai"},{"location":"settings/stt/api.ai/#input-parameters","text":"parameter required default choices comment key yes None User info language no en-US lang","title":"Input parameters"},{"location":"settings/stt/api.ai/#settings-example","text":"default_speech_to_text : \"apiai\" speech_to_text : - apiai : key : \"0cbff154af44944a6\" language : \"en\"","title":"Settings example"},{"location":"settings/stt/bing/","text":"The Bing STT is based on the Microsoft Bing Voice Recognition API Input parameters parameter required default choices comment key YES None User info language No en-US lang 7 languages Settings example default_speech_to_text : \"bing\" speech_to_text : - bing : key : \"9e48ddaf75904838bedc11aea6b36fb0\" language : \"en-US\"","title":"Bing"},{"location":"settings/stt/bing/#input-parameters","text":"parameter required default choices comment key YES None User info language No en-US lang 7 languages","title":"Input parameters"},{"location":"settings/stt/bing/#settings-example","text":"default_speech_to_text : \"bing\" speech_to_text : - bing : key : \"9e48ddaf75904838bedc11aea6b36fb0\" language : \"en-US\"","title":"Settings example"},{"location":"settings/stt/google/","text":"The google STT is based on the Google Speech Recognition API . This STT is free for less than 60 minutes of usage per month. After that you need a subscription. Input parameters parameter required default choices comment key No None language No en-US lang LCID string Settings example Free usage default_speech_to_text : \"google\" speech_to_text : - google : language : \"fr-FR\" For paying users default_speech_to_text : \"google\" speech_to_text : - google : language : \"fr-FR\" key : \"my_google_stt_key\"","title":"Google"},{"location":"settings/stt/google/#input-parameters","text":"parameter required default choices comment key No None language No en-US lang LCID string","title":"Input parameters"},{"location":"settings/stt/google/#settings-example","text":"Free usage default_speech_to_text : \"google\" speech_to_text : - google : language : \"fr-FR\" For paying users default_speech_to_text : \"google\" speech_to_text : - google : language : \"fr-FR\" key : \"my_google_stt_key\"","title":"Settings example"},{"location":"settings/stt/houndify/","text":"This STT is based on the Houndify engine. This STT support english only. Input parameters parameter required default choices comment key Yes None User info client_id Yes None User info Settings example default_speech_to_text : \"houndify\" speech_to_text : - houndify : key : \"my_user_key\" client_id : \"my_user_client_id\"","title":"Houndify"},{"location":"settings/stt/houndify/#input-parameters","text":"parameter required default choices comment key Yes None User info client_id Yes None User info","title":"Input parameters"},{"location":"settings/stt/houndify/#settings-example","text":"default_speech_to_text : \"houndify\" speech_to_text : - houndify : key : \"my_user_key\" client_id : \"my_user_client_id\"","title":"Settings example"},{"location":"settings/stt/wit.ai/","text":"The wit STT is based on the Wit.ai API Input parameters parameter required default choices comment key Yes None User info Settings example default_speech_to_text : \"wit\" speech_to_text : - wit : key : \"my_user_key\"","title":"wit.ai"},{"location":"settings/stt/wit.ai/#input-parameters","text":"parameter required default choices comment key Yes None User info","title":"Input parameters"},{"location":"settings/stt/wit.ai/#settings-example","text":"default_speech_to_text : \"wit\" speech_to_text : - wit : key : \"my_user_key\"","title":"Settings example"},{"location":"settings/triggers/snowboy/","text":"Parameters You can create your magic word by connecting to Snowboy and then download the trained model file. Once downloaded, place the file in your personal config folder and configure snowboy in your your settings following the table bellow Snowboy config: parameter required type default choices comment keywords TRUE list List of Keyword objects apply_frontend FALSE string False True/False Some universal models (umdl files) need apply_frontend to work properly. See explanation below Keyword object: parameter required type default choices comment file_path TRUE string Path to the snowboy model file. The path can be absolute or relative to the brain file sensitivity FALSE string/list 0.5 between 0 and 1 Increasing the sensitivity value lead to better detection rate, but also higher false alarm rate. For some umdl models, it can be a string or a list of strings Notes apply_frontend If apply_frontend is true, then apply frontend audio processing; otherwise turns the audio processing off. Frontend audio processing includes algorithms such as automatic gain control (AGC), noise suppression (NS) and so on. Generally adding frontend audio processing helps the performance, but if the model is not trained with frontend audio processing, it may decrease the performance. The general rule of thumb is: 1. For personal models , set it to false . 2. For universal models , follow the instruction of each published model As the apply_frontend flag can only be set globally, please make sure that models you are using are all supporting it if you enable it. Universal models Some universal models contains two keywords, if we want to set a custom sensitivity we need to add two sensitivities for each keyword. Configuration examples Example settings for single keyword # This is the trigger engine that will catch your magic work to wake up Kalliope. default_trigger : \"snowboy\" # Trigger engine configuration triggers : - snowboy : keywords : - file_path : \"trigger/kalliope-FR.pmdl\" sensitivity : \"0.6\" Example settings for multiple keywords, where we set the sensitivity for jarvis.umdl and set apply_frontend to True # This is the trigger that will catch your magic work to wake up Kalliope default_trigger : \"snowboy\" triggers : - snowboy : apply_frontend : True keywords : - file_path : \"trigger/kalliope-FR.pmdl\" - file_path : \"trigger/jarvis.umdl\" sensitivity : - \"0.6\" - \"0.7\" Available Snowboy models If you want to keep \"Kalliope\" as the name of your bot, we recommend you to enhance the existing Snowboy model for your language . We will update the following list with all Kalliope model created by the community. If the model doesn't exist, please create one with the following syntax: kalliope-<language_code> E.g kalliope-FR kalliope-EN kalliope-RU kalliope-DE kalliope-IT Then, open an issue or create a pull request to add the model to the list bellow. Important note: Do not enhance a model in the wrong language. Check the pronunciation before recording your voice! Name language Pronounced kalliope-FR French Ka-lio-p\u00e9 kalliope-EN English k\u0259-LIE-\u0259-pee kalliope-RU Russian \u043a\u0430\u043b\u043b\u0438\u043e\u043f\u0430 kalliope-DE German Ka-lio-pe kalliope-IT Italian Ka-lljo-pe Pretrained universal models Snowboy provides pretrained universal models. You can find them here . Here is the list of the umdl models, and the parameters that you have to use for them: alexa.umdl: Universal model for the hotword \"Alexa\". Set apply_frontend to True . snowboy.umdl: Universal model for the hotword \"Snowboy\". Set apply_frontend to False . jarvis.umdl: Universal model for the hotword \"Jarvis\". It has two different models for the hotword Jarvis, so you have to use two sensitivites. Set apply_frontend to True . smart_mirror.umdl: Universal model for the hotword \"Smart Mirror\". Set apply_frontend to False . subex.umdl: Universal model for the hotword \"Subex\". Set apply_frontend to true. neoya.umdl: Universal model for the hotword \"Neo ya\". It has two different models for the hotword \"Neo ya\", so you have to use two sensitivites. Set apply_frontend to True . hey_extreme.umdl: Universal model for the hotword \"Hey Extreme\". Set apply_frontend to True . computer.umdl: Universal model for the hotword \"Computer\". Set apply_frontend to True . view_glass.umdl: Universal model for the hotword \"View Glass\". Set apply_frontend to True . Note Snowboy is shutting down by Dec. 31st, 2020. After the shutdown the trigger will still work, but we will be unable to create new keywords.","title":"Snowboy"},{"location":"settings/triggers/snowboy/#parameters","text":"You can create your magic word by connecting to Snowboy and then download the trained model file. Once downloaded, place the file in your personal config folder and configure snowboy in your your settings following the table bellow Snowboy config: parameter required type default choices comment keywords TRUE list List of Keyword objects apply_frontend FALSE string False True/False Some universal models (umdl files) need apply_frontend to work properly. See explanation below Keyword object: parameter required type default choices comment file_path TRUE string Path to the snowboy model file. The path can be absolute or relative to the brain file sensitivity FALSE string/list 0.5 between 0 and 1 Increasing the sensitivity value lead to better detection rate, but also higher false alarm rate. For some umdl models, it can be a string or a list of strings","title":"Parameters"},{"location":"settings/triggers/snowboy/#notes","text":"","title":"Notes"},{"location":"settings/triggers/snowboy/#apply_frontend","text":"If apply_frontend is true, then apply frontend audio processing; otherwise turns the audio processing off. Frontend audio processing includes algorithms such as automatic gain control (AGC), noise suppression (NS) and so on. Generally adding frontend audio processing helps the performance, but if the model is not trained with frontend audio processing, it may decrease the performance. The general rule of thumb is: 1. For personal models , set it to false . 2. For universal models , follow the instruction of each published model As the apply_frontend flag can only be set globally, please make sure that models you are using are all supporting it if you enable it.","title":"apply_frontend"},{"location":"settings/triggers/snowboy/#universal-models","text":"Some universal models contains two keywords, if we want to set a custom sensitivity we need to add two sensitivities for each keyword.","title":"Universal models"},{"location":"settings/triggers/snowboy/#configuration-examples","text":"Example settings for single keyword # This is the trigger engine that will catch your magic work to wake up Kalliope. default_trigger : \"snowboy\" # Trigger engine configuration triggers : - snowboy : keywords : - file_path : \"trigger/kalliope-FR.pmdl\" sensitivity : \"0.6\" Example settings for multiple keywords, where we set the sensitivity for jarvis.umdl and set apply_frontend to True # This is the trigger that will catch your magic work to wake up Kalliope default_trigger : \"snowboy\" triggers : - snowboy : apply_frontend : True keywords : - file_path : \"trigger/kalliope-FR.pmdl\" - file_path : \"trigger/jarvis.umdl\" sensitivity : - \"0.6\" - \"0.7\"","title":"Configuration examples"},{"location":"settings/triggers/snowboy/#available-snowboy-models","text":"If you want to keep \"Kalliope\" as the name of your bot, we recommend you to enhance the existing Snowboy model for your language . We will update the following list with all Kalliope model created by the community. If the model doesn't exist, please create one with the following syntax: kalliope-<language_code> E.g kalliope-FR kalliope-EN kalliope-RU kalliope-DE kalliope-IT Then, open an issue or create a pull request to add the model to the list bellow. Important note: Do not enhance a model in the wrong language. Check the pronunciation before recording your voice! Name language Pronounced kalliope-FR French Ka-lio-p\u00e9 kalliope-EN English k\u0259-LIE-\u0259-pee kalliope-RU Russian \u043a\u0430\u043b\u043b\u0438\u043e\u043f\u0430 kalliope-DE German Ka-lio-pe kalliope-IT Italian Ka-lljo-pe","title":"Available Snowboy models"},{"location":"settings/triggers/snowboy/#pretrained-universal-models","text":"Snowboy provides pretrained universal models. You can find them here . Here is the list of the umdl models, and the parameters that you have to use for them: alexa.umdl: Universal model for the hotword \"Alexa\". Set apply_frontend to True . snowboy.umdl: Universal model for the hotword \"Snowboy\". Set apply_frontend to False . jarvis.umdl: Universal model for the hotword \"Jarvis\". It has two different models for the hotword Jarvis, so you have to use two sensitivites. Set apply_frontend to True . smart_mirror.umdl: Universal model for the hotword \"Smart Mirror\". Set apply_frontend to False . subex.umdl: Universal model for the hotword \"Subex\". Set apply_frontend to true. neoya.umdl: Universal model for the hotword \"Neo ya\". It has two different models for the hotword \"Neo ya\", so you have to use two sensitivites. Set apply_frontend to True . hey_extreme.umdl: Universal model for the hotword \"Hey Extreme\". Set apply_frontend to True . computer.umdl: Universal model for the hotword \"Computer\". Set apply_frontend to True . view_glass.umdl: Universal model for the hotword \"View Glass\". Set apply_frontend to True .","title":"Pretrained universal models"},{"location":"settings/triggers/snowboy/#note","text":"Snowboy is shutting down by Dec. 31st, 2020. After the shutdown the trigger will still work, but we will be unable to create new keywords.","title":"Note"},{"location":"settings/tts/espeak/","text":"This TTS is based on the eSpeak engine . Input parameters Parameters Required Default Choices Comment voice yes all voice installed see the full list with command \"espeak --voices=LANGUAGE\" variant no all language installed see the full list with command \"espeak --voices=variant\" speed no 160 80 to 450 Speed in words per minute amplitude no 100 0 to 200 Amplitude pitch no 50 0 to 99 Pitch adjustment path no /usr/bin/espeak 0 to 99 Path of espeak cache no TRUE True if you want to use the cache with this TTS Installation Espeak package need to be installed sudo apt-get install espeak To see the full list of language and voices: espeak --voices To see the full list of voices: espeak --voices = LANGUAGE Example: espeak --voices=fr Pty Language Age/Gender VoiceName File Other Languages 5 fr-fr M french fr (fr 5) 7 fr M french-mbrola-1 mb/mb-fr1 7 fr F french-mbrola-4 mb/mb-fr4 5 fr-be M french-Belgium europe/fr-be (fr 8) Configuration for \"7 fr M french-mbrola-1 mb/mb-fr1\" voice : \"mb-fr1\" To see the full list of variant: espeak --voices = variant Example: espeak -- voices = variant Pty Language Age / Gender VoiceName File Other Languages 5 variant F female2 ! v / f2 5 variant F female3 ! v / f3 5 variant F female4 ! v / f4 5 variant F female5 ! v / f5 5 variant F female_whisper ! v / whisperf 5 variant - klatt ! v / klatt 5 variant - klatt2 ! v / klatt2 [ ... ] Configuration for \"5 variant F female3 !v/f3\". voice : \"fr\" variant : \"f3\" Settings example default_text_to_speech : \"espeak\" text_to_speech : - espeak : voice : \"fr\" variant : \"f3\"","title":"espeak"},{"location":"settings/tts/espeak/#input-parameters","text":"Parameters Required Default Choices Comment voice yes all voice installed see the full list with command \"espeak --voices=LANGUAGE\" variant no all language installed see the full list with command \"espeak --voices=variant\" speed no 160 80 to 450 Speed in words per minute amplitude no 100 0 to 200 Amplitude pitch no 50 0 to 99 Pitch adjustment path no /usr/bin/espeak 0 to 99 Path of espeak cache no TRUE True if you want to use the cache with this TTS","title":"Input parameters"},{"location":"settings/tts/espeak/#installation","text":"Espeak package need to be installed sudo apt-get install espeak To see the full list of language and voices: espeak --voices To see the full list of voices: espeak --voices = LANGUAGE Example: espeak --voices=fr Pty Language Age/Gender VoiceName File Other Languages 5 fr-fr M french fr (fr 5) 7 fr M french-mbrola-1 mb/mb-fr1 7 fr F french-mbrola-4 mb/mb-fr4 5 fr-be M french-Belgium europe/fr-be (fr 8) Configuration for \"7 fr M french-mbrola-1 mb/mb-fr1\" voice : \"mb-fr1\" To see the full list of variant: espeak --voices = variant Example: espeak -- voices = variant Pty Language Age / Gender VoiceName File Other Languages 5 variant F female2 ! v / f2 5 variant F female3 ! v / f3 5 variant F female4 ! v / f4 5 variant F female5 ! v / f5 5 variant F female_whisper ! v / whisperf 5 variant - klatt ! v / klatt 5 variant - klatt2 ! v / klatt2 [ ... ] Configuration for \"5 variant F female3 !v/f3\". voice : \"fr\" variant : \"f3\"","title":"Installation"},{"location":"settings/tts/espeak/#settings-example","text":"default_text_to_speech : \"espeak\" text_to_speech : - espeak : voice : \"fr\" variant : \"f3\"","title":"Settings example"},{"location":"settings/tts/googletts/","text":"This TTS is based on the Google translate engine Input parameters Parameters Required Default Choices Comment language YES 103 languages Language are identified with their ISO_639-1 codes (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) cache No TRUE True / False True if you want to use the cache with this TTS Settings example default_text_to_speech : \"googletts\" text_to_speech : - googletts : language : \"fr\"","title":"googletts"},{"location":"settings/tts/googletts/#input-parameters","text":"Parameters Required Default Choices Comment language YES 103 languages Language are identified with their ISO_639-1 codes (https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) cache No TRUE True / False True if you want to use the cache with this TTS","title":"Input parameters"},{"location":"settings/tts/googletts/#settings-example","text":"default_text_to_speech : \"googletts\" text_to_speech : - googletts : language : \"fr\"","title":"Settings example"},{"location":"settings/tts/marytts/","text":"MaryTTS is an open-source, multilingual Text-to-Speech Synthesis platform written in Java. Input parameters Parameters Required Default Choices Comment voice yes None e.g. bits1, cmu-bdl, enst-camille Run ./marytts list to check your installed voices locale yes None e.g. de, en_US, fr Check http://localhost:59125/locales for installed locales host no localhost Host address of your MaryTTS server port no 59125 Port of your MaryTTS server Settings example For english voice on localhost add the following lines in your settings.yml: text_to_speech: - marytts: voice: \"cmu-bdl\" locale: \"en_US\" cache: True For english voice on remote host with default port: text_to_speech: - marytts: voice: \"cmu-bdl\" locale: \"en_US\" host: 192.168.0.25 cache: True Notes : Note: You need to install Marytts server .","title":"marytts"},{"location":"settings/tts/marytts/#input-parameters","text":"Parameters Required Default Choices Comment voice yes None e.g. bits1, cmu-bdl, enst-camille Run ./marytts list to check your installed voices locale yes None e.g. de, en_US, fr Check http://localhost:59125/locales for installed locales host no localhost Host address of your MaryTTS server port no 59125 Port of your MaryTTS server","title":"Input parameters"},{"location":"settings/tts/marytts/#settings-example","text":"For english voice on localhost add the following lines in your settings.yml: text_to_speech: - marytts: voice: \"cmu-bdl\" locale: \"en_US\" cache: True For english voice on remote host with default port: text_to_speech: - marytts: voice: \"cmu-bdl\" locale: \"en_US\" host: 192.168.0.25 cache: True","title":"Settings example"},{"location":"settings/tts/marytts/#notes","text":"Note: You need to install Marytts server .","title":"Notes :"},{"location":"settings/tts/pico2wave/","text":"This TTS is based on the SVOX picoTTS engine Input parameters Parameters Required Default Choices Comment language yes 6 languages List of supported languages in the Note section cache no TRUE True, False True if you want to use the cache with this TTS path no /usr/bin/pico2wave Path to the Pico2wave binary. If not set, Kalliope will try to load it from the environment Settings example default_text_to_speech : \"pico2wave\" text_to_speech : - pico2wave : language : \"fr-FR\" cache : True Notes Supported languages : English en-US English en-GB French fr-FR Spanish es-ES German de-DE Italian it-IT","title":"pico2wave"},{"location":"settings/tts/pico2wave/#input-parameters","text":"Parameters Required Default Choices Comment language yes 6 languages List of supported languages in the Note section cache no TRUE True, False True if you want to use the cache with this TTS path no /usr/bin/pico2wave Path to the Pico2wave binary. If not set, Kalliope will try to load it from the environment","title":"Input parameters"},{"location":"settings/tts/pico2wave/#settings-example","text":"default_text_to_speech : \"pico2wave\" text_to_speech : - pico2wave : language : \"fr-FR\" cache : True","title":"Settings example"},{"location":"settings/tts/pico2wave/#notes","text":"Supported languages : English en-US English en-GB French fr-FR Spanish es-ES German de-DE Italian it-IT","title":"Notes"},{"location":"settings/tts/voicerss/","text":"This TTS is based on the VoiceRSS engine . Official Documentation here Input parameters Parameters Required Default Choices Comment language YES 26 languages , example : \"fr-fr\" Languages are identified by the LCID string key YES register in the official website to get API key rate NO 0 any int Audio Rate codec NO 'MP3' 'MP3', 'WAV', 'AAC', 'OGG', 'CAF' Audio Codecs audio_format NO '44khz_16bit_stereo' 51 choices , '8khz_8bit_mono' Audio formats ssml NO False True / False True if you want ssml (only upgraded plans) base64 NO False True / False True if you want base64 ssl NO False True / False True if you want ssl cache NO True True / False True if you want to use the cache with this TTS Settings example default_text_to_speech : \"voicerss\" text_to_speech : - voicerss : language : \"fr-fr\" key : \"API_Key\" Notes limitations : 100KB per request The Free edition is limited to 350 daily requests. Possibility to upgrade the plan .","title":"voicerss"},{"location":"settings/tts/voicerss/#input-parameters","text":"Parameters Required Default Choices Comment language YES 26 languages , example : \"fr-fr\" Languages are identified by the LCID string key YES register in the official website to get API key rate NO 0 any int Audio Rate codec NO 'MP3' 'MP3', 'WAV', 'AAC', 'OGG', 'CAF' Audio Codecs audio_format NO '44khz_16bit_stereo' 51 choices , '8khz_8bit_mono' Audio formats ssml NO False True / False True if you want ssml (only upgraded plans) base64 NO False True / False True if you want base64 ssl NO False True / False True if you want ssl cache NO True True / False True if you want to use the cache with this TTS","title":"Input parameters"},{"location":"settings/tts/voicerss/#settings-example","text":"default_text_to_speech : \"voicerss\" text_to_speech : - voicerss : language : \"fr-fr\" key : \"API_Key\"","title":"Settings example"},{"location":"settings/tts/voicerss/#notes","text":"limitations : 100KB per request The Free edition is limited to 350 daily requests. Possibility to upgrade the plan .","title":"Notes"},{"location":"settings/tts/watson/","text":"This TTS is based on the IBM Watson engine . Installation You need to create an account and then a project to get a location and an apikey. Once you project created, you should see your credentials like the following { \"url\" : \"https://stream.watsonplatform.net/text-to-speech/api\" , \"apikey\" : \"myRANDOMAPIKEY\" } Input parameters Parameters Required Default Choices Comment apikey yes apikey provided by IAM location no LONDON endpoint location voice yes See voice table below Code that define the voice used for the synthesis pitch no medium See accepted values here Modifies the baseline pitch for the text rate no medium See accepted values here Change the speaking rate for the text Voice code Voice code that can be used in the voice flag of your configuration Languages Code Gender German de-DE_BirgitVoice Female German de-DE_BirgitV3Voice Female German de-DE_DieterVoice Male German de-DE_DieterV3Voice Male German de-DE_ErikaV3Voice Female UK English en-GB_CharlotteV3Voice Female UK English en-GB_JamesV3Voice Male UK English en-GB_KateVoice Female UK English en-GB_KateV3Voice Female US English en-US_AllisonVoice Female US English en-US_AllisonV3Voice Female US English en-US_EmilyV3Voice Female US English en-US_HenryV3Voice Male US English en-US_KevinV3Voice Male US English en-US_LisaVoice Female US English en-US_LisaV3Voice Female US English en-US_MichaelVoice (the default) Male US English en-US_MichaelV3Voice Male US English en-US_OliviaV3Voice Female Castilian Spanish es-ES_EnriqueVoice Male Castilian Spanish es-ES_EnriqueV3Voice Male Castilian Spanish es-ES_LauraVoice Female Castilian Spanish es-ES_LauraV3Voice Female Latin American Spanish es-LA_SofiaVoice Female Latin American Spanish es-LA_SofiaV3Voice Female North American Spanish es-US_SofiaVoice Female North American Spanish es-US_SofiaV3Voice Female French fr-FR_NicolasV3Voice Male French fr-FR_ReneeVoice Female French fr-FR_ReneeV3Voice Female Italian it-IT_FrancescaVoice Female Italian it-IT_FrancescaV3Voice Female Japanese ja-JP_EmiVoice Female Japanese ja-JP_EmiV3Voice Female Brazilian Portuguese pt-BR_IsabelaVoice Female Brazilian Portuguese pt-BR_IsabelaV3Voice Female Settings example default_text_to_speech : \"watson\" text_to_speech : - watson : apikey : \"MyRANDOMAPIKEY\" voice : \"fr-FR_ReneeVoice\" location : \"https://stream-fra.watsonplatform.net/text-to-speech/api\" pitch : \"+3st\" rate : \"+10%\" Notes This TTS engine is free for less than 10,000 Characters per Month.","title":"watson"},{"location":"settings/tts/watson/#installation","text":"You need to create an account and then a project to get a location and an apikey. Once you project created, you should see your credentials like the following { \"url\" : \"https://stream.watsonplatform.net/text-to-speech/api\" , \"apikey\" : \"myRANDOMAPIKEY\" }","title":"Installation"},{"location":"settings/tts/watson/#input-parameters","text":"Parameters Required Default Choices Comment apikey yes apikey provided by IAM location no LONDON endpoint location voice yes See voice table below Code that define the voice used for the synthesis pitch no medium See accepted values here Modifies the baseline pitch for the text rate no medium See accepted values here Change the speaking rate for the text","title":"Input parameters"},{"location":"settings/tts/watson/#voice-code","text":"Voice code that can be used in the voice flag of your configuration Languages Code Gender German de-DE_BirgitVoice Female German de-DE_BirgitV3Voice Female German de-DE_DieterVoice Male German de-DE_DieterV3Voice Male German de-DE_ErikaV3Voice Female UK English en-GB_CharlotteV3Voice Female UK English en-GB_JamesV3Voice Male UK English en-GB_KateVoice Female UK English en-GB_KateV3Voice Female US English en-US_AllisonVoice Female US English en-US_AllisonV3Voice Female US English en-US_EmilyV3Voice Female US English en-US_HenryV3Voice Male US English en-US_KevinV3Voice Male US English en-US_LisaVoice Female US English en-US_LisaV3Voice Female US English en-US_MichaelVoice (the default) Male US English en-US_MichaelV3Voice Male US English en-US_OliviaV3Voice Female Castilian Spanish es-ES_EnriqueVoice Male Castilian Spanish es-ES_EnriqueV3Voice Male Castilian Spanish es-ES_LauraVoice Female Castilian Spanish es-ES_LauraV3Voice Female Latin American Spanish es-LA_SofiaVoice Female Latin American Spanish es-LA_SofiaV3Voice Female North American Spanish es-US_SofiaVoice Female North American Spanish es-US_SofiaV3Voice Female French fr-FR_NicolasV3Voice Male French fr-FR_ReneeVoice Female French fr-FR_ReneeV3Voice Female Italian it-IT_FrancescaVoice Female Italian it-IT_FrancescaV3Voice Female Japanese ja-JP_EmiVoice Female Japanese ja-JP_EmiV3Voice Female Brazilian Portuguese pt-BR_IsabelaVoice Female Brazilian Portuguese pt-BR_IsabelaV3Voice Female","title":"Voice code"},{"location":"settings/tts/watson/#settings-example","text":"default_text_to_speech : \"watson\" text_to_speech : - watson : apikey : \"MyRANDOMAPIKEY\" voice : \"fr-FR_ReneeVoice\" location : \"https://stream-fra.watsonplatform.net/text-to-speech/api\" pitch : \"+3st\" rate : \"+10%\"","title":"Settings example"},{"location":"settings/tts/watson/#notes","text":"This TTS engine is free for less than 10,000 Characters per Month.","title":"Notes"}]}